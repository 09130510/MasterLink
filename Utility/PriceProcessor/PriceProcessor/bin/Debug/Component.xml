<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Component</name>
  </assembly>
  <members>
    <member name="T:DevAge.ComponentModel.IBoundList">
      <summary>
            A generic binded list interface. See BoundDataView or BoundList for a concreate implementation.
            It is used as an abstraction layer for list objects (typically a list can be a DataView or a IList class)
            Can be used to bind a list control (like SourceGrid).
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.BoundDataView">
      <summary>
            A class to support list binding to a DataView object.
            Implement the IBoundList.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.BoundDataView.EditedObject">
      <summary>
            Gets the current edited object
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.BoundListBase`1">
      <summary>
            An abstract class used for data binding. This class can be used as a base implementation of the IBoundList interface.
            You can use the concreate classes BoundList or BoundDataView or a custom class.
            To implement you own bound list class simply derive from this class and implement the abstract methods.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.Clear">
      <summary>
            Clear all list items
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.GetItemProperty(System.String,System.StringComparison)">
      <summary>
            Get an item property by name
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.OnAddNew">
      <summary>
            Create a new item (row) add it at the end of the list and return the new item.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.IndexOf(System.Object)">
      <summary>
            Return the index of the specified item
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.OnRemoveAt(System.Int32)">
      <summary>
            Remove the item at the specified position.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.OnClear">
      <summary>
            Remove all items.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.BoundListBase`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>
            Sort the list
            </summary>
      <param name="sorts">
      </param>
    </member>
    <member name="P:DevAge.ComponentModel.BoundListBase`1.EditedObject">
      <summary>
            Gets the current edited object
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.BoundListBase`1.AllowSort">
      <summary>
            Gets or sets if the sort is enabled. Usually is enabled only if the IList is an instance of List class
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.BoundListBase`1.Item(System.Int32)">
      <summary>
            Return the item at the specified position.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.ComponentModel.BoundListBase`1.Count">
      <summary>
            Return the row count of the list
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.BoundList`1">
      <summary>
            A class derived from BoundListBase that can be used to bind a list control (like SourceGrid) to a generic IList class.
            If the IList is an instance of List class then also the Sort is supported.
            Implement the IBoundList interface used for data binding.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:DevAge.ComponentModel.ItemDeletedEventHandler">
      <summary>
            Item deletion event handler.
            </summary>
      <param name="sender">Event sender.</param>
      <param name="e">Event arguments.</param>
    </member>
    <member name="T:DevAge.ComponentModel.ItemDeletedEventArgs">
      <summary>
            Event arguments for item deletion event.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.AnchorArea">
      <summary>
            The AnchorArea class is used to specify the anchor properties of an object.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            Use float.NaN to set a null value for one of the properties.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.AnchorArea.#ctor">
      <summary>
            Default is constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.AnchorArea.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
            Construct an anchor area object
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
      <param name="center">
      </param>
      <param name="middle">
      </param>
    </member>
    <member name="M:DevAge.Drawing.AnchorArea.#ctor(DevAge.Drawing.AnchorArea)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.AnchorArea.#ctor(DevAge.Drawing.ContentAlignment,System.Boolean)">
      <summary>
            Constructo an anchorarea class based on the aligment and the stretch parameters.
            </summary>
      <param name="aligment">
      </param>
      <param name="stretch">
      </param>
    </member>
    <member name="M:DevAge.Drawing.AnchorArea.CalculateArea(System.Drawing.RectangleF,System.Drawing.SizeF,DevAge.Drawing.AnchorArea)">
      <summary>
            Calculate the destination area of 
            </summary>
      <param name="area">
      </param>
      <param name="content">
      </param>
      <param name="anchor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.BorderLine">
      <summary>
            A struct that represents a single border line.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.BorderLine.Equals(System.Object)">
      <summary>
            Compare to current border with another border.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.BrushsCache">
      <summary>
            A class used to cache the Brush used by the drawing methods. Use the GetBrush method to retrive or insert new brushes.
            Remember to call Dispose when you don't need anymore this class to release all graphics resources.
            Usually you don't need to use this class directly but you can acces it using the GraphicsCache class.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.BrushsCache.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="maxCapacity">A positive number that specify the capacity of the cache.</param>
    </member>
    <member name="M:DevAge.Drawing.BrushsCache.GetBrush(System.Drawing.Color)">
      <summary>
            Returns the existing Brush object if already exist in the cache, otherwise create it and store in the cache.
            If there aren't anymore free slots (count &gt; capacity) the this method create the pen but don't store it in the cache.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.BrushsCache.Dispose">
      <summary>
            Dispose. Release the graphics resources.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.IBorder">
      <summary>
            Interface for all borders.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.IBorder.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.IBorder.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
      <summary>
      </summary>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.#ctor(DevAge.Drawing.VisualElements.EditablePanelBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
      <summary>
      </summary>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanel.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanel.#ctor(DevAge.Drawing.VisualElements.EditablePanel)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanel.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.EditablePanelThemed.mStandard">
      <summary>
            Standard button used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.#ctor(DevAge.Drawing.VisualElements.EditablePanelThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.ContentAlignment">
      <summary>
            Specifies alignment of content on the drawing surface.
            The same enum as System.Drawing.ContentAlignment. Rewritten for compatibility with the Compact Framework.
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.BottomCenter">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.  
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.BottomLeft">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.  
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.BottomRight">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.MiddleCenter">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.  
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.MiddleLeft">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.  
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.MiddleRight">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right. 
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.TopCenter">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.  
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.TopLeft">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left. 
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ContentAlignment.TopRight">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ElementsDrawMode.Covering">
      <summary>
            Draw each element over the previous
            </summary>
    </member>
    <member name="F:DevAge.Drawing.ElementsDrawMode.Align">
      <summary>
            Align each element with the previous if an alignment is specified.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.GraphicsCache">
      <summary>
            A wrapper for the GDI Graphic instance. Contains also a set of class used to cache pens and brushes.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.MeasureHelper">
      <summary>
            A class to help measure string operations. Remember to call the Dispose method on this class.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.MeasureHelper.#ctor(System.Windows.Forms.Control)">
      <summary>
            Create a graphic object from the current control
            </summary>
      <param name="control">
      </param>
    </member>
    <member name="M:DevAge.Drawing.MeasureHelper.#ctor(System.Drawing.Graphics)">
      <summary>
      </summary>
      <param name="graphics">This object is not automatically disposed.</param>
    </member>
    <member name="M:DevAge.Drawing.MeasureHelper.Dispose">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.Padding.Equals(System.Object)">
      <summary>
            Compare to current padding with another padding.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.PensCache">
      <summary>
            A class used to cache the Pens used by the drawing methods. Use the GetPen method to retrive or insert new pens.
            Remember to call Dispose when you don't need anymore this class to release all graphics resources.
            Usually you don't need to use this class directly but you can acces it using the GraphicsCache class.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.PensCache.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="maxCapacity">A positive number that specify the capacity of the cache.</param>
    </member>
    <member name="M:DevAge.Drawing.PensCache.GetPen(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
      <summary>
            Returns the existing Pen object if already exist in the cache, otherwise create it and store in the cache.
            If there aren't anymore free slots (count &gt; capacity) the this method create the pen but don't store it in the cache.
            </summary>
      <param name="color">
      </param>
      <param name="width">
      </param>
      <param name="style">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.PensCache.Dispose">
      <summary>
            Dipose. Release the graphics resources.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.RectangleBorder">
      <summary>
            A struct that represents the borders of a cell. Contains 4 borders: Right, Left, Top, Bottom.
            If you have 2 adjacent cells and want to create a 1 pixel width border, you must set width 1 for one cell and width 0 for the other. Usually a cell has only Right and Bottom border.
            The bottom and top border lines are drawed over the right and left lines.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine)">
      <summary>
            Construct a RectangleBorder with the same border on all the side
            </summary>
      <param name="p_Border">
      </param>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine)">
      <summary>
            Construct a RectangleBorder with the specified Right and Bottom border and a 0 Left and Top border
            </summary>
      <param name="p_Right">
      </param>
      <param name="p_Bottom">
      </param>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine)">
      <summary>
            Construct a RectangleBorder with the specified borders
            </summary>
      <param name="p_Top">
      </param>
      <param name="p_Bottom">
      </param>
      <param name="p_Left">
      </param>
      <param name="p_Right">
      </param>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.SetColor(System.Drawing.Color)">
      <summary>
            Change the color of the current struct instance and return a copy of the modified struct.
            </summary>
      <param name="p_Color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.SetDashStyle(System.Drawing.Drawing2D.DashStyle)">
      <summary>
            Change the dashStyle of the current struct instance and return a copy of the modified struct.
            </summary>
      <param name="dashStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.SetWidth(System.Int32)">
      <summary>
            Change the width of the current struct instance and return a copy of the modified struct.
            </summary>
      <param name="p_Width">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.SetPadding(System.Int32)">
      <summary>
            Change the width of the current struct instance and return a copy of the modified struct.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.Equals(System.Object)">
      <summary>
            Compare to current border with another border.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.CreateInsetBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Create an Inset border
            </summary>
      <param name="p_width">
      </param>
      <param name="p_ShadowColor">
      </param>
      <param name="p_LightColor">
      </param>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.CreateRaisedBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Create a Raised border
            </summary>
      <param name="p_width">
      </param>
      <param name="p_ShadowColor">
      </param>
      <param name="p_LightColor">
      </param>
    </member>
    <member name="M:DevAge.Drawing.RectangleBorder.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
      <summary>
      </summary>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.RoundedRectangle">
      <summary>
            Rapresents a rounded rectangle, takes a rectangle and a round value from 0 to 1. Can be converted to a GraphicsPath for drawing operations.
            See also DevAge.Drawing.Utilities.FillRoundedRectangle and DrawRoundedRectangle methods.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.RoundedRectangle.#ctor(System.Drawing.Rectangle,System.Double)">
      <summary>
            Costructor
            </summary>
      <param name="rect">Content rectangle</param>
      <param name="roundValue">The amount to round the rectangle. Can be any vavlues from 0 to 1. Set to 0 to draw a standard rectangle, 1 to have a full rounded rectangle.</param>
    </member>
    <member name="M:DevAge.Drawing.RoundedRectangle.ToGraphicsPath">
      <summary>
            Converts this structure to a GraphicsPath object, used to draw to a Graphics device.
            Consider that you can create a Region with a GraphicsPath object using one of the Region constructor.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.RoundedRectangle.RoundValue">
      <summary>
            The amount to round the rectangle. Can be any values from 0 to 1. Set to 0 to draw a standard rectangle, 1 to have a full rounded rectangle.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.Utilities">
      <summary>
            A static class with drawing utilities functions
            </summary>
    </member>
    <member name="M:DevAge.Drawing.Utilities.DrawRoundedRectangle(System.Drawing.Graphics,DevAge.Drawing.RoundedRectangle,System.Drawing.Pen)">
      <summary>
            Draw a rounded rectangle with the specified pen.
            </summary>
      <param name="g">
      </param>
      <param name="roundRect">
      </param>
      <param name="pen">
      </param>
    </member>
    <member name="M:DevAge.Drawing.Utilities.FillRoundedRectangle(System.Drawing.Graphics,DevAge.Drawing.RoundedRectangle,System.Drawing.Brush)">
      <summary>
            Fill a rounded rectangle with the specified brush.
            </summary>
      <param name="g">
      </param>
      <param name="roundRect">
      </param>
      <param name="brush">
      </param>
    </member>
    <member name="M:DevAge.Drawing.Utilities.DrawGradient3DBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,DevAge.Drawing.Gradient3DBorderStyle)">
      <summary>
            Draw a 3D border inside the specified rectangle using a linear gradient border color.
            </summary>
      <param name="g">
      </param>
      <param name="p_HeaderRectangle">
      </param>
      <param name="p_BackColor">
      </param>
      <param name="p_DarkColor">
      </param>
      <param name="p_LightColor">
      </param>
      <param name="p_DarkGradientNumber">The width of the dark border</param>
      <param name="p_LightGradientNumber">The width of the light border</param>
      <param name="p_Style">
      </param>
    </member>
    <member name="M:DevAge.Drawing.Utilities.CalculateColorGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
      <summary>
            Interpolate the specified number of times between start and end color
            </summary>
      <param name="p_StartColor">
      </param>
      <param name="p_EndColor">
      </param>
      <param name="p_NumberOfGradients">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.CalculateMiddleColor(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Calculate the middle color between the start and the end color.
            </summary>
      <param name="p_StartColor">
      </param>
      <param name="p_EndColor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.CalculateLightDarkColor(System.Drawing.Color,System.Single)">
      <summary>
            Calculate a darker or lighter color using the source specified.
            A light of 1 is White, a light of -1 is black. All the other values are an interpolation from the source color.
            </summary>
      <param name="source">
      </param>
      <param name="light">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.ImageToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Converts the specified image to an array of byte using the specified format.
            </summary>
      <param name="img">
      </param>
      <param name="imgFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.BytesToImage(System.Byte[])">
      <summary>
            Converts the specified byte array to an Image object.
            </summary>
      <param name="bytes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.CreateDisabledImage(System.Drawing.Image,System.Drawing.Color)">
      <summary>
            Create a disabled version of the image.
            </summary>
      <param name="image">The image to convert</param>
      <param name="background">The Color of the background behind the image. The background parameter is used to calculate the fill color of the disabled image so that it is always visible against the background.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.Utilities.SizeFToSize(System.Drawing.SizeF)">
      <summary>
            Convert a SizeF structure to a Size structure rounding the value to the largest integer using Ceiling method.
            </summary>
      <param name="sizef">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.IVisualElement">
      <summary>
            Interface for all the VisualElements classes. Inherits from IClonable.
            Support a deep clone.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.IVisualElement.GetDrawingArea(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
      <summary>
            Gets the area where the visual element will be drawed.
            </summary>
      <param name="measure">
      </param>
      <param name="area">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Measure(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Measure the current VisualElement using the specified settings.
            </summary>
      <param name="measure">
      </param>
      <param name="minSize">If Empty is not used.</param>
      <param name="maxSize">If Empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.RectangleF@)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
      <param name="drawingArea">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.IVisualElement.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper element and the first element is the background element.
            </summary>
      <param name="measure">
      </param>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IVisualElement.AnchorArea">
      <summary>
            Gets or sets the area where the content must be drawed.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.VisualElementBase">
      <summary>
            VisualElement abstract base class. 
            You must override the OnDraw, OnMeasureContent and Clone.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.#ctor(DevAge.Drawing.VisualElements.VisualElementBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Measure(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>
            Measure the current VisualElement using the specified settings.
            </summary>
      <param name="measure">
      </param>
      <param name="minSize">If Empty is not used.</param>
      <param name="maxSize">If Empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.RectangleF@)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
      <param name="drawingArea">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the current VisualElement in the specified Graphics object.
            Usually derived class don't override this method but the OnDraw method that automatically check the area to draw.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.GetDrawingArea(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
      <summary>
            Gets the area where the visual element will be drawed.
            </summary>
      <param name="measure">
      </param>
      <param name="area">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.OnDraw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Method used to draw the specified content based on the Visual element. 
            This is the method that you must override to draw. The area used is already calculated based on the AnchorArea property.
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper element and the first element is the background element.
            </summary>
      <param name="measure">
      </param>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Clone">
      <summary>
            Clone the current VisualElement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.VisualElementBase.AnchorArea">
      <summary>
            Gets or sets the area where the content must be drawed.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.BackgroundBase">
      <summary>
            The background visualelement can be used as a background for a container element.
            Override the OnDraw, GetBackgroundContentRectangle and GetBackgroundExtent to draw a custom background.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.#ctor(DevAge.Drawing.VisualElements.BackgroundBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.GetBackgroundContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
      <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.GetBackgroundExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.BackgroundLinearGradient">
      <summary>
            Class used to draw a standard linear gradient background. If FirstColor == SecondColor a solid color is drawed.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="firstColor">
      </param>
      <param name="secondColor">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor(DevAge.Drawing.VisualElements.BackgroundLinearGradient)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.FirstColor">
      <summary>
            Gets or sets the first back color of the content.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.SecondColor">
      <summary>
            Gets or sets the second back color of the content.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.Angle">
      <summary>
            Gets or sets the angle of the gradient
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.BlendFactors">
      <summary>
            Gradients are commonly used to smoothly shade the interiors of shapes. A blend pattern is defined by two arrays (Factors and Positions) that each contain the same number of elements. Each element of the Positions array represents a proportion of the distance along the gradient line. Each element of the Factors array represents the proportion of the starting and ending colors in the gradient blend at the position along the gradient line represented by the corresponding element in the Positions array.
            For example, if corresponding elements of the Positions and Factors arrays are 0.2 and 0.3, respectively, for a linear gradient from blue to red along a 100-pixel line, the color 20 pixels along that line (20 percent of the distance) consists of 30 percent blue and 70 percent red.
            
            See System.Drawing.Drawing2D.Blend for details
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.BlendPositions">
      <summary>
             Gradients are commonly used to smoothly shade the interiors of shapes. A blend pattern is defined by two arrays (Factors and Positions) that each contain the same number of elements. Each element of the Positions array represents a proportion of the distance along the gradient line. Each element of the Factors array represents the proportion of the starting and ending colors in the gradient blend at the position along the gradient line represented by the corresponding element in the Positions array.
             For example, if corresponding elements of the Positions and Factors arrays are 0.2 and 0.3, respectively, for a linear gradient from blue to red along a 100-pixel line, the color 20 pixels along that line (20 percent of the distance) consists of 30 percent blue and 70 percent red.
            
             See System.Drawing.Drawing2D.Blend for details
             </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.BackgroundSolid.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.BackgroundSolid.BackColor">
      <summary>
            Gets or sets the back color of the content.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonBase.#ctor(DevAge.Drawing.VisualElements.ButtonBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Button.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Button.#ctor(DevAge.Drawing.VisualElements.Button)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Button.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.ButtonThemed.mStandardButton">
      <summary>
            Standard button used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.#ctor(DevAge.Drawing.VisualElements.ButtonThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxBase.#ctor(DevAge.Drawing.VisualElements.CheckBoxBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBox.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBox.#ctor(DevAge.Drawing.VisualElements.CheckBox)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBox.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.CheckBoxThemed.mStandardCheckBox">
      <summary>
            Standard checkbox used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.#ctor(DevAge.Drawing.VisualElements.CheckBoxThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderBase.#ctor(DevAge.Drawing.VisualElements.HeaderBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderBase.#ctor(DevAge.Drawing.VisualElements.ColumnHeaderBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.#ctor(DevAge.Drawing.VisualElements.ColumnHeader)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.BackColor">
      <summary>
            Back Color
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.BackgroundColorStyle">
      <summary>
            Draw mode for the header. Default is Linear.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.Border">
      <summary>
            Border
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.ColumnHeaderThemed.mStandardHeader">
      <summary>
            Standard column header used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.#ctor(DevAge.Drawing.VisualElements.ColumnHeaderThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.ContainerBase">
      <summary>
            The base abstract class for all container VisualElements. 
            Override the GetElements() to get a collection of elements to draw inside the container.
            Use the Border, Padding and Background properties to customize the container
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.#ctor(DevAge.Drawing.VisualElements.ContainerBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
      <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper (foremost) element and the first element is the background element.
            </summary>
      <param name="measure">
      </param>
      <param name="area">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateRemainingArea(System.Drawing.RectangleF,DevAge.Drawing.AnchorArea,System.Drawing.RectangleF)">
      <summary>
            Utility function. Calculates the remaining empty area of a specified area and a given content.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateSizeWithContent(System.Drawing.SizeF,DevAge.Drawing.AnchorArea,System.Drawing.SizeF)">
      <summary>
            Utility function. Calculate the required size adding using the anchor informations of the available area.
            </summary>
      <param name="currentSize">
      </param>
      <param name="contentAnchor">
      </param>
      <param name="contentSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateSizeWithAnchor(System.Drawing.SizeF,DevAge.Drawing.AnchorArea,System.Drawing.SizeF)">
      <summary>
            Add the anchor informations to the element content size
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.ContainerBase.ElementsDrawMode">
      <summary>
            Gets or sets a property that specify how to draw the elements.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.ContainerBase.Background">
      <summary>
            The background used to draw
            </summary>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.Container">
      <summary>
            A container for other elements
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Container.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Container.#ctor(DevAge.Drawing.VisualElements.Container)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Container.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonBase.#ctor(DevAge.Drawing.VisualElements.DropDownButtonBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButton.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButton.#ctor(DevAge.Drawing.VisualElements.DropDownButton)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButton.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.DropDownButtonThemed.mStandardButton">
      <summary>
            Standard button used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.#ctor(DevAge.Drawing.VisualElements.DropDownButtonThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Header.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Header.#ctor(DevAge.Drawing.VisualElements.Header)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Header.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Header.GetBackgroundContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
      <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Header.GetBackgroundExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Header.BackColor">
      <summary>
            Back Color
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Header.Border">
      <summary>
            Border
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Header.GradientAngle">
      <summary>
            Gradient angle used for linear gradient.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Header.BackgroundColorStyle">
      <summary>
            Draw mode for the header. Default is Linear.
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.HeaderThemed.mStandardHeader">
      <summary>
            Standard header used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.#ctor(DevAge.Drawing.VisualElements.HeaderThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor(System.Drawing.Icon)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor(DevAge.Drawing.VisualElements.Icon)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Icon.Value">
      <summary>
            Gets or sets the Icon to draw. Default is null.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Image.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Image.#ctor(System.Drawing.Image)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Image.#ctor(DevAge.Drawing.VisualElements.Image)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Image.Value">
      <summary>
            Gets or sets the Image to draw. Default is null.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.IRichText">
      <summary>
            Default interface for RichText implementations
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IRichText.Value">
      <summary>
            Text of format RichText
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IRichText.ForeColor">
      <summary>
            ForeColor of text
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IRichText.TextAlignment">
      <summary>
            Text Alignment.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IRichText.Font">
      <summary>
            Text Font
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.IRichText.RotateFlipType">
      <summary>
            Rotate flip type
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.RichText.m_TextAlignment">
      <summary>
            Text Alignment
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.RichText.m_Font">
      <summary>
            Text Font
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.RichText.m_RotateFlipType">
      <summary>
            Rotate flip type
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor(DevAge.Windows.Forms.RichText)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor(DevAge.Drawing.VisualElements.RichText)">
      <summary>
            Copy constructor.
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichText.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichText.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RichText.Value">
      <summary>
            Gets or sets the string of format rich text to draw. Default is null.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RichText.ForeColor">
      <summary>
            Gets or sets the fore color of the content. System.Windows.Forms.Control.DefaultForeColor
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.RichTextGDI.m_RichTextBoxEditor">
      <summary>
            Will be used to draw picture of rich text. Is static for performance reasons
            and therefore needs to be locked.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor(DevAge.Windows.Forms.RichText)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor(DevAge.Drawing.VisualElements.RichTextGDI)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.AssertRichTextBoxEditor">
      <summary>
            Init rich text box control
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.HundredthInchToTwips(System.Single)">
      <summary>
            Convert between 1/100 inch (unit used by the .NET framework)
            and twips (1/1440 inch, used by Win32 API calls)
            </summary>
      <param name="n">Value in 1/100 inch</param>
      <returns>Value in twips</returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.FormatRange(System.Boolean,DevAge.Windows.Forms.DevAgeRichTextBox,System.Drawing.Bitmap@,System.Int32,System.Int32)">
      <summary>
            Calculate or render the contents of our RichTextBox for printing
            </summary>
      <param name="measureOnly">If true, only the calculation is performed,
            otherwise the text is rendered as well</param>
      <param name="b">
      </param>
      <param name="rtb">
      </param>
      <param name="charFrom">Index of first character to be printed</param>
      <param name="charTo">Index of last character to be printed</param>
      <returns>(Index of last character that fitted on the
            page) + 1</returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.FormatRangeDone(DevAge.Windows.Forms.DevAgeRichTextBox)">
      <summary>
            Free cached data from rich edit control after printing
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.GetBitmapArea(System.Drawing.RectangleF,System.Drawing.RotateFlipType)">
      <summary>
            Helper method to get bitmap with size according its area and rotate flip type
            </summary>
      <param name="area">
      </param>
      <param name="rotateFlipType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.OnDraw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Render RichTextBox as GDI
            </summary>
      <param name="graphics">
      </param>
      <param name="area">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.DrawImage(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.Bitmap)">
      <summary>
            Draw actual picture
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderBase.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderBase.#ctor(DevAge.Drawing.VisualElements.RowHeaderBase)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeader.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeader.#ctor(DevAge.Drawing.VisualElements.RowHeader)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeader.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RowHeader.BackColor">
      <summary>
            Back Color
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RowHeader.BackgroundColorStyle">
      <summary>
            Draw mode for the header. Default is Linear.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RowHeader.Border">
      <summary>
            Border
            </summary>
    </member>
    <member name="F:DevAge.Drawing.VisualElements.RowHeaderThemed.mStandardRowHeader">
      <summary>
            Standard header used when the XP style are disabled.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.#ctor(DevAge.Drawing.VisualElements.RowHeaderThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.RowHeaderThemed.RotateColHeaderIfNotDefined">
      <summary>
            Gets or sets a property to indicate to rotate the standard column header if the row header is not defined in the current theme.
            This is expecially usefull because for many themes the row header is not defined. Default is true.
            </summary>
    </member>
    <member name="T:DevAge.Drawing.VisualElements.SortIndicator">
      <summary>
            A class used to draw a generic sort indicator, usually a arrow. Use the SortStyle to customize the sort style (arrow up or arrow down)
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicator.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicator.#ctor(DevAge.Drawing.VisualElements.SortIndicator)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicator.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.#ctor(DevAge.Drawing.VisualElements.SortIndicatorThemed)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
      <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Text.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Text.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Text.#ctor(DevAge.Drawing.VisualElements.Text)">
      <summary>
            Copy constructor.
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Text.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.Text.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Text.Font">
      <summary>
            Gets or sets the Font of the content. Default is System.Windows.Forms.Control.DefaultFont.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Text.ForeColor">
      <summary>
            Gets or sets the fore color of the content. System.Windows.Forms.Control.DefaultForeColor
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.Text.Value">
      <summary>
            Gets or sets the string to draw. Default is null.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor(DevAge.Drawing.VisualElements.TextGDI)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextGDI.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextGDI.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.TextGDI.StringFormat">
      <summary>
            Gets or sets the StringFormat object. 
            Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.
            </summary>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.TextGDI.Alignment">
      <summary>
            Gets or sets the alignment of the content.
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor(DevAge.Drawing.VisualElements.TextRenderer)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextRenderer.Clone">
      <summary>
            Clone
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Drawing.VisualElements.TextRenderer.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
      <summary>
            Measure the current content of the VisualElement.
            </summary>
      <param name="measure">
      </param>
      <param name="maxSize">If empty is not used.</param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Drawing.VisualElements.TextRenderer.TextFormatFlags">
      <summary>
            Gets or sets the TextFormatFlags enum. 
            </summary>
    </member>
    <member name="T:DevAge.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:DevAge.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:DevAge.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ButtonMultiSelection">
      <summary>
            Summary description for ButtonMultiSelection.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.ButtonMultiSelection.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ButtonMultiSelection.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ButtonMultiSelection.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.SubButtonItemCollection">
      <summary>
            A collection of elements of type SubButtonItem
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.SubButtonItemCollection.Enumerator">
      <summary>
            Type-specific enumeration class, used by SubButtonItemCollection.GetEnumerator.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor">
      <summary>
            Initializes a new empty instance of the SubButtonItemCollection class.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor(DevAge.Windows.Forms.SubButtonItem[])">
      <summary>
            Initializes a new instance of the SubButtonItemCollection class, containing elements
            copied from an array.
            </summary>
      <param name="items">
            The array whose elements are to be added to the new SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor(DevAge.Windows.Forms.SubButtonItemCollection)">
      <summary>
            Initializes a new instance of the SubButtonItemCollection class, containing elements
            copied from another instance of SubButtonItemCollection
            </summary>
      <param name="items">
            The SubButtonItemCollection whose elements are to be added to the new SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.AddRange(DevAge.Windows.Forms.SubButtonItem[])">
      <summary>
            Adds the elements of an array to the end of this SubButtonItemCollection.
            </summary>
      <param name="items">
            The array whose elements are to be added to the end of this SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.AddRange(DevAge.Windows.Forms.SubButtonItemCollection)">
      <summary>
            Adds the elements of another SubButtonItemCollection to the end of this SubButtonItemCollection.
            </summary>
      <param name="items">
            The SubButtonItemCollection whose elements are to be added to the end of this SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Add(DevAge.Windows.Forms.SubButtonItem)">
      <summary>
            Adds an instance of type SubButtonItem to the end of this SubButtonItemCollection.
            </summary>
      <param name="value">
            The SubButtonItem to be added to the end of this SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Contains(DevAge.Windows.Forms.SubButtonItem)">
      <summary>
            Determines whether a specfic SubButtonItem value is in this SubButtonItemCollection.
            </summary>
      <param name="value">
            The SubButtonItem value to locate in this SubButtonItemCollection.
            </param>
      <returns>
            true if value is found in this SubButtonItemCollection;
            false otherwise.
            </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.IndexOf(DevAge.Windows.Forms.SubButtonItem)">
      <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this SubButtonItemCollection
            </summary>
      <param name="value">
            The SubButtonItem value to locate in the SubButtonItemCollection.
            </param>
      <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Insert(System.Int32,DevAge.Windows.Forms.SubButtonItem)">
      <summary>
            Inserts an element into the SubButtonItemCollection at the specified index
            </summary>
      <param name="index">
            The index at which the SubButtonItem is to be inserted.
            </param>
      <param name="value">
            The SubButtonItem to insert.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Remove(DevAge.Windows.Forms.SubButtonItem)">
      <summary>
            Removes the first occurrence of a specific SubButtonItem from this SubButtonItemCollection.
            </summary>
      <param name="value">
            The SubButtonItem value to remove from this SubButtonItemCollection.
            </param>
    </member>
    <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the elements of this SubButtonItemCollection.
            </summary>
      <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>
    </member>
    <member name="P:DevAge.Windows.Forms.SubButtonItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the SubButtonItem at the given index in this SubButtonItemCollection.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.SubButtonItemCollection.Item(System.String)">
      <summary>
            Gets or sets the SubButtonItem at the given index in this SubButtonItemCollection.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.EditableControlBase">
      <summary>
            Summary description for EditableControlBase.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.EditableControlBase.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.EditableControlBase.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.EditableControlBase.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ColorPicker">
      <summary>
            Summary description for ColorPicker.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.ColorPicker.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ColorPicker.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ColorPicker.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ControlCursor">
      <summary>
            Summary description for ControlCursor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DevAgeComboBox">
      <summary>
            DevAgeComboBox has a typed Value property and the validating features using the Validator property.
            Set the Validator property and then call the ApplyValidatorRules method.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeComboBox.IsValidValue(System.Object@)">
      <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
      <param name="convertedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeComboBox.ApplyValidatorRules">
      <summary>
            Loads the Items from the StandardValues and the DropDownStyle based on the parameters of the validator.
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeComboBox.FormatValue">
      <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control.
            Default false.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeComboBox.Validator">
      <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeComboBox.Value">
      <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DevAgeMaskedTextBox">
      <summary>
            A TextBox that allows to set the type of value to edit, then you can use the Value property to read and write the specific type.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeMaskedTextBox.ApplyValidatorRules">
      <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeMaskedTextBox.IsValidValue(System.Object@)">
      <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
      <param name="convertedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.FormatValue">
      <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.Validator">
      <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.Value">
      <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeNumericUpDown.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeNumericUpDown.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeNumericUpDown.WrapValue">
      <summary>
            If set, incrementing value will cause it to restart from Minimum 
            when Maximum is reached (and viceversa).
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.EffectType">
      <summary>
            Used for subscript and superscript
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.UnderlineStyle">
      <summary>
            Specifies the style of underline that should be
            applied to the text.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.None">
      <summary>
            No underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Normal">
      <summary>
            Standard underlining across all words.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Word">
      <summary>
            Standard underlining broken between words.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Double">
      <summary>
            Double line underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Dotted">
      <summary>
            Dotted underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Dash">
      <summary>
            Dashed underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.DashDot">
      <summary>
            Dash-dot ("-.-.") underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.DashDotDot">
      <summary>
            Dash-dot-dot ("-..-..") underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Wave">
      <summary>
            Wave underlining (like spelling mistakes in MS Word).
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.Thick">
      <summary>
            Extra thick standard underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.HairLine">
      <summary>
            Extra thin standard underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.DoubleWave">
      <summary>
            Double thickness wave underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.HeavyWave">
      <summary>
            Thick wave underlining.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineStyle.LongDash">
      <summary>
            Extra long dash underlining.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.UnderlineColor">
      <summary>
            Specifies the color of underline that should be
            applied to the text.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Black">
      <summary>Black.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Blue">
      <summary>Blue.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Cyan">
      <summary>Cyan.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.LimeGreen">
      <summary>Lime green.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Magenta">
      <summary>Magenta.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Red">
      <summary>Red.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Yellow">
      <summary>Yellow.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.White">
      <summary>White.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkBlue">
      <summary>DarkBlue.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkCyan">
      <summary>DarkCyan.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Green">
      <summary>Green.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkMagenta">
      <summary>Dark magenta.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Brown">
      <summary>Brown.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.OliveGreen">
      <summary>Olive green.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkGray">
      <summary>Dark gray.</summary>
    </member>
    <member name="F:DevAge.Windows.Forms.UnderlineColor.Gray">
      <summary>Gray.</summary>
    </member>
    <member name="T:DevAge.Windows.Forms.RichText">
      <summary>
            Class which contains a rich text string.
            Used to distinguish between string and rich text
            as normally rich text is also a string.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.RichText.m_Rtf">
      <summary>
            RichText
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.RichText.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="rtf">
      </param>
    </member>
    <member name="M:DevAge.Windows.Forms.RichText.#ctor(DevAge.Windows.Forms.RichText)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:DevAge.Windows.Forms.RichText.CompareTo(System.Object)">
      <summary>
            Compare this instance with a specified RichText object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.RichText.CompareTo(DevAge.Windows.Forms.RichText)">
      <summary>
            Compare this instance with a specified RichText.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.RichText.ToString">
      <summary>
            Return richtext as string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Windows.Forms.RichTextConversion">
      <summary>
            RichText conversion methods
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.RichTextConversion.StringToRichText(System.String)">
      <summary>
            Convert plain text to rtf
            </summary>
      <param name="txt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.RichTextConversion.StringToRichText(System.String,System.Drawing.FontStyle)">
      <summary>
            Convert plain text to rtf with font style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.RichTextConversion.RichTextToString(DevAge.Windows.Forms.RichText)">
      <summary>
            Convert rtf to plain text
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Windows.Forms.DevAgeRichTextBox">
      <summary>
            A RichTextBox that allows to set the type of value to edit,
            then you can use the Value property to read and write the specific type.
            Furthermore, it is possible to format single characters.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionSuper">
      <summary>
            Set the selection to superscript
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionSub">
      <summary>
            Set the selection to subscript
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionNormal">
      <summary>
            Set the selection to normal
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.ApplyValidatorRules">
      <summary>
            Apply the current Validator rules. This method is automatically
            fired when the Validator changed.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.IsValidValue(DevAge.Windows.Forms.RichText@)">
      <summary>
            Check if the selected value is valid based on the
            current validator and returns the value.
            </summary>
      <param name="convertedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.BeginUpdate">
      <summary>
            Maintains performance while updating.
            </summary>
      <remarks>
        <para>
            It is recommended to call this method before doing
            any major updates that you do not wish the user to
            see. Remember to call EndUpdate when you are finished
            with the update. Nested calls are supported.
            </para>
        <para>
            Calling this method will prevent redrawing. It will
            also setup the event mask of the underlying richedit
            control so that no events are sent.
            </para>
      </remarks>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.EndUpdate">
      <summary>
            Resumes drawing and event handling.
            </summary>
      <remarks>
            This method should be called every time a call is made
            made to BeginUpdate. It resets the event mask to it's
            original value and enables redrawing of the control.
            </remarks>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.AppendText(System.String,System.Drawing.FontStyle)">
      <summary>
            Append a text with the specified fontstyle to the rich text box
            </summary>
      <param name="text">plain text to append</param>
      <param name="fontStyle">the fontstyle for the appended text</param>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.RemoveFormats(System.Boolean)">
      <summary>
            Remove all formatting, optionally with tabs and line breaks
            </summary>
      <param name="withWhitespaces">true with tabs and line breaks</param>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.MeasureTextBoxContent(System.Drawing.Font)">
      <summary>
            Measure the content of the text box
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionUnderlineStyle">
      <summary>
            Gets or sets the underline style to apply to the
            current selection or insertion point.
            </summary>
      <remarks>
            Underline styles can be set to any value of the
            <see cref="T:DevAge.Windows.Forms.UnderlineStyle" /> enumeration.
            </remarks>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionUnderlineColor">
      <summary>
            Gets or sets the underline color to apply to the
            current selection or insertion point.
            </summary>
      <remarks>
            Underline colors can be set to any value of the
            <see cref="T:DevAge.Windows.Forms.UnderlineColor" /> enumeration.
            </remarks>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionEffect">
      <summary>
            Set the effect of the selected text
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.Validator">
      <summary>
            Gets or sets the Validator class useded to validate the value
            and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of
            the Validator directly to the ComboBox, for example the list of values.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.Value">
      <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is null the Text property is used.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.InternalUpdating">
      <summary>
            Returns true when the control is performing some 
            internal updates
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DevAgeTextBox">
      <summary>
            A TextBox that allows to set the type of value to edit, then you can use the Value property to read and write the specific type.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBox.ApplyValidatorRules">
      <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBox.IsValidValue(System.Object@)">
      <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
      <param name="convertedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBox.FormatValue">
      <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBox.Validator">
      <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBox.Value">
      <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DevAgeTextBoxButton">
      <summary>
            A textBox with a button on the right.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.DevAgeTextBoxButton.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.ApplyValidatorRules">
      <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.ShowDialog">
      <summary>
            Show the dialog
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.OnDialogOpen(System.EventArgs)">
      <summary>
            Fired when showing the drop down
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.OnDialogClosed(System.EventArgs)">
      <summary>
            Fired when closing the dropdown
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.IsValidValue(System.Object@)">
      <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
      <param name="convertedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Validator">
      <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Button">
      <summary>
            The button in the right of the editor
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Value">
      <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
    </member>
    <member name="E:DevAge.Windows.Forms.DevAgeTextBoxButton.DialogOpen">
      <summary>
            Fired when showing the drop down
            </summary>
    </member>
    <member name="E:DevAge.Windows.Forms.DevAgeTextBoxButton.DialogClosed">
      <summary>
            Fired when closing the dropdown
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DropDown">
      <summary>
            Summary description for DropDownCustom.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.DropDown.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DropDown.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Form)">
      <summary>
            Constructor to create a dropdown form used to display the innerControl specified.
            It is responsability of the caller to dispose the innerControl.
            </summary>
      <param name="innerControl">
      </param>
      <param name="parentControl">
      </param>
      <param name="owner">
      </param>
    </member>
    <member name="M:DevAge.Windows.Forms.DropDown.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DropDown.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.DropDownFlags.CloseOnEscape">
      <summary>
            Close the DropDown whe the user press the escape key, return DialogResult.Cancel
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.DropDownFlags.CloseOnEnter">
      <summary>
            Close the DropDown whe the user press the enter key, return DialogResult.OK
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.DropDownButton">
      <summary>
            Summary description for DropDownButton.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.DropDownButton.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DropDownButton.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.DropDownButton.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ErrorDialog">
      <summary>
            A Windows Forms Form that can be used to display a dialog similar to a message box to show an exception.
            Can be used to show the Exception.Message, call stack and inner exception by clicking on the Details link.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.ErrorDialog.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ErrorDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ErrorDialog.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ErrorDialogDetails">
      <summary>
            Summary description for ErrorDialogDetails.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.ErrorDialogDetails.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ErrorDialogDetails.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ErrorDialogDetails.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.FormBase">
      <summary>
            Summary description for FormPosition.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.FormBase.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.FormBase.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.FormBase.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.HeaderGroupBox">
      <summary>
            Summary description for HeaderGroupBox.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.ImageNavigator">
      <summary>
            Summary description for ImageNavigator.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.ImageNavigator.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ImageNavigator.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.ImageNavigator.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.Line">
      <summary>
            Summary description for Line.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.Line.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.Line.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.Line.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.LinkLabel">
      <summary>
            A LinkLabel with Image support and round border support.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.LinkLabel.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.LinkLabel.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.LinkLabel.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.Image">
      <summary>
            The default image to draw
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.MouseOverImage">
      <summary>
            Specifies the image to display when the mouse is inside the link area. If null is used the normal image.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.DisabledImage">
      <summary>
            Specifies the image to display when the link is disabled.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.BorderWidth">
      <summary>
            Gets or sets the width of the border. If 0 no border is drawed.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.BorderRound">
      <summary>
            Round amount. If 0 the border is a not rounded.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.LinkLabel.BorderColor">
      <summary>
            Border color.
            </summary>
    </member>
    <member name="F:DevAge.Windows.Forms.SaveFlags.ActiveMDIMaximized">
      <summary>
            Indicates to save all the childs form of a MDI window with the state of the active child window if this window is maximized. This flag allow to reopen all the child form maximized if you close the form MDI parent with a maximized mdi child.
            </summary>
    </member>
    <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingBase">
      <summary>
            Abstract class that help to save settings in the isolated storage
            </summary>
    </member>
    <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingVersionBase">
      <summary>
            Summary description for IsolatedStorageSettingVersionBase.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.PositionRecorderIsolatedStorage">
      <summary>
            A class that can be used to save into the isolated storage the position and the state of a Windows Forms control.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.TextBoxUITypeEditor">
      <summary>
            A TextBoxTypedButton that uase the UITypeEditor associated with the type.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.TextBoxUITypeEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:DevAge.Windows.Forms.TextBoxUITypeEditor.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:DevAge.Windows.Forms.TextBoxUITypeEditor.UITypeEditor">
      <summary>
            Gets or sets the UITypeEditor to use. If you have specified a validator the TypeDescriptor.GetEditor method is used based on the Validator.ValueType.
            </summary>
    </member>
    <member name="T:DevAge.Windows.Forms.Utilities">
      <summary>
            Summary description for Utilities.
            </summary>
    </member>
    <member name="T:DevAge.Collections.ListByType`1">
      <summary>
            A collection of object with a special method that returns an object compatible with a specified Type, GetByType(Type).
            </summary>
    </member>
    <member name="M:DevAge.Collections.ListByType`1.GetByType(System.Type)">
      <summary>
            Returns an object of the list that is compatible from the specified type. 
            The Type is compared using the IsAssignableFrom method. If there isn't a compatible object returns null.
            </summary>
      <param name="searchType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.ComponentModel.ComponentLight">
      <summary>
            A IComponent implementation, used as a base class for component derived class. It is similar to the System Component class but doesn't derive from MarshalByRef class, for this reason it is faster and consume less resources.
            Can be serialized.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.ComponentLight.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.ComponentLight.#ctor(DevAge.ComponentModel.ComponentLight)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="T:DevAge.ComponentModel.Converter.NumberTypeConverter">
      <summary>
            A TypeConverter that support string conversion from and to string with a custom format number.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Converter.CurrencyTypeConverter">
      <summary>
            A TypeConverter that support string conversion from and to string with the currency symbol.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Converter.DateTimeTypeConverter">
      <summary>
            Summary description for DateTimeTypeConverter.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.DateTimeStyles">
      <summary>
            DateTimeStyle for Parse operations. DefaultValue: AllowInnerWhite|AllowLeadingWhite|AllowTrailingWhite|AllowWhiteSpaces
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.Format">
      <summary>
            Format of the Date. Example: G, g, d, D. Default value : G
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.ParseFormats">
      <summary>
            Formats to check when parse the string. If null call with no format the parse method. Default value: null
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Converter.PercentTypeConverter">
      <summary>
            A TypeConverter that support string conversion from and to string with the percent symbol.
            Support Conversion for Float, Double and Decimal
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Converter.PercentTypeConverter.ConsiderAllStringAsPercent">
      <summary>
            If true and the user insert a string with no percent symbel the value is divided by 100, otherwise not.
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Converter.RichTextTypeConverter">
      <summary>
            A TypeConverter that support rich text conversion from and to string.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            String and RichText can be converted from
            </summary>
      <param name="context">
      </param>
      <param name="sourceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            String and RichText can be converted to
            </summary>
      <param name="context">
      </param>
      <param name="destinationType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Convert String to RichText
            </summary>
      <param name="context">
      </param>
      <param name="culture">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Convert RichText to String
            </summary>
      <param name="context">
      </param>
      <param name="culture">
      </param>
      <param name="value">
      </param>
      <param name="destinationType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Check if rich text string is valid
            </summary>
      <param name="context">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.ComponentModel.EmptyTypeDescriptorContext">
      <summary>
            Class used to implement an empty ITypeDescriptorContext.
            This class seems to be required by the mono framework, ms framework accept null as ITypeDescriptorContext
            </summary>
    </member>
    <member name="F:DevAge.ComponentModel.EmptyTypeDescriptorContext.Empty">
      <summary>
            Empty ITypeDescriptorContext instance. For now I use null because mono seems to don't like this class (and throw anyway an exception)
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.ConvertingObjectEventArgs.DestinationType">
      <summary>
            Destination type to convert the Value. Can be null if no destination type is required.
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Validator.IValidator">
      <summary>
            An interface to support value conversion and validation. 
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsNullString(System.String)">
      <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
      <param name="p_str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.ObjectToValue(System.Object)">
      <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
      <param name="p_Object">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToObject(System.Object,System.Type)">
      <summary>
            Convert a value valid for the current validator ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
      <param name="p_Value">
      </param>
      <param name="p_ReturnObjectType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToString(System.Object)">
      <summary>
            Convert a value valid for the current validator ValueType to a string that can be used for other conversions, for example StringToValue method.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.StringToValue(System.String)">
      <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
      <param name="p_str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsStringConversionSupported">
      <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToDisplayString(System.Object)">
      <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidValue(System.Object)">
      <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object)">
      <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
      <param name="p_Object">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object,System.Object@)">
      <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
      <param name="p_Object">
      </param>
      <param name="p_ValueConverted">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String)">
      <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
      <param name="p_strValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String,System.Object@)">
      <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. An returns the object converted.
            </summary>
      <param name="p_strValue">
      </param>
      <param name="p_ValueConverted">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.IsInStandardValues(System.Object)">
      <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValueAtIndex(System.Int32)">
      <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
      <param name="p_Index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValuesIndexOf(System.Object)">
      <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
      <param name="p_StandardValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowNull">
      <summary>
            True to allow null object value or NullString string Value
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.NullString">
      <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.NullDisplayString">
      <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToDisplayString
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowStringConversion">
      <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.MinimumValue">
      <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.MaximumValue">
      <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.ValueType">
      <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.DefaultValue">
      <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValues">
      <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValuesExclusive">
      <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.IValidator.CultureInfo">
      <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingObjectToValue">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToObject">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToDisplayString">
      <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.IValidator.Changed">
      <summary>
            Fired when one of the properties of the Validator change.
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Validator.ValidatorBase">
      <summary>
            A base class to support value conversion and validation. This class is used if no conversion is required or as a base class for specialized validator.
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
    </member>
    <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingObjectToValue">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToObject">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToDisplayString">
      <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor">
      <summary>
            Constructor. Initialize the class using a null type.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor(System.Type)">
      <summary>
            Constructor.
            </summary>
      <param name="type">The type used to validate the values. If null no validation is made.</param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsNullString(System.String)">
      <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
      <param name="p_str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToStringForError(System.Object)">
      <summary>
            Returns a string used for error description for a specified object. Usually used when printing the object for the error message when there is a conversion error.
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToValue(System.Object)">
      <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
      <param name="p_Object">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToObject(System.Object,System.Type)">
      <summary>
            Convert a value according to the current ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
      <param name="p_Value">
      </param>
      <param name="p_ReturnObjectType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToString(System.Object)">
      <summary>
            Converts a value object to a string representation
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StringToValue(System.String)">
      <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
      <param name="p_str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsStringConversionSupported">
      <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToDisplayString(System.Object)">
      <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToDisplayString(DevAge.ComponentModel.ConvertingObjectEventArgs)">
      <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidValue(System.Object)">
      <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object)">
      <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
      <param name="p_Object">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object,System.Object@)">
      <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
      <param name="p_Object">
      </param>
      <param name="p_ValueConverted">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String)">
      <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
      <param name="p_strValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String,System.Object@)">
      <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. Returns as out parameter the object converted.
            </summary>
      <param name="p_strValue">
      </param>
      <param name="p_ValueConverted">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsInStandardValues(System.Object)">
      <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValueAtIndex(System.Int32)">
      <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
      <param name="p_Index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesIndexOf(System.Object)">
      <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
      <param name="p_StandardValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnChanged(System.EventArgs)">
      <summary>
            Fired when one of the properties of the Validator change.
            Call the Changed event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowNull">
      <summary>
            True to allow null object value or NullString string Value
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullString">
      <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullDisplayString">
      <summary>
            Null string representation. Default is empty string.
            Used by ValueToDisplayString
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowStringConversion">
      <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MinimumValue">
      <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MaximumValue">
      <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueType">
      <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueTypeName">
      <summary>
            Set the ValueType property using a string value, usually used by designer code generation.
            The designer for this type is configured to use only this property.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.DefaultValue">
      <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValues">
      <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesExclusive">
      <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.CultureInfo">
      <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingObjectToValue">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToObject">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToDisplayString">
      <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
    </member>
    <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.Changed">
      <summary>
            Fired when one of the properties of the Validator change.
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Validator.ValidatorTypeConverter">
      <summary>
            A string editor that use a TypeConverter for conversion.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor">
      <summary>
            Constructor. Initialize the Validator with a null TypeConverter.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type)">
      <summary>
            Constructor. If the Type doesn't implements a TypeConverter no conversion is made.
            </summary>
      <param name="p_Type">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type,System.ComponentModel.TypeConverter)">
      <summary>
            Constructor
            </summary>
      <param name="p_Type">Cannot be null.</param>
      <param name="p_TypeConverter">Can be null to don't allow any conversion.</param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.IsStringConversionSupported">
      <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
      <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValidatorTypeConverter.TypeConverter">
      <summary>
            TypeConverter used for this type editor, cannot be null.
            </summary>
    </member>
    <member name="T:DevAge.ComponentModel.Validator.ValueMapping">
      <summary>
            The ValueMapping class can be used to easily map a value to a string value or a display string for conversion
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor(DevAge.ComponentModel.Validator.IValidator,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Type)">
      <summary>
            Constructor
            </summary>
      <param name="validator">
      </param>
      <param name="valueList">A list of valid value. If null an error occurred. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
      <param name="displayStringList">A list of displayString. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
      <param name="specialList">A list of object that can be converted to value. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
      <param name="specialType">The type of object stored in the specialList collection.</param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValueMapping.BindValidator(DevAge.ComponentModel.Validator.IValidator)">
      <summary>
            Bind the specified validator
            </summary>
      <param name="p_Validator">
      </param>
    </member>
    <member name="M:DevAge.ComponentModel.Validator.ValueMapping.UnBindValidator(DevAge.ComponentModel.Validator.IValidator)">
      <summary>
            Unbind the specified validator
            </summary>
      <param name="p_Validator">
      </param>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ValueList">
      <summary>
            A list of valid value. If null an error occurred. The index must match the index of ValueList and DisplayStringList
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialList">
      <summary>
            A list of object that can be converted to value. Can be null. The index must match the index of ValueList and DisplayStringList. Must be a list of object of the type specified in the SpecialType property.
            Usually this property can be used when performing special conversion of specific type. For example if you want to map an enum value or an id value to a string for a better user experience.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialType">
      <summary>
            Gets or sets the type used for converting an object to a value and a value to an object when populating the SpecialList property. Default is System.String.
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValueMapping.DisplayStringList">
      <summary>
            A list of displayString. Can be null. The index must match the index of ValueList and DisplayStringList
            </summary>
    </member>
    <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ThrowErrorIfNotFound">
      <summary>
            Gets or sets, if throw an error when the value if not found in one of the collections.
            Default true.
            </summary>
    </member>
    <member name="T:DevAge.Configuration.CommandLineArgs">
      <summary>
            Description r廥um嶪 de Arguments.
            </summary>
    </member>
    <member name="T:DevAge.DevAgeApplicationException">
      <summary>
            Generic DevAge Exception
            </summary>
    </member>
    <member name="M:DevAge.DevAgeApplicationException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="p_strErrDescription">
      </param>
    </member>
    <member name="M:DevAge.DevAgeApplicationException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="p_strErrDescription">
      </param>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="M:DevAge.DevAgeApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor
            </summary>
      <param name="p_Info">
      </param>
      <param name="p_StreamingContext">
      </param>
    </member>
    <member name="T:DevAge.Configuration.PersistableItemDictionary">
      <summary>
            A dictionary with keys of type String and values of type PersistableItem
            </summary>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.#ctor">
      <summary>
            Initializes a new empty instance of the PersistableItemDictionary class
            </summary>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.Add(System.String,DevAge.Configuration.PersistableItem)">
      <summary>
            Adds an element with the specified key and value to this PersistableItemDictionary.
            </summary>
      <param name="key">
            The String key of the element to add.
            </param>
      <param name="value">
            The PersistableItem value of the element to add.
            </param>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.Contains(System.String)">
      <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
      <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
      <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
      <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
      <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsValue(DevAge.Configuration.PersistableItem)">
      <summary>
            Determines whether this PersistableItemDictionary contains a specific value.
            </summary>
      <param name="value">
            The PersistableItem value to locate in this PersistableItemDictionary.
            </param>
      <returns>
            true if this PersistableItemDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Configuration.PersistableItemDictionary.Remove(System.String)">
      <summary>
            Removes the element with the specified key from this PersistableItemDictionary.
            </summary>
      <param name="key">
            The String key of the element to remove.
            </param>
    </member>
    <member name="P:DevAge.Configuration.PersistableItemDictionary.Item(System.String)">
      <summary>
            Gets or sets the PersistableItem associated with the given String
            </summary>
      <param name="key">
            The String whose value to get or set.
            </param>
    </member>
    <member name="P:DevAge.Configuration.PersistableItemDictionary.Keys">
      <summary>
            Gets a collection containing the keys in this PersistableItemDictionary.
            </summary>
    </member>
    <member name="P:DevAge.Configuration.PersistableItemDictionary.Values">
      <summary>
            Gets a collection containing the values in this PersistableItemDictionary.
            </summary>
    </member>
    <member name="T:DevAge.Configuration.PersistableSettings">
      <summary>
            Summary description for PersistableSettings.
            </summary>
    </member>
    <member name="M:DevAge.Configuration.PersistableSettings.ReadFromOther(DevAge.Configuration.PersistableSettings)">
      <summary>
            Clone all fields using the ValueToString and StringToValue methods
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="T:DevAge.Data.DataSetHelper">
      <summary>
            Utilities for DataSet class. Contains some methods to create expression string, for Select and Epression methods and methods for selecting data like SelectDistinct.
            </summary>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.DateTime)">
      <summary>
            Create a string with this format: #MM/dd/yyyy# . This is the default format for DataSet expressions. Can be used for example with the DataTable.Select method.
            </summary>
      <param name="p_Date">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Int32)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Int64)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Single)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Double)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Decimal)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Boolean)">
      <summary>
            Create a string with an InvariantCulture format.
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.String)">
      <summary>
            Replace any special sql character (like single quote) and replace it with the valid sql equivalent. Then add the appropriate quote if the type require (string).
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Char)">
      <summary>
            Replace any special sql character (like single quote) and replace it with the valid sql equivalent. Then add the appropriate quote if the type require (string).
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.DBNull)">
      <summary>
            Return NULL
            </summary>
      <param name="p_data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Object)">
      <summary>
            Format the specified value in a string that can be used inside an expression.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.LikeExpression(System.String,System.String)">
      <summary>
            Create a like expression for string values, automatically calls FormatValueForExpression
            </summary>
      <param name="pFieldName">
      </param>
      <param name="pFieldValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.StartWithExpression(System.String,System.String)">
      <summary>
            Create a start with expression for stirng value, automatically calls FormatValueForExpression
            </summary>
      <param name="pFieldName">
      </param>
      <param name="pFieldValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.EqualExpression(System.String,System.Object)">
      <summary>
            Create an equal expression, automatically calls FormatValueForExpression
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.NotEqualExpression(System.String,System.Object)">
      <summary>
            Create a Not equal expression, automatically calls FormatValueForExpression
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.ValEquals(System.Object,System.Object)">
      <summary>
            Compares two values to see if they are equal. Also compares DBNULL.Value.
            Note: If your DataTable contains object fields, then you must extend this
            function to handle them in a meaningful way if you intend to group on them.
            </summary>
      <param name="A">
      </param>
      <param name="B">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.Eval(System.String,System.Object[])">
      <summary>
            Evaluate the given expression using the Compute method of a empty DataTable. Replace the parameters using the string.Format method ({0} syntax)
            </summary>
      <param name="expression">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Data.DataSetHelper.EvalRowExpression(System.Data.DataRow,System.String)">
      <summary>
            Evaluate the given expression using the Compute method of an empty DataTable replacing the values of the specified Row.
            </summary>
      <param name="row">
      </param>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Data.FileDataSet">
      <summary>
            Summary description for Manager.
            </summary>
    </member>
    <member name="P:DevAge.Data.FileDataSet.SaveDataFormat">
      <summary>
            Gets or Sets the format used to save the DataSet
            </summary>
    </member>
    <member name="P:DevAge.Data.FileDataSet.FileDataFormat">
      <summary>
            Gets the current format of the File where the data are loaded.
            </summary>
    </member>
    <member name="P:DevAge.Data.FileDataSet.MergeReadedSchema">
      <summary>
            Gets or Sets if merge the schema of the file with the schema of the DataSet specified. Use true if the DataSet doesn't have a schema definition. Default is false.
            </summary>
    </member>
    <member name="T:DevAge.Data.SqlClient.SqlCommandBuilder">
      <summary>
            This class is similar to the System.Data.SqlClient.SqlCommandBuilder, but use only the DataTable to create the required commands.
            Don't support identity (autoincrement) column and only the base data type. This class don't use the data source to explore the data but only the DataTable informations.
            So you must populate the PrimaryKeys of the DataSet. I suggest to use GUID column (uniqueidentifier) to replace the identity column.
            Remember to set the Connection of the generated command.
            </summary>
    </member>
    <member name="M:DevAge.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.DataTable)">
      <summary>
            Constructor
            </summary>
      <param name="dataTable">table used to create commands</param>
    </member>
    <member name="P:DevAge.Data.SqlClient.SqlCommandBuilder.DataTable">
      <summary>
            Table used to create commands
            </summary>
    </member>
    <member name="T:DevAge.Data.StreamDataSet">
      <summary>
            A static class used to serialize a DataSet to and from a stream using a binary or xml format.
            The xml format use the standard DataSet xml serialization, the binary format use a custom format.
            </summary>
    </member>
    <member name="M:DevAge.Data.StreamDataSet.Write(System.IO.Stream,System.Data.DataSet,DevAge.Data.StreamDataSetFormat)">
      <summary>
            Write the dataset to the stream using the specified format.
            </summary>
      <param name="destination">
      </param>
      <param name="source">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:DevAge.Data.StreamDataSet.Read(System.IO.Stream,System.Data.DataSet,DevAge.Data.StreamDataSetFormat,System.Boolean)">
      <summary>
            Read from the stream and populate the dataset using the specified format.
            </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
      <param name="format">
      </param>
      <param name="mergeSchema">True to merge the schema, otherwise it is used the schema of the dataset</param>
    </member>
    <member name="T:DevAge.Data.StreamDataSetFormat">
      <summary>
            Enum to control the serialization format
            </summary>
    </member>
    <member name="F:DevAge.Data.StreamDataSetFormat.XML">
      <summary>
            Standard xml format used by the ReadXml and WriteXml of the DataSet 
            </summary>
    </member>
    <member name="F:DevAge.Data.StreamDataSetFormat.Binary">
      <summary>
            Custom binary format. More compact of the xml but not human readable
            </summary>
    </member>
    <member name="T:DevAge.Data.BinaryDataSetInvalidException">
      <summary>
            Binary data not valid exception
            </summary>
    </member>
    <member name="M:DevAge.Data.BinaryDataSetInvalidException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.Data.BinaryDataSetInvalidException.#ctor(System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="T:DevAge.Data.BinaryDataSetVersionException">
      <summary>
            Version not valid exception
            </summary>
    </member>
    <member name="M:DevAge.Data.BinaryDataSetVersionException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.Data.BinaryDataSetVersionException.#ctor(System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="T:DevAge.DateTimeHelper">
      <summary>
            Summary description for DateTimeHelper.
            </summary>
    </member>
    <member name="M:DevAge.DateTimeHelper.YearsDifference(System.DateTime,System.DateTime)">
      <summary>
            Calculate the difference in years of 2 dates. Usually used for age calculations. dateA - dateB
            </summary>
      <param name="dateA">
      </param>
      <param name="dateB">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.DateTimeHelper.MonthsDifference(System.DateTime,System.DateTime)">
      <summary>
            Calculate the difference in months of 2 dates. dateA - dateB
            </summary>
      <param name="dateA">
      </param>
      <param name="dateB">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.TypeNotSupportedException">
      <summary>
            The type specified it is not supported in the current contest
            </summary>
    </member>
    <member name="M:DevAge.TypeNotSupportedException.#ctor(System.Type)">
      <summary>
            Constructor
            </summary>
      <param name="pType">
      </param>
    </member>
    <member name="M:DevAge.TypeNotSupportedException.#ctor(System.Type,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="pType">
      </param>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="T:DevAge.UnrecognizedCommandLineParametersException">
      <summary>
            Command line not valid exception
            </summary>
    </member>
    <member name="M:DevAge.UnrecognizedCommandLineParametersException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="parameter">
      </param>
    </member>
    <member name="M:DevAge.UnrecognizedCommandLineParametersException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="parameter">
      </param>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="T:DevAge.ConversionErrorException">
      <summary>
            Conversion exception
            </summary>
    </member>
    <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="destinationType">
      </param>
      <param name="value">
      </param>
      <param name="extendedMessage">
      </param>
    </member>
    <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="destinationType">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="destinationType">
      </param>
      <param name="value">
      </param>
      <param name="p_InnerException">
      </param>
    </member>
    <member name="T:DevAge.ExceptionEventArgs">
      <summary>
            Common EventArgs class used to store and raise events with an Exception associated
            </summary>
    </member>
    <member name="M:DevAge.ExceptionEventArgs.#ctor(System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="ex">
      </param>
    </member>
    <member name="P:DevAge.ExceptionEventArgs.Exception">
      <summary>
            Exception
            </summary>
    </member>
    <member name="T:DevAge.ExceptionEventHandler">
      <summary>
            Common EventHandler class used to raise events with an Exception associated
            </summary>
    </member>
    <member name="T:DevAge.IO.StreamPersistence">
      <summary>
            A static class to help save and read stream data
            </summary>
    </member>
    <member name="T:DevAge.Patterns.IActivity">
      <summary>
            An interface to represents a basic activity.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.IActivity.Start(DevAge.Patterns.IActivityEvents)">
      <summary>
            Start the activity and all sub activities.
            </summary>
      <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
    </member>
    <member name="M:DevAge.Patterns.IActivity.Cancel">
      <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.SubActivities">
      <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.Status">
      <summary>
            Activity status
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.Name">
      <summary>
            Name of the activity used to describe the class.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.WaitHandle">
      <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.Exception">
      <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.Parent">
      <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.IActivity.FullName">
      <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
    </member>
    <member name="F:DevAge.Patterns.SubActivityWaitMode.DoNotWait">
      <summary>
            Don't wait the sub activities to finish (parallel processing, asyncronous)
            </summary>
    </member>
    <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitOnEach">
      <summary>
            Wait for each sub activities (syncronous)
            </summary>
    </member>
    <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitAtTheEnd">
      <summary>
            Wait all the sub activities at the end (parallel processing but syncronized with the parent)
            </summary>
    </member>
    <member name="T:DevAge.Patterns.ActivityBase">
      <summary>
            Base activity class. Override the OnWork method to customize the activity.
            </summary>
    </member>
    <member name="F:DevAge.Patterns.ActivityBase.mActivityCount">
      <summary>
            An activity count used only to generate a seguential name
            </summary>
    </member>
    <member name="F:DevAge.Patterns.ActivityBase.mWaitHandle">
      <summary>
            Initially set to signaled=true=completed, nonsignaled=false=notcompleted,
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.ResetRunningStatus">
      <summary>
            Reset the status property to the original values. If the activity is still running an exception is throw.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.OnWork">
      <summary>
            Working method. Abstract. Override this method to provide a specific work for the activity.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.DoWork">
      <summary>
            Internal work method. Call the OnWork method and Start the SubActivities.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.WaitActivities(DevAge.Patterns.ActivityCollection,System.Int32)">
      <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
      <param name="activities">
      </param>
      <param name="timeout">
      </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.WaitActivity(DevAge.Patterns.IActivity,System.Int32)">
      <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
      <param name="activity">
      </param>
      <param name="timeout">
      </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.CheckActivitiesException(DevAge.Patterns.ActivityCollection)">
      <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
      <param name="activities">
      </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.CheckActivityException(DevAge.Patterns.IActivity)">
      <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
      <param name="activity">
      </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.StartActivity">
      <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnWork method to implement the specific activity work.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.Start(DevAge.Patterns.IActivityEvents)">
      <summary>
            Start the activity. If the activity is already running an exception is throw.
            To override the common working code use the OnWork abstract method.
            </summary>
      <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
    </member>
    <member name="M:DevAge.Patterns.ActivityBase.Cancel">
      <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.SubActivitiesTimeOut">
      <summary>
            Gets or sets the time to wait for the sub activities. If the operation is still executing then a TimeOutException is fired. Default is System.Threading.Timeout.Infinite. Default is true.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.PropagateException">
      <summary>
            Gets or sets if propagate an exception from sub activities to the current activities. Default is true.
            Only valid SubActivitiesTimeOut is WaitOnEach or WaitAtTheEnd
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.SubActivityWaitMode">
      <summary>
            Gets or sets how the current activity wait the completition of the sub activities.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.SubActivities">
      <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.Status">
      <summary>
            Activity status
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.Name">
      <summary>
            Name of the activity used to describe the class.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.WaitHandle">
      <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.Exception">
      <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.Parent">
      <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
    </member>
    <member name="P:DevAge.Patterns.ActivityBase.FullName">
      <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
    </member>
    <member name="T:DevAge.Patterns.Activity">
      <summary>
            An activity used as a container for other activities using a syncronized code.
            </summary>
    </member>
    <member name="T:DevAge.Patterns.AsyncActivityBase">
      <summary>
            Base activity class. Override the OnBeginWork and OnEndWork method to customize the activity.
            This class support an asyncronous activity.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.AsyncActivityBase.OnBeginWork(System.AsyncCallback)">
      <summary>
            Begind working method. Called to start the asyncronous activity. Abstract.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.AsyncActivityBase.OnEndWork(System.IAsyncResult)">
      <summary>
            End working method. Called when the asyncronous operation is finished
            </summary>
      <param name="asyncResult">AsyncResult</param>
    </member>
    <member name="M:DevAge.Patterns.AsyncActivityBase.OnWork">
      <summary>
            Working method.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.AsyncActivityBase.StartActivity">
      <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnBeginWork method to implement the specific activity work.
            </summary>
    </member>
    <member name="T:DevAge.Patterns.AsynchronousActivity">
      <summary>
            An activity used as a container for other activities using an asynchronous code.
            Override the OnAsyncWork method for custom asynchronous work.
            </summary>
    </member>
    <member name="T:DevAge.Patterns.ActivityCollection">
      <summary>
            A collection of elements of type Activity
            </summary>
    </member>
    <member name="T:DevAge.Patterns.ActivityCollection.Enumerator">
      <summary>
            Type-specific enumeration class, used by ActivityCollection.GetEnumerator.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.#ctor(DevAge.Patterns.IActivity)">
      <summary>
            Initializes a new empty instance of the ActivityCollection class.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.Contains(DevAge.Patterns.IActivity)">
      <summary>
            Determines whether a specfic IActivity value is in this ActivityCollection.
            </summary>
      <param name="value">
            The IActivity value to locate in this ActivityCollection.
            </param>
      <returns>
            true if value is found in this ActivityCollection;
            false otherwise.
            </returns>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.IndexOf(DevAge.Patterns.IActivity)">
      <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ActivityCollection
            </summary>
      <param name="value">
            The IActivity value to locate in the ActivityCollection.
            </param>
      <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.Add(DevAge.Patterns.IActivity)">
      <summary>
            Adds an instance of type IActivity to the end of this ActivityCollection.
            </summary>
      <param name="value">
            The IActivity to be added to the end of this ActivityCollection.
            </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.Insert(System.Int32,DevAge.Patterns.IActivity)">
      <summary>
            Inserts an element into the ActivityCollection at the specified index
            </summary>
      <param name="index">
            The index at which the IActivity is to be inserted.
            </param>
      <param name="value">
            The IActivity to insert.
            </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.Remove(DevAge.Patterns.IActivity)">
      <summary>
            Removes the first occurrence of a specific IActivity from this ActivityCollection.
            </summary>
      <param name="value">
            The IActivity value to remove from this ActivityCollection.
            </param>
    </member>
    <member name="M:DevAge.Patterns.ActivityCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the elements of this ActivityCollection.
            </summary>
      <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>
    </member>
    <member name="P:DevAge.Patterns.ActivityCollection.Item(System.Int32)">
      <summary>
            Gets or sets the IActivity at the given index in this ActivityCollection.
            </summary>
    </member>
    <member name="T:DevAge.Patterns.IActivityEvents">
      <summary>
            Interface to receive the callback for the activity events.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.IActivityEvents.ActivityStarted(DevAge.Patterns.IActivity)">
      <summary>
            Fired when the activity is started
            </summary>
      <param name="sender">Activity that have sended the event</param>
    </member>
    <member name="M:DevAge.Patterns.IActivityEvents.ActivityCompleted(DevAge.Patterns.IActivity)">
      <summary>
            Fired when the activity is completed
            </summary>
      <param name="sender">Activity that have sended the event</param>
    </member>
    <member name="M:DevAge.Patterns.IActivityEvents.ActivityException(DevAge.Patterns.IActivity,System.Exception)">
      <summary>
            Fired when the activity or one of its children throws an exception
            </summary>
      <param name="sender">Activity that have sended the event</param>
      <param name="exception">
      </param>
    </member>
    <member name="T:DevAge.Patterns.IAsyncActivity">
      <summary>
            Interface for asyncronuos activity. Extend the IActivity interface
            </summary>
    </member>
    <member name="T:DevAge.Patterns.ActivityCanceledException">
      <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityCanceledException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:DevAge.Patterns.ActivityStatusNotValidException">
      <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.ActivityStatusNotValidException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:DevAge.Patterns.TimeOutActivityException">
      <summary>
            Exception fired when a time out is encountered.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.TimeOutActivityException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:DevAge.Patterns.SubActivityException">
      <summary>
            Exception fired when a time out is encountered.
            </summary>
    </member>
    <member name="M:DevAge.Patterns.SubActivityException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="activityName">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="T:DevAge.Runtime.Serialization.Utilities">
      <summary>
            Static Class for serialization utilities
            </summary>
    </member>
    <member name="M:DevAge.Runtime.Serialization.Utilities.BinDeserialize(System.IO.Stream)">
      <summary>
            Deserialize the stream. Using BinaryFormatter.
            </summary>
      <param name="p_Stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Runtime.Serialization.Utilities.BinSerialize(System.IO.Stream,System.Object)">
      <summary>
            Serialize the stream. Using BinaryFormatter.
            </summary>
      <param name="p_Stream">
      </param>
      <param name="p_Object">
      </param>
    </member>
    <member name="M:DevAge.Runtime.Serialization.Utilities.BinDeserialize(System.String)">
      <summary>
            Deserialize the specified file. Using BinaryFormatter.
            </summary>
      <param name="p_strFileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Runtime.Serialization.Utilities.BinSerialize(System.String,System.Object)">
      <summary>
            Serialize the object to the specified file. Using BinaryFormatter.
            </summary>
      <param name="p_strFileName">
      </param>
      <param name="p_Object">
      </param>
    </member>
    <member name="T:DevAge.Security.Cryptography.Utilities">
      <summary>
            Utilities
            </summary>
    </member>
    <member name="T:DevAge.Security.Cryptography.Utilities.DES">
      <summary>
            Crypt and encrypt methods using DES
            </summary>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.DES.EncryptString(System.String,System.String)">
      <summary>
            Encrypt the specified string using DES
            </summary>
      <param name="p_strInput">String to encrypt</param>
      <param name="p_Key8chars">Must be of 8 characters length</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.DES.DecryptString(System.String,System.String)">
      <summary>
            Decrypt the specified string using DES
            </summary>
      <param name="p_strInput">String to decrypt</param>
      <param name="p_Key8chars">Must be of 8 characters length</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.DES.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
      <summary>
            Encrypt the specified stream using DES
            </summary>
      <param name="p_StreamInput">
      </param>
      <param name="p_StreamOutput">
      </param>
      <param name="p_Key8chars">Must be of 8 characters length</param>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.DES.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
      <summary>
            Decrypt the specified stream using DES
            </summary>
      <param name="p_StreamInput">
      </param>
      <param name="p_StreamOutput">
      </param>
      <param name="p_Key8chars">Must be of 8 characters length</param>
    </member>
    <member name="T:DevAge.Security.Cryptography.Utilities.SHA1">
      <summary>
            Password utilities using SH1 alghoritm
            </summary>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.SHA1.HashPassword(System.String)">
      <summary>
            Hash the string p_Password using SH1 alghoritm (SHA1CryptoServiceProvider). 
            </summary>
      <param name="p_Password">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Security.Cryptography.Utilities.XmlDigitalSign">
      <summary>
            An utility class with some method to signing and verify xml documents
            </summary>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.GenerateKeys(System.String@,System.String@)">
      <summary>
            Generate the keys (public and private)
            </summary>
      <param name="keyPubPri">Public and private key</param>
      <param name="keyPub">Public key</param>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateSignature(System.Xml.XmlDocument,System.String)">
      <summary>
            Create a signature xml element for the specified xml document and private key
            </summary>
      <param name="xmlToSign">
      </param>
      <param name="keyPubPri">Private+public key</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateSignedDoc(System.Xml.XmlDocument,System.String)">
      <summary>
            Create a signed xml document. Add a signature alement to the specified document using the specified private key.
            </summary>
      <param name="xmlToSign">
      </param>
      <param name="keyPubPri">Private+public key</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CheckSignature(System.Xml.XmlDocument,System.String)">
      <summary>
            Check the signature of the specified signed document (created with CreateSignedDoc) using the specified public key.
            </summary>
      <param name="signedDoc">
      </param>
      <param name="keyPub">Public key</param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.GetSignatureFromSignedDoc(System.Xml.XmlDocument)">
      <summary>
            Extract the signature element from the specified signed document.
            </summary>
      <param name="signedDoc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateDocWithoutSignature(System.Xml.XmlDocument)">
      <summary>
            Create a new XmlDocument from the specified signed document removing the signature element.
            </summary>
      <param name="signedDoc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Shell.MailToProtocol.FormatMailToCommand(System.String[],System.String[],System.String[],System.String,System.String)">
      <summary>
      </summary>
      <param name="p_To">null if not used</param>
      <param name="p_Cc">null if not used</param>
      <param name="p_Bcc">null if not used</param>
      <param name="p_Subject">null if not used</param>
      <param name="p_Body">null if not used</param>
      <returns>
      </returns>
    </member>
    <member name="T:DevAge.Shell.Utilities">
      <summary>
            Shell utilities
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.FieldAttribute">
      <summary>
            Required attribute to specify the field position and length
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="fieldIndex">Index of the field, 0 based. Each field must have a unique progressive index</param>
      <param name="length">Lenght of the field when readed and writed to the string.</param>
    </member>
    <member name="T:DevAge.Text.FixedLength.ParseFormatAttribute">
      <summary>
            Attribute used to specify additional parse options
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.ParseFormatAttribute.#ctor">
      <summary>
            Constructor. Use one of these properties to customize the format: CultureInfo, DateTimeFormat, NumberFormat, TrimBeforeParse.
            Default is Invariant culture format.
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.ValueMappingAttribute">
      <summary>
            Attribute used to convert a specific value to another value
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.ValueMappingAttribute.#ctor(System.String,System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="stringValue">String value</param>
      <param name="fieldValue">Field typed value</param>
    </member>
    <member name="T:DevAge.Text.FixedLength.StandardValueAttribute">
      <summary>
            Attribute used to specify the standard value (mandatory value) for a specific field.
            You can use this attribute for example when you want a particular field to only accept one or more standard values.
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.StandardValueAttribute.#ctor(System.Object)">
      <summary>
            Construcotr
            </summary>
      <param name="standardValue">Required value</param>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldStringConvertException.ObjectToStringForError(System.Object)">
      <summary>
            Returns a string used for error description for a specified object. Usually used when printing the object for the error message when there is a conversion error.
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="T:DevAge.Text.FixedLength.IField">
      <summary>
            Interface for defining a Field in the FixedLength string
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.IField.ValueToString(System.Object)">
      <summary>
            Convert the specified value to a string value valid for this field
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Text.FixedLength.IField.StringToValue(System.String)">
      <summary>
            Convert the specified string value to a value based on the field format.
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:DevAge.Text.FixedLength.IField.Index">
      <summary>
            Index of the field. 0 based.
            </summary>
    </member>
    <member name="P:DevAge.Text.FixedLength.IField.Name">
      <summary>
            Name of the field, used for retriving the field by its name.
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.Field">
      <summary>
            Class for define a field, implements IField interface.
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.FieldList">
      <summary>
            A dictionary with keys of type string and values of type IField
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.#ctor">
      <summary>
            Initializes a new empty instance of the FieldList class
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.Add(DevAge.Text.FixedLength.IField)">
      <summary>
            Adds an element with the specified key and value to this FieldList.
            </summary>
      <param name="value">
            The IField value of the element to add.
            </param>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.Contains(System.String)">
      <summary>
            Determines whether this FieldList contains a specific key.
            </summary>
      <param name="fieldName">
            The string key to locate in this FieldList.
            </param>
      <returns>
            true if this FieldList contains an element with the specified key;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.ContainsKey(System.String)">
      <summary>
            Determines whether this FieldList contains a specific key.
            </summary>
      <returns>
            true if this FieldList contains an element with the specified key;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.ContainsValue(DevAge.Text.FixedLength.IField)">
      <summary>
            Determines whether this FieldList contains a specific value.
            </summary>
      <param name="value">
            The IField value to locate in this FieldList.
            </param>
      <returns>
            true if this FieldList contains an element with the specified value;
            otherwise, false.
            </returns>
    </member>
    <member name="M:DevAge.Text.FixedLength.FieldList.Remove(System.String)">
      <summary>
            Removes the element with the specified key from this FieldList.
            </summary>
      <param name="fieldName">
            The string key of the element to remove.
            </param>
    </member>
    <member name="P:DevAge.Text.FixedLength.FieldList.Item(System.String)">
      <summary>
            Gets or sets the IField associated with the given string
            </summary>
      <param name="key">
            The string whose value to get or set.
            </param>
    </member>
    <member name="P:DevAge.Text.FixedLength.FieldList.Keys">
      <summary>
            Gets a collection containing the keys in this FieldList.
            </summary>
    </member>
    <member name="P:DevAge.Text.FixedLength.FieldList.Values">
      <summary>
            Gets a collection containing the values in this FieldList.
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.LineParser">
      <summary>
            A class for parsing fixed length string and loading the fields into a class.
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.#ctor">
      <summary>
            Constructor. Fill the Fields list fot specify the columns.
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.#ctor(System.Type)">
      <summary>
            Load the parser fields with the properties specified in the type. You must use the FieldAttribute and ParseFormatAttribute to specify additional informations like the field length.
            </summary>
      <param name="lineClassType">
      </param>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.Reset">
      <summary>
            Reset the parser
            </summary>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.LoadLine(System.String)">
      <summary>
            Load the specified line in the parser.
            </summary>
      <param name="line">
      </param>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.GetValue(System.String)">
      <summary>
            Get a specified field value.
            </summary>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:DevAge.Text.FixedLength.LineParser.FillLineClass(System.Object)">
      <summary>
            Fill the properties of the specified class with the values of the line has defined by the Fields collection.
            </summary>
      <param name="schemaClass">
      </param>
      <returns>Returns the same class specified in the schemaClass parameter, this is useful if you have struct or value types.</returns>
    </member>
    <member name="P:DevAge.Text.FixedLength.LineParser.Fields">
      <summary>
            Gets a collection of fields.
            </summary>
    </member>
    <member name="T:DevAge.Text.FixedLength.LineWriter">
      <summary>
            A class used to create fixed lenght string.
            </summary>
    </member>
    <member name="T:SourceGrid.CustomScrollControl">
      <summary>
            A control with a custom implementation of a scrollable area
            </summary>
    </member>
    <member name="F:SourceGrid.CustomScrollControl.mBottomRightPanel">
      <summary>
            Panel showed on the bottom right of the grid when both scrollbars are visible
            </summary>
    </member>
    <member name="F:SourceGrid.CustomScrollControl.panelDockBottom">
      <summary>
            Internal panel that contains hScrollBar and mBottomRightPanel
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.InvalidateScrollableArea">
      <summary>
            Invalidate the scrollable area
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.PrepareScrollBars(System.Boolean,System.Boolean)">
      <summary>
            Prepare the scrollbars with the specified dock option.
            </summary>
      <param name="showHScroll">
      </param>
      <param name="showVScroll">
      </param>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.LoadScrollArea(System.Int32,System.Int32)">
      <summary>
            Load the scrollable area that will affect the maximum scroll values.
            </summary>
      <param name="verticalPage">
      </param>
      <param name="horizontalPage">
      </param>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.RecalcHScrollBar(System.Int32)">
      <summary>
            recalculate the position of the horizontal scrollbar
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.RecalcVScrollBar(System.Int32)">
      <summary>
            Recalculate the position of the vertical scrollbar
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.RecalcCustomScrollBars">
      <summary>
            Recalculate the scrollbars position and size.
            Use this to refresh scroll bars
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.GetScrollRows(System.Int32)">
      <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.GetScrollColumns(System.Int32)">
      <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
            OnLayout Method
            </summary>
      <param name="levent">
      </param>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
      <summary>
            Fired when the scroll vertical posizion change
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
      <summary>
            Fired when the scroll horizontal posizion change
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageDown">
      <summary>
            Scroll the page down
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageToLine(System.Int32)">
      <summary>
            Scroll the page down to line
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.IsMaxPage">
      <summary>
            Scroll the page down to line
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageUp">
      <summary>
            Scroll the page up
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageRight">
      <summary>
            Scroll the page right
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageLeft">
      <summary>
            Scroll the page left
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineDown">
      <summary>
            Scroll the page down one line
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineUp">
      <summary>
            Scroll the page up one line
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineRight">
      <summary>
            Scroll the page right one line
            </summary>
    </member>
    <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineLeft">
      <summary>
            Scroll the page left one line
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.AutoScroll">
      <summary>
            I disabled the default AutoScroll property because I have a custom implementation
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.VScrollBar">
      <summary>
            Gets the vertical scrollbar. Can be visible or unvisible.
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.HScrollBar">
      <summary>
            Gets the horizontal scrollbar. Can be visible or unvisible.
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.BottomRightPanel">
      <summary>
            Gets the panel at the bottom right of the control. This panel is valid only if HScrollBar and VScrollBar are valid. Otherwise is null.
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.CustomScrollPosition">
      <summary>
            Gets or sets the current scroll position relative to the CustomScrollArea.
            The value must be always between 0 and CustomScrollArea (0 or positive).
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.DisplayRectangle">
      <summary>
            Display rectangle of the control, without ScrollBars.
            Note: I don't override this method because I use some dock feature that require the real display rectangle.
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.MaximumVScroll">
      <summary>
            Return the maximum position that can be scrolled
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.MinimumVScroll">
      <summary>
            Return the minimum position that can be scrolled
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.MinimumHScroll">
      <summary>
            Return the minimum position that can be scrolled
            </summary>
    </member>
    <member name="P:SourceGrid.CustomScrollControl.MaximumHScroll">
      <summary>
            Return the maximum position that can be scrolled
            </summary>
    </member>
    <member name="E:SourceGrid.CustomScrollControl.VScrollPositionChanged">
      <summary>
            Fired when the scroll vertical posizion change
            </summary>
    </member>
    <member name="E:SourceGrid.CustomScrollControl.HScrollPositionChanged">
      <summary>
            Fired when the scroll horizontal posizion change
            </summary>
    </member>
    <member name="T:SourceGrid.GridVirtual">
      <summary>
            A abstract Grid control to support large virtual data. You must override: GetCell, CreateRowsObject, CreateColumnsObject
            </summary>
    </member>
    <member name="F:SourceGrid.GridVirtual.mDragCellPosition">
      <summary>
            Indica la cella che ha subito l'ultimo evento di DragEnter
            </summary>
    </member>
    <member name="F:SourceGrid.GridVirtual.m_MouseDownPosition">
      <summary>
            Represents the cell that receive the mouse down event
            </summary>
    </member>
    <member name="F:SourceGrid.GridVirtual.m_keybordActivePosition">
      <summary>
            Remember the active position, when the key was pressed.
            Events are called in this order:
            KeyDown
            KeyPress
            KeyUp
            
            During these three events, the same active position must be kept,
            regardless of whether it is changed in any of these events
            
            http://msdn.microsoft.com/en-us/library/system.windows.forms.control.keydown(VS.80).aspx
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.#ctor">
      <summary>
            Grid constructor
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.CreateRowsObject">
      <summary>
            Abstract method used to create the rows object.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.CreateColumnsObject">
      <summary>
            Abstract method used to create the columns object.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.AutoSizeCells(SourceGrid.Range)">
      <summary>
            Auto size the columns and the rows speified
            </summary>
      <param name="p_RangeToAutoSize">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.AutoSizeCells">
      <summary>
            Auto size all the columns and all the rows with the required width and height
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.CheckPositions">
      <summary>
            Check if the positions saved are still valid, for example if all the selected cells are still valid positions, if not the selection are removed without calling any other methods.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.PositionToRectangle(SourceGrid.Position)">
      <summary>
            Get the rectangle of the cell respect to the client area visible, the grid DisplayRectangle.
            Returns Rectangle.Empty if the Position is empty or if is not valid.
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.PositionAtPoint(System.Drawing.Point)">
      <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region), SearchInFixedCells = true. Return Position.Empty if no valid cells are found.
            </summary>
      <param name="point">Point relative to the DisplayRectangle area.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.RangeToRectangle(SourceGrid.Range)">
      <summary>
            Returns the relative rectangle to the current scrollable area of the specified Range.
            Returns a Rectangle.Empty if the Range is not valid.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.RangeAtArea(SourceGrid.CellPositionType)">
      <summary>
            Get the range of cells at the specified dispaly area.
            This method consider only the visible cells using the current scroll position.
            Returns a single Range for the specified grid area (scrollable, fixedtop, fixedleft, fixedtopleft).
            Returns Range.Empty if there isn't a valid range in the specified area.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetVisibleRegion">
      <summary>
            Get the visible ranges. Returns a list of Range, one for each area.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetScrollRows(System.Int32)">
      <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetScrollColumns(System.Int32)">
      <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.IsCellVisible(SourceGrid.Position,System.Boolean)">
      <summary>
            Indicates if the specified cell is visible.
            </summary>
      <param name="position">
      </param>
      <param name="partial">True to returns also partial visible cells</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetScrollPositionToShowCell(SourceGrid.Position,System.Boolean,System.Drawing.Point@)">
      <summary>
            Return the scroll position that must be set to show a specific cell.
            </summary>
      <param name="position">
      </param>
      <param name="partial">True to consider also partial visible cells</param>
      <param name="newScrollPosition">
      </param>
      <returns>Return false if the cell is already visible, return true is the cell is not currently visible.</returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.ShowCell(SourceGrid.Position,System.Boolean)">
      <summary>
            Scroll the view to show the cell passed. Ensure that if the cell if invisible or partial visible it will be totally visible
            </summary>
      <param name="p_Position">
      </param>
      <param name="ignorePartial">true to ignore and consider already visible partial visible cells</param>
      <returns>Returns true if the Cell passed was already visible, otherwise false</returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.InvalidateCell(SourceGrid.Position)">
      <summary>
            Force a cell to redraw.
            </summary>
      <param name="position">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.InvalidateRange(SourceGrid.Range)">
      <summary>
            Force a range of cells to redraw.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.RangeAtAreaExpanded(SourceGrid.CellPositionType)">
      <summary>
            Returns a visible area range, which is a bit
            expanded to the left and top
            </summary>
      <param name="areaType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.ScrollOnPoint(System.Drawing.Point)">
      <summary>
            Move the scrollbars to the direction specified by the point specified.
            Method used by the Mouse multi selection (MouseSelection.cs).
            Scroll the grid only if the specified location is outside the visible area.
            </summary>
      <param name="mousePoint">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.InvalidateScrollableArea">
      <summary>
            Invalidate the cells
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.RangeToCellRange(SourceGrid.Range)">
      <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.PositionToStartPosition(SourceGrid.Position)">
      <summary>
            This method converts a Position to the real start position of cell. This is usefull when RowSpan or ColumnSPan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0 and if you call this method with 0,1 return again 0,0.
            Get the real position for the specified position. For example when p_Position is a merged cell this method returns the starting position of the merged cells.
            Usually this method returns the same cell specified as parameter. This method is used for processing arrow keys, to find a valid cell when the focus is in a merged cell.
            For this class returns always p_Position.
            </summary>
      <param name="p_Position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.PositionToCellRange(SourceGrid.Position)">
      <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
      <param name="pPosition">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.ChangeDragCell(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
      <summary>
            Fired when the cell in the drag events change. For internal use only.
            </summary>
      <param name="cell">
      </param>
      <param name="pDragEventArgs">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.CreateSelectionObject">
      <summary>
            Virtual factory method used to create the SelectionBase derived object.
            The base method create a different object based on the value of SelectionMode property.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.ChangeMouseCell(SourceGrid.Position)">
      <summary>
            Fired when the cell under the mouse change. For internal use only.
            </summary>
      <param name="p_Cell">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.ChangeMouseDownCell(SourceGrid.Position,SourceGrid.Position)">
      <summary>
            Change the cell currently under the mouse
            </summary>
      <param name="p_MouseDownCell">
      </param>
      <param name="p_MouseCell">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnMouseSelectionFinish(SourceGrid.RangeEventArgs)">
      <summary>
            Fired when the selection eith the mouse is finished
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnUndoMouseSelection(SourceGrid.RangeEventArgs)">
      <summary>
            Fired when the mouse selection must be canceled. See also MouseSelectionRange.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnApplyMouseSelection(SourceGrid.RangeEventArgs)">
      <summary>
            Fired when the mouse selection is succesfully finished. See also MouseSelectionRange.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnMouseSelectionChange(System.EventArgs)">
      <summary>
            Fired when the mouse selection change. See also MouseSelectionRange.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.MouseSelectionFinish">
      <summary>
            Fired when the mouse selection finish. See also MouseSelectionRange.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.ChangeMouseSelectionCorner(SourceGrid.Position)">
      <summary>
            Fired when the corner of the mouse selection change. For internal use only.
            </summary>
      <param name="p_Corner">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>
            Processes a command key.
            </summary>
      <param name="msg">
      </param>
      <param name="keyData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.ProcessSpecialGridKey(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Process Delete, Ctrl+C, Ctrl+V, Up, Down, Left, Right, Tab keys
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.PerformCut(SourceGrid.RangeRegion)">
      <summary>
            Checks if cut mode is enabled, and copies
            data into clipaborad
            </summary>
      <param name="selRegion">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.PerformPaste(SourceGrid.RangeRegion)">
      <summary>
            Checks if paste mode is enabled and writes
            data into grid from clipboard
            </summary>
      <param name="selRegion">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.PerformCopy(SourceGrid.RangeRegion)">
      <summary>
            Checks if copy mode is enabled and copies data into clipboard
            </summary>
      <param name="selRegion">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.PerformDelete(SourceGrid.RangeRegion)">
      <summary>
            Checks if delete is enabled, and clears values from
            given destination by invoking ClearValues(selRegion)
            </summary>
      <param name="selRegion">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            Allow the grid to handle specials keys like Arrows and Tab. See also Grid.SpecialKeys
            </summary>
      <param name="keyData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.IsInputChar(System.Char)">
      <summary>
            IsInputChar method.
            </summary>
      <param name="charCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.PaintCell(DevAge.Drawing.GraphicsCache,SourceGrid.CellContext,System.Drawing.RectangleF)">
      <summary>
            Draw the specified Cell
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Fired when a user scroll with the mouse wheel
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.Focus(System.Boolean)">
      <summary>
            Set the Focus on the grid with an optional behaviour.
            If selectFirstCell is true and the FocusStyle is equal to FocusStyle.FocusFirstCellOnEnter then
            if there isn't a cell selected the first cell of the grid receive became the active cell.
            Otherwise the focus is not changed.
            The Default is true.
            </summary>
      <param name="selectFirstCell">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
      <summary>
            OnHScrollPositionChanged
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
      <summary>
            OnVScrollPositionChanged
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.ArrangeLinkedControls">
      <summary>
            Refresh the linked controls bounds
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.PerformStretch">
      <summary>
            Recalculate the scrollbar position and value based on the current cells, scroll client area, linked controls and more. If redraw == false this method has not effect.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnCellsAreaChanged">
      <summary>
            Force to recalculate scrollbars and panels location. Used usually after changing width and height of the columns / rows, or after adding or removing rows and columns.
            </summary>
    </member>
    <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.IRangeLoader,System.Int32,System.Boolean,System.Collections.IComparer)">
      <summary>
            Sort a range of the grid
            </summary>
      <param name="p_RangeToSort">Range to sort</param>
      <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col of the range</param>
      <param name="p_bAsc">Ascending true, Descending false</param>
      <param name="p_CellComparer">CellComparer, if null the default comparer will be used</param>
    </member>
    <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.Range,System.Int32,System.Boolean,System.Collections.IComparer)">
      <summary>
            Sort a range of the grid.
            </summary>
      <param name="p_Range">
      </param>
      <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col</param>
      <param name="p_bAscending">Ascending true, Descending false</param>
      <param name="p_CellComparer">CellComparer, if null the default ValueCellComparer comparer will be used</param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
      <summary>
            Fired when calling SortRangeRows method
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnSortedRangeRows(SourceGrid.SortRangeRowsEventArgs)">
      <summary>
            Fired after calling SortRangeRows method
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetCell(System.Int32,System.Int32)">
      <summary>
            Return the Cell at the specified Row and Col position. Abstract, must be implemented in the derived class.
            </summary>
      <param name="p_iRow">
      </param>
      <param name="p_iCol">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetCell(SourceGrid.Position)">
      <summary>
            Return the Cell at the specified Row and Col position. This method is called for sort operations and for Move operations. If position is Empty return null. This method calls GetCell(int p_iRow, int p_iCol)
            </summary>
      <param name="p_Position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetCellsAtRow(System.Int32)">
      <summary>
            Returns all the cells at specified row position
            </summary>
      <param name="p_RowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetCellsAtColumn(System.Int32)">
      <summary>
            Returns all the cells at specified column position
            </summary>
      <param name="p_ColumnIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.GetPositionType(SourceGrid.Position)">
      <summary>
            Returns the type of a cell position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.GridVirtual.OnUserException(SourceGrid.ExceptionEventArgs)">
      <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            If not handled by the user (Handled property = false) a MessageBox is used to display the exception.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.GridVirtual.ClearValues(SourceGrid.RangeRegion)">
      <summary>
            Clear all the selected cells with a valid Model.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.DefaultHeight">
      <summary>
            Indicates the default height of new row
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.DefaultWidth">
      <summary>
            Indicates the default width of new column
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.MinimumHeight">
      <summary>
            Indicates the minimum height of the rows
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.MinimumWidth">
      <summary>
            Indicates the minimum width of the columns
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.AutoStretchColumnsToFitWidth">
      <summary>
            True to auto stretch the columns width to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original width of the columns
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.AutoStretchRowsToFitHeight">
      <summary>
            True to auto stretch the rows height to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original height of the rows
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.DragCellPosition">
      <summary>
            The last cell that has received a DragEnter event.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.Selection">
      <summary>
            Gets or sets the Selection object that represents the selected cells and the active cell.
            Use the SelectionMode property to set the type of selection (free, by row, by column).
            Override the CreateSelectionObject method to create a custom Selection class for special needs.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.SelectionMode">
      <summary>
            Gets or sets the selection mode. Changing this property cause the Selection object to be recreated, for this reason remember to set this property at the beginning of your code.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.MouseDownPosition">
      <summary>
            Represents the cell that have received the MouseDown event. You can use this cell for contextmenu logic. Can be null.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.MouseCellPosition">
      <summary>
            The cell position currently under the mouse cursor (row, col).
            If you MouseDown on a cell this cell is the MouseCellPosition until an MouseUp is fired
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.MouseSelectionRange">
      <summary>
            Returns the cells that are selected with the mouse. Range.Empty if no cells are selected. Consider that this method returns valid cells only during the mouse down operations, when release the mouse the cells are selected and you can read them using Grid.Selection object.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.OverrideCommonCmdKey">
      <summary>
            True to override with the ProcessCmdKey the common Command Key: Enter, Escape, Tab
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.SpecialKeys">
      <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. For example to disable Ctrl+C Copy operation remove from this enum the GridSpecialKeys.Ctrl_C.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.AcceptsInputChar">
      <summary>
            True accepts input char when the grid has the focus. Used for example to start the edit operation without processing the char.
            If you set this property to false when the character is sended to the windows forms handler and can be used for example to execute directly some access key (shortcut keys).
            Default is true.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.LinkedControls">
      <summary>
            List of controls that are linked to a specific cell position.
            For example is used for editors controls. Key=Control, Value=Position.
            The controls are automatically removed from the list when they are removed from the Grid.Controls
            collection
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.EnableSort">
      <summary>
            Tells if grid has sorting enabled.
            Note that you can still call manually functions to sort data,
            such as SortRangeRows, or even sort the data
            in your own data source. This property is for UI only
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.FixedRows">
      <summary>
            Gets or Sets how many rows are not scrollable
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.FixedColumns">
      <summary>
            Gets or Sets how many cols are not scrollable
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.Rows">
      <summary>
            RowsCount informations
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.Columns">
      <summary>
            Columns informations
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.CompleteRange">
      <summary>
            Returns a Range that represents the complete cells of the grid
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.RightToLeft">
      <summary>
            Hide the RightToLeft property and returns always No.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.ToolTipText">
      <summary>
            ToolTip text
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.ToolTip">
      <summary>
            Gets the tooltip control used when showing tooltip text.
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.Decorators">
      <summary>
            Grid decorators, used to draw additiona contents on the drawing surface
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.ClipboardMode">
      <summary>
            Gets or sets the clipboard operation mode. Default is none
            </summary>
    </member>
    <member name="P:SourceGrid.GridVirtual.ClipboardUseOnlyActivePosition">
      <summary>
            Gets or sets if only active cell should be used for clipboard operation. Default is whole selection
            </summary>
    </member>
    <member name="E:SourceGrid.GridVirtual.SortingRangeRows">
      <summary>
            Fired when calling SortRangeRows method
            </summary>
    </member>
    <member name="E:SourceGrid.GridVirtual.SortedRangeRows">
      <summary>
            Fired after calling SortRangeRows method
            </summary>
    </member>
    <member name="E:SourceGrid.GridVirtual.UserException">
      <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            </summary>
    </member>
    <member name="T:SourceGrid.ArrayGrid">
      <summary>
            This class derive from GridVirtual and create a grid bound to an array.
            </summary>
    </member>
    <member name="P:SourceGrid.ArrayGrid.DataSource">
      <summary>
            Gets or sets the data source array used to bind the grid.
            </summary>
    </member>
    <member name="P:SourceGrid.ArrayGrid.ColumnHeader">
      <summary>
            Gets or sets the cell used for the column headers.  Only used when FixedRows is greater than 0.
            </summary>
    </member>
    <member name="P:SourceGrid.ArrayGrid.RowHeader">
      <summary>
            Gets or sets the cell used for the row headers. Only used when FixedColumns is greater than 0.
            </summary>
    </member>
    <member name="P:SourceGrid.ArrayGrid.Header">
      <summary>
            Gets or sets the cell used for the left top position header. Only used when FixedRows and FixedColumns are greater than 0.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Models.IModel">
      <summary>
            A generic model interface
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Models.IValueModel">
      <summary>
            A Model interface specific to contain the value of the cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IValueModel.GetValue(SourceGrid.CellContext)">
      <summary>
            Get the value of the cell at the specified position
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.IValueModel.SetValue(SourceGrid.CellContext,System.Object)">
      <summary>
            Set the value of the cell at the specified position. This method must call OnValueChanging and OnValueChanged() event.
            </summary>
      <param name="cellContext">
      </param>
      <param name="p_Value">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.ICellVirtual">
      <summary>
            Interface to represents a cell virtual (without position or value information).
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.ICellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
      <summary>
            Add the specified controller.
            </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.ICellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
      <summary>
            Remove the specifed controller
            </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.ICellVirtual.FindController(System.Type)">
      <summary>
            Find the specified controller. Returns null if not found.
            </summary>
      <param name="pControllerType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.ICellVirtual.FindController``1">
      <summary>
            Find the specified controller. Returns null if not found.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.ICellVirtual.Copy">
      <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.ICellVirtual.Editor">
      <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICellVirtual.Controller">
      <summary>
            Controller of the cell. Represents the actions of a cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICellVirtual.View">
      <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICellVirtual.Model">
      <summary>
            Model that contains the data of the cells. Cannot be null.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.CellVirtual">
      <summary>
            Represents a CellVirtual in a grid.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor">
      <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor(System.Type)">
      <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
      <summary>
            Add the specified controller
            </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
      <summary>
            Remove the specifed controller
            </summary>
      <param name="controller">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.FindController(System.Type)">
      <summary>
            Find the specified controller. Returns null if not found.
            </summary>
      <param name="pControllerType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.FindController``1">
      <summary>
            Find the specified controller. Returns null if not found.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CellVirtual.Copy">
      <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Model">
      <summary>
            Represents the model of the cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.CellVirtual.View">
      <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Controller">
      <summary>
            Controller of the cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Editor">
      <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.ColumnHeader">
      <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.ColumnHeader.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.ResizeEnabled">
      <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.AutomaticSortEnabled">
      <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            </summary>
    </member>
    <member name="T:SourceGrid.ArrayColumnHeader">
      <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.RowHeader">
      <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.RowHeader.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Virtual.RowHeader.ResizeEnabled">
      <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
    </member>
    <member name="T:SourceGrid.ArrayRowHeader">
      <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.Header">
      <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.Header.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:SourceGrid.ArrayHeader">
      <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
    </member>
    <member name="M:SourceGrid.IRows.ShowRow(System.Int32,System.Boolean)">
      <summary>
            Use this method to show or hide row
            </summary>
      <param name="row">
      </param>
      <param name="isVisible">
      </param>
    </member>
    <member name="T:SourceGrid.RowsBase">
      <summary>
            Abstract base class for manage rows informations.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.GetHeight(System.Int32)">
      <summary>
            Gets the height of the specified row.
            </summary>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RowsBase.SetHeight(System.Int32,System.Int32)">
      <summary>
            Sets the height of the specified row.
            </summary>
      <param name="row">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32)">
      <summary>
            Gets the rows index inside the specified display area.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Gets the rows index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
      <param name="y">
      </param>
      <param name="height">
      </param>
      <param name="returnsPartial">True to returns also partial rows</param>
      <param name="returnsFixedRows">
      </param>
    </member>
    <member name="M:SourceGrid.RowsBase.RowAtPoint(System.Int32)">
      <summary>
            Calculate the Row that have the Top value smaller or equal than the point p_Y, or -1 if not found found.
            </summary>
      <param name="y">Y Coordinate to search for a row</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RowsBase.MeasureRowHeight(System.Int32,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Measures the current row when drawn with the specified cells.
            </summary>
      <param name="row">
      </param>
      <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
      <param name="StartCol">Start column to measure</param>
      <param name="EndCol">End column to measure</param>
      <returns>Returns the required height</returns>
    </member>
    <member name="M:SourceGrid.RowsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Auto size all the rows with the max required height of all cells.
            </summary>
      <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
      <param name="StartCol">Start column to measure</param>
      <param name="EndCol">End column to measure</param>
    </member>
    <member name="M:SourceGrid.RowsBase.StretchToFit">
      <summary>
            stretch the rows height to always fit the available space when the contents of the cell is smaller.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.RowsChanged">
      <summary>
            Fired when the numbers of rows changed.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.GetTop(System.Int32)">
      <summary>
            Gets the row top position.
            The Top is relative to the specified start position.
            Calculate the top using also the FixedRows if present.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.GetBottom(System.Int32)">
      <summary>
            Gets the row bottom position. GetTop + GetHeight.
            </summary>
    </member>
    <member name="M:SourceGrid.RowsBase.ShowRow(System.Int32)">
      <summary>
            Show a row (set the height to default height)
            </summary>
      <param name="row">
      </param>
    </member>
    <member name="M:SourceGrid.RowsBase.ShowRow(System.Int32,System.Boolean)">
      <summary>
            Makes row visible or hidden.
            Fires OnRowVisibilityChanged event only if row visibility is changed
            </summary>
      <param name="row">
      </param>
      <param name="isVisible">
      </param>
    </member>
    <member name="M:SourceGrid.RowsBase.HideRow(System.Int32)">
      <summary>
            Hide the specified row (set the height to 0)
            </summary>
      <param name="row">
      </param>
    </member>
    <member name="M:SourceGrid.RowsBase.IsRowVisible(System.Int32)">
      <summary>
            Returns true if the specified row is visible
            </summary>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.RowsBase.FirstVisibleScrollableRow">
      <summary>
            Returns the first visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.RowsBase.LastVisibleScrollableRow">
      <summary>
            Returns the last visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RowsSimpleBase">
      <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
    </member>
    <member name="T:SourceGrid.ColumnsBase">
      <summary>
            Abstract base class for manage columns informations.
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.GetWidth(System.Int32)">
      <summary>
            Gets the width of the specified column.
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnsBase.SetWidth(System.Int32,System.Int32)">
      <summary>
            Sets the width of the specified column.
            </summary>
      <param name="column">
      </param>
      <param name="width">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnsBase.AutoSizeColumn(System.Int32)">
      <summary>
            Autosize column using default auto size mode
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnsBase.AutoSizeColumn(System.Int32,System.Boolean)">
      <summary>
            Autosize column using default auto size mode
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.MeasureColumnWidth(System.Int32,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
      <param name="column">
      </param>
      <param name="useRowHeight">True to fix the row height when measure the column width.</param>
      <param name="StartRow">Start row to measure</param>
      <param name="EndRow">End row to measure</param>
      <returns>Returns the required width</returns>
    </member>
    <member name="M:SourceGrid.ColumnsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Auto size all the columns with the max required width of all cells.
            </summary>
      <param name="useRowHeight">True to fix the row height when measure the column width.</param>
      <param name="StartRow">Start row to measure</param>
      <param name="EndRow">End row to measure</param>
    </member>
    <member name="M:SourceGrid.ColumnsBase.StretchToFit">
      <summary>
            stretch the columns width to always fit the available space when the contents of the cell is smaller.
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32)">
      <summary>
            Gets the columns index inside the specified display area.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Gets the columns index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
      <param name="returnsPartial">True to returns also partial columns</param>
      <param name="x">
      </param>
      <param name="width">
      </param>
      <param name="returnsFixedColumns">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnsBase.ColumnAtPoint(System.Int32)">
      <summary>
            Calculate the Column that have the Left value smaller or equal than the point p_X, or -1 if not found found.
            </summary>
      <param name="x">X Coordinate to search for a column</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnsBase.ColumnsChanged">
      <summary>
            Fired when the numbes of columns changed.
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.GetLeft(System.Int32)">
      <summary>
            Gets the column left position.
            The Left is relative to the specified start position.
            Calculate the left using also the FixedColumn if present.
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.GetRight(System.Int32)">
      <summary>
            Gets the column right position. GetLeft + GetWidth.
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnsBase.ShowColumn(System.Int32)">
      <summary>
            Show a column (set the width to default width)
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnsBase.HideColumn(System.Int32)">
      <summary>
            Hide the specified column (set the width to 0)
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnsBase.IsColumnVisible(System.Int32)">
      <summary>
            Returns true if the specified column is visible
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.ColumnsBase.FirstVisibleScrollableColumn">
      <summary>
            Returns the first visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.ColumnsBase.LastVisibleScrollableColumn">
      <summary>
            Returns the last visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.ColumnInfoCollection">
      <summary>
            Collection of ColumnInfo
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.#ctor(SourceGrid.GridVirtual)">
      <summary>
            Constructor
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.IsValidRange(System.Int32,System.Int32)">
      <summary>
            Returns true if the range passed is valid
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
      <summary>
            Returns true if the range passed is valid for insert method
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.InsertRange(System.Int32,SourceGrid.ColumnInfo[])">
      <summary>
            Insert the specified number of Columns at the specified position
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="columns">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.Remove(System.Int32)">
      <summary>
            Remove a column at the speicifed position
            </summary>
      <param name="p_Index">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove the ColumnInfo at the specified positions
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.Move(System.Int32,System.Int32)">
      <summary>
            Move a column from one position to another position
            </summary>
      <param name="p_CurrentColumnPosition">
      </param>
      <param name="p_NewColumnPosition">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.Swap(System.Int32,System.Int32)">
      <summary>
            Change the position of column 1 with column 2.
            </summary>
      <param name="p_ColumnIndex1">
      </param>
      <param name="p_ColumnIndex2">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsAdded(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired when the number of columns change
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoved(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired when some columns are removed
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoving(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired before some columns are removed
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.OnColumnWidthChanged(SourceGrid.ColumnInfoEventArgs)">
      <summary>
            Execute the RowHeightChanged event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.AutoSizeView">
      <summary>
            Auto size the columns calculating the required size only on the rows currently visible
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnInfoCollection.Clear">
      <summary>
            Remove all the columns
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfoCollection.Item(System.Int32)">
      <summary>
            Indexer. Returns a ColumnInfo at the specified position
            </summary>
    </member>
    <member name="E:SourceGrid.ColumnInfoCollection.ColumnsAdded">
      <summary>
            Fired when the number of columns change
            </summary>
    </member>
    <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoved">
      <summary>
            Fired when some columns are removed
            </summary>
    </member>
    <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoving">
      <summary>
            Fired before some columns are removed
            </summary>
    </member>
    <member name="E:SourceGrid.ColumnInfoCollection.ColumnWidthChanged">
      <summary>
            Fired when the user change the Width property of one of the Column
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.CheckBox">
      <summary>
            A Cell with a CheckBox. This Cell is of type bool. Abstract, you must override GetValue and SetValue.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.CheckBox.#ctor">
      <summary>
            Constructor of a CheckBox style cell. You must st a valid Model to use this type of cell with this constructor.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.Image">
      <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.Image.#ctor">
      <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.Link">
      <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.Link.#ctor">
      <summary>
            Constructor, using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.DataGrid.ColumnHeader">
      <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.DataGrid.RowHeader">
      <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.DataGrid.Header">
      <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
    </member>
    <member name="T:SourceGrid.DataGrid">
      <summary>
            A grid control that support load from a System.Data.DataView class, usually used for data binding.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGrid.CreateRowsObject">
      <summary>
            Method used to create the rows object, in this class of type DataGridRows.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGrid.CreateColumnsObject">
      <summary>
            Method used to create the columns object, in this class of type DataGridColumns.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGrid.GetCell(System.Int32,System.Int32)">
      <summary>
            Gets a specified Cell by its row and column.
            </summary>
      <param name="p_iRow">
      </param>
      <param name="p_iCol">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGrid.CreateColumns">
      <summary>
            Automatic create the columns classes based on the specified DataSource.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGrid.DeleteSelectedRows">
      <summary>
            Delete all the selected rows.
            </summary>
      <returns>Returns true if one or more row is deleted otherwise false.</returns>
    </member>
    <member name="M:SourceGrid.DataGrid.AutoSizeCells">
      <summary>
            AutoSize the columns based on the visible range and autosize the rows based on it's contents.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGrid.BeginEditRow(System.Int32)">
      <summary>
            Check if the specified row is the active row (focused), return false if it is not the active row. Then call the BeginEdit on the associated DataRowView. Add a row to the DataView if required. Returns true if the method sucesfully call the BeginEdit and set the EditingRow property.
            </summary>
      <param name="gridRow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGrid.EndEditingRow(System.Boolean)">
      <summary>
            Calls the CancelEdit or the EndEdit on the editing Row and set to null the editing row.
            </summary>
      <param name="cancel">
      </param>
    </member>
    <member name="P:SourceGrid.DataGrid.DataSource">
      <summary>
            Gets or sets the IBoundList used for data binding.
            It can be any class that implements the IBoundList interface, usually can be BoundList
             (that can be used to bind to a generic List) or BoundDataView (that can be used to bind to a DataView).
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.Rows">
      <summary>
            Gets the rows information as a DataGridRows object.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.Columns">
      <summary>
            Gets the columns informations as a DataGridColumns object.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.SelectedDataRows">
      <summary>
            Gets or sets the selected DataRowView.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.EndEditingRowOnValidate">
      <summary>
            Gets or sets a property to force an End Editing when the control loose the focus
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.DeleteRowsWithDeleteKey">
      <summary>
            Gets or sets if enable the delete of the selected rows when pressing Delete key.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.CancelEditingWithEscapeKey">
      <summary>
            Gets or sets if enable the Cancel Editing feature when pressing escape key
            </summary>
    </member>
    <member name="P:SourceGrid.DataGrid.DeleteQuestionMessage">
      <summary>
            Message showed with the DeleteSelectedRows method. Set to null to not show any message.
            </summary>
    </member>
    <member name="T:SourceGrid.DataGridValueModel">
      <summary>
            A Model of type IValueModel used for binding the value to a specified property of the bound object.
            Used for the DataGrid control.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGridValueModel.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.IController">
      <summary>
            Represents a behavior of a cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseDown(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseUp(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseMove(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseEnter(SourceGrid.CellContext,System.EventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseLeave(SourceGrid.CellContext,System.EventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyUp(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyDown(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyPress(SourceGrid.CellContext,System.Windows.Forms.KeyPressEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Process MouseDoubleClick event. See
            http://msdn.microsoft.com/lt-lt/library/system.windows.forms.control.mousedoubleclick(en-us,VS.80).aspx
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnClick(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Handles OnMouseClick event. See
            http://msdn.microsoft.com/lt-lt/library/system.windows.forms.control.mouseclick(en-us,VS.80).aspx
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeaving(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
      <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeft(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the cell has left the focus.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntering(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
      <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the focus enter in the specified cell.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
      <summary>
            Fired before the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired after the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
      <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.CanReceiveFocus(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Returns true if the current cell can receive the focus. If only one behavior return false the return value is false.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnDragDrop(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnDragEnter(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnDragLeave(SourceGrid.CellContext,System.EventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnDragOver(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.IController.OnGiveFeedback(SourceGrid.CellContext,System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.ControllerBase">
      <summary>
            Implements all the method of the controller interface without any implementation
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
      <summary>
            Fired before the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired after the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.DataGridColumns.IndexToPropertyColumn(System.Int32)">
      <summary>
            Return the DataColumn object for a given grid column index. Return null if not applicable, for example if the column index requested is a FixedColumns of an unbound column
            </summary>
      <param name="gridColumnIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGridColumns.DataSourceColumnToIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns the index for a given DataColumn. -1 if not valid.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.ColumnInfo">
      <summary>
            Column Information
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnInfo.#ctor(SourceGrid.GridVirtual)">
      <summary>
            Constructor
            </summary>
      <param name="p_Grid">
      </param>
    </member>
    <member name="P:SourceGrid.ColumnInfo.MaximalWidth">
      <summary>
            Maximal width of the current Column, -1 if unlimited
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.MinimalWidth">
      <summary>
            Minimal width of the current Column
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.Width">
      <summary>
            Width of the current Column
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.Index">
      <summary>
            Index of the current Column
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.Grid">
      <summary>
            Attached Grid
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.Tag">
      <summary>
            A property that the user can use to insert custom informations associated to a specific column
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.AutoSizeMode">
      <summary>
            Flags for autosize and stretch
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnInfo.Visible">
      <summary>
            Gets or sets if the column is visible.
            Internally set the width to 0 to hide a column.
            </summary>
    </member>
    <member name="T:SourceGrid.DataGridColumn">
      <summary>
            A ColumnInfo derived class used to store column informations for a DataGrid control.
            Mantains the cell used on this grid and manage the binding to the DataSource using a DataGridValueModel class.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGridColumn.#ctor(SourceGrid.DataGrid)">
      <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="M:SourceGrid.DataGridColumn.#ctor(SourceGrid.DataGrid,SourceGrid.Cells.ICellVirtual,SourceGrid.Cells.ICellVirtual,System.String)">
      <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGridColumn.CreateRowHeader(SourceGrid.DataGrid)">
      <summary>
            Create a DataGridColumn with special cells used for RowHeader, usually used when FixedColumns is 1 for the first column.
            </summary>
      <param name="grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGridColumn.Invalidate">
      <summary>
            Clears any associated data with DataGridView.
            <remarks>PropertyColumn binds to DataTable, calling invalidate will remove
            this link</remarks></summary>
    </member>
    <member name="M:SourceGrid.DataGridColumn.GetDataCell(System.Int32)">
      <summary>
            Gets the ICellVirtual for the current column and the specified row.
            Override this method to provide custom cells, based on the row informations.
            </summary>
      <param name="gridRow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.DataGridColumn.PropertyColumn">
      <summary>
            Gets the property column. Can be null if not bound to a datasource Column.
            This field is used for example to support sorting.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGridColumn.HeaderCell">
      <summary>
            Gets or sets the header cell for this column.
            Typically is an instance of SourceGrid.Cells.DataGrid.ColumnHeader
            </summary>
    </member>
    <member name="P:SourceGrid.DataGridColumn.DataCell">
      <summary>
            Gets or sets the cell used for this column for all the rows to disply the data
            Typically is an instance of SourceGrid.Cells.DataGrid.Cell or other classes of the same namespace
            </summary>
    </member>
    <member name="P:SourceGrid.DataGridColumn.Conditions">
      <summary>
            Gets the conditions used to returns different cell based on the data of the row.
            </summary>
    </member>
    <member name="T:SourceGrid.DataGridRows">
      <summary>
            This class implements a RowsSimpleBase class using a DataView bound mode for row count.
            </summary>
    </member>
    <member name="M:SourceGrid.DataGridRows.IndexToDataSourceIndex(System.Int32)">
      <summary>
            Returns the DataSource index for the specified grid row index.
            </summary>
      <param name="gridRowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGridRows.DataSourceIndexToGridRowIndex(System.Int32)">
      <summary>
            Returns the grid index for the specified DataSource index
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGridRows.IndexToDataSourceRow(System.Int32)">
      <summary>
            Returns the DataRowView object for a given grid row index. Return null if not applicable, for example if the DataSource is null or if the row index requested is a FixedRows
            </summary>
      <param name="gridRowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.DataGridRows.DataSourceRowToIndex(System.Object)">
      <summary>
            Returns the index for a given item row. -1 if not valid.
            </summary>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.DataGridRows.Count">
      <summary>
            Gets the number of row of the current DataView. Usually this value is automatically calculated and cannot be changed manually.
            </summary>
    </member>
    <member name="P:SourceGrid.DataGridRows.HeaderHeight">
      <summary>
            Gets or sets the header height (row 0)
            </summary>
    </member>
    <member name="T:SourceGrid.ListEditor">
      <summary>
            Summary description for ListEditor.
            </summary>
    </member>
    <member name="F:SourceGrid.ListEditor.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:SourceGrid.ListEditor.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:SourceGrid.ListEditor.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.Cells.Header">
      <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.Cells.ColumnHeader">
      <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.Cells.RowHeader">
      <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.IPropertyResolver">
      <summary>
            An extension point, where users could define their own 
            property resolver
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.CreateRowsObject">
      <summary>
            Method used to create the rows object, in this class of type PingGridRows.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.CreateColumnsObject">
      <summary>
            Method used to create the columns object, in this class of type DataGridColumns.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.GetCell(System.Int32,System.Int32)">
      <summary>
            Gets a specified Cell by its row and column.
            </summary>
      <param name="p_iRow">
      </param>
      <param name="p_iCol">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.DeleteSelectedRows">
      <summary>
            Delete all the selected rows.
            </summary>
      <returns>Returns true if one or more row is deleted otherwise false.</returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.AutoSizeCells">
      <summary>
            AutoSize the columns based on the visible range and autosize the rows based on it's contents.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.BeginEditRow(System.Int32)">
      <summary>
            Check if the specified row is the active row (focused), return false if it is not the active row. Then call the BeginEdit on the associated DataRowView. Add a row to the DataView if required. Returns true if the method sucesfully call the BeginEdit and set the EditingRow property.
            </summary>
      <param name="gridRow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.EndEditingRow(System.Boolean)">
      <summary>
            Calls the CancelEdit or the EndEdit on the editing Row and set to null the editing row.
            </summary>
      <param name="cancel">
      </param>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.EnableSort">
      <summary>
            Sorting is always enabled
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DataSource">
      <summary>
            Gets or sets the IBoundList used for data binding.
            It can be any class that implements the IBoundList interface, usually can be BoundList
             (that can be used to bind to a generic List) or BoundDataView (that can be used to bind to a DataView).
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.Rows">
      <summary>
            Gets the rows information as a PingGridRows object.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.Columns">
      <summary>
            Gets the columns informations as a PingGridColumns object.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.SelectedDataRows">
      <summary>
            Gets or sets the selected DataRowView.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.EndEditingRowOnValidate">
      <summary>
            Gets or sets a property to force an End Editing when the control loose the focus
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DeleteRowsWithDeleteKey">
      <summary>
            Gets or sets if enable the delete of the selected rows when pressing Delete key.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.CancelEditingWithEscapeKey">
      <summary>
            Gets or sets if enable the Cancel Editing feature when pressing escape key
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DeleteQuestionMessage">
      <summary>
            Message showed with the DeleteSelectedRows method. Set to null to not show any message.
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.PingGridCellController">
      <summary>
            Notify PingGrid of value editing
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.PingGridColumn">
      <summary>
            A ColumnInfo derived class used to store column informations for a PingGrid control.
            Mantains the cell used on this grid and manage the binding to the DataSource using a DataGridValueModel class.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.#ctor(SourceGrid.Extensions.PingGrids.PingGrid)">
      <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.#ctor(SourceGrid.Extensions.PingGrids.PingGrid,SourceGrid.Cells.ICellVirtual,SourceGrid.Cells.ICellVirtual,System.String)">
      <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.CreateRowHeader(SourceGrid.Extensions.PingGrids.PingGrid)">
      <summary>
            Create a DataGridColumn with special cells used for RowHeader, usually used when FixedColumns is 1 for the first column.
            </summary>
      <param name="grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.Invalidate">
      <summary>
            Clears any associated data with DataGridView.
            <remarks>PropertyColumn binds to DataTable, calling invalidate will remove
            this link</remarks></summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.GetDataCell(System.Int32)">
      <summary>
            Gets the ICellVirtual for the current column and the specified row.
            Override this method to provide custom cells, based on the row informations.
            </summary>
      <param name="gridRow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.PropertyColumn">
      <summary>
            Gets the property column. Can be null if not bound to a datasource Column.
            This field is used for example to support sorting.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.HeaderCell">
      <summary>
            Gets or sets the header cell for this column.
            Typically is an instance of SourceGrid.Cells.DataGrid.ColumnHeader
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.DataCell">
      <summary>
            Gets or sets the cell used for this column for all the rows to disply the data
            Typically is an instance of SourceGrid.Cells.DataGrid.Cell or other classes of the same namespace
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.Conditions">
      <summary>
            Gets the conditions used to returns different cell based on the data of the row.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumns.IndexToPropertyColumn(System.Int32)">
      <summary>
            Return the DataColumn object for a given grid column index. Return null if not applicable, for example if the column index requested is a FixedColumns of an unbound column
            </summary>
      <param name="gridColumnIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumns.DataSourceColumnToIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns the index for a given DataColumn. -1 if not valid.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.PingGridRows">
      <summary>
            This class implements a RowsSimpleBase class using a DataView bound mode for row count.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.IndexToDataSourceIndex(System.Int32)">
      <summary>
            Returns the DataSource index for the specified grid row index.
            </summary>
      <param name="gridRowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.DataSourceIndexToGridRowIndex(System.Int32)">
      <summary>
            Returns the grid index for the specified DataSource index
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.IndexToDataSourceRow(System.Int32)">
      <summary>
            Returns the DataRowView object for a given grid row index. Return null if not applicable, for example if the DataSource is null or if the row index requested is a FixedRows
            </summary>
      <param name="gridRowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.DataSourceRowToIndex(System.Object)">
      <summary>
            Returns the index for a given item row. -1 if not valid.
            </summary>
      <param name="row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridRows.Count">
      <summary>
            Gets the number of row of the current DataView. Usually this value is automatically calculated and cannot be changed manually.
            </summary>
    </member>
    <member name="P:SourceGrid.Extensions.PingGrids.PingGridRows.HeaderHeight">
      <summary>
            Gets or sets the header height (row 0)
            </summary>
    </member>
    <member name="T:SourceGrid.Extensions.PingGrids.PingGridValueModel">
      <summary>
            A Model of type IValueModel used for binding the value to a specified property of the bound object.
            Used for the DataGrid control.
            </summary>
    </member>
    <member name="M:SourceGrid.Extensions.PingGrids.PingGridValueModel.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:SourceGrid.Planning.PlanningGrid">
      <summary>
            Summary description for PlanningGrid.
            </summary>
    </member>
    <member name="F:SourceGrid.Planning.PlanningGrid.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:SourceGrid.Planning.PlanningGrid.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:SourceGrid.Planning.PlanningGrid.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:SourceGrid.Planning.PlanningGrid.LoadPlanning(System.DateTime,System.DateTime,System.Int32)">
      <summary>
            Load the grid using the parameters specified
            </summary>
      <param name="dateTimeStart">
      </param>
      <param name="dateTimeEnd">
      </param>
      <param name="minAppointmentLength">
      </param>
    </member>
    <member name="P:SourceGrid.Planning.PlanningGrid.Grid">
      <summary>
            The grid used internally to display the planning (note that you usually don't need to access directly this class).
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.ICell">
      <summary>
            Represents a Cell to use with Grid control.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.ICell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
      <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
      <param name="p_grid">
      </param>
      <param name="p_Position">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.ICell.UnBindToGrid">
      <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.ICell.SetSpan(System.Int32,System.Int32)">
      <summary>
            Setting a col/row spann is a costly operation, so it's better
            if you set these two at the same time.
            Prefer this method to <c>RowSpan</c> and <c>ColSpan</c> property setters
            </summary>
      <param name="rowSpan">
      </param>
      <param name="colSpan">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.ICell.DisplayText">
      <summary>
            Gets the string representation of the Cell.Value property (default Value.ToString())
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Value">
      <summary>
            Gets or sets the value of the cell 
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Tag">
      <summary>
            Gets or sets additional info for this cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.ToolTipText">
      <summary>
            Gets or sets the ToolTipText
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Image">
      <summary>
            Gets or set the image of the cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Grid">
      <summary>
            The Grid object
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Column">
      <summary>
            Gets the column of the specified cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Row">
      <summary>
            Gets the row of the specified cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.Range">
      <summary>
            Gets the range of the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.ColumnSpan">
      <summary>
            ColSpan for merge operation, calculated using the current range.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ICell.RowSpan">
      <summary>
            RowSpan for merge operation, calculated using the current range.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Cell">
      <summary>
            Represents a Cell in a grid, with Cell.Value support and row/col span. Support also ToolTipText, ContextMenu and Cursor
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Cell.m_Tag">
      <summary>
            Object to put additional info for this cell
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Cell.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,System.Type)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
      <param name="pType">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,SourceGrid.Cells.Editors.EditorBase)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
      <param name="pEditor">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Cell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
      <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
      <param name="p_grid">
      </param>
      <param name="p_Position">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Cell.UnBindToGrid">
      <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Cell.ToString">
      <summary>
            ToString method
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Grid">
      <summary>
            The Grid object
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Column">
      <summary>
            Gets the column of the specified cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Row">
      <summary>
            Gets the row of the specified cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Range">
      <summary>
            Gets the range of the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.DisplayText">
      <summary>
            The string representation of the Cell.Value property (default Value.ToString())
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Value">
      <summary>
            Value of the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Tag">
      <summary>
            Object to put additional info for this cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.ColumnSpan">
      <summary>
            ColSpan for merge operation
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.RowSpan">
      <summary>
            RowSpan for merge operation
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.ToolTipText">
      <summary>
            Gets or sets the tool tip text of the cell. Internally use the Models.ToolTip class.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Cell.Image">
      <summary>
            Gets or sets the Image associeted with the Cell. Internally use a Models.Image class.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Header">
      <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Header.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Header.#ctor(System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.RowHeader">
      <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RowHeader.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RowHeader.#ctor(System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.RowHeader.ResizeEnabled">
      <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
    </member>
    <member name="T:SourceGrid.Planning.AppointmentCollection">
      <summary>
            A collection of elements of type IAppointment
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.Button">
      <summary>
            A cell that rappresent a button 
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.Button.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Button">
      <summary>
            A cell that rappresent a button 
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Button.#ctor(System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="p_Value">
      </param>
    </member>
    <member name="T:SourceGrid.CellCollection">
      <summary>
            A collection of elements of type Cells.ICellVirtual
            </summary>
    </member>
    <member name="T:SourceGrid.CellCollection.Enumerator">
      <summary>
            Type-specific enumeration class, used by CellBaseCollection.GetEnumerator.
            </summary>
    </member>
    <member name="M:SourceGrid.CellCollection.Enumerator.#ctor(SourceGrid.CellCollection)">
      <summary>
      </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:SourceGrid.CellCollection.Enumerator.MoveNext">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellCollection.Enumerator.Reset">
      <summary>
      </summary>
    </member>
    <member name="P:SourceGrid.CellCollection.Enumerator.Current">
      <summary>
      </summary>
    </member>
    <member name="M:SourceGrid.CellCollection.#ctor">
      <summary>
            Initializes a new empty instance of the CellBaseCollection class.
            </summary>
    </member>
    <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.Cells.ICellVirtual[])">
      <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from an array.
            </summary>
      <param name="items">
            The array whose elements are to be added to the new CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.CellCollection)">
      <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from another instance of CellBaseCollection
            </summary>
      <param name="items">
            The CellBaseCollection whose elements are to be added to the new CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.Cells.ICellVirtual[])">
      <summary>
            Adds the elements of an array to the end of this CellBaseCollection.
            </summary>
      <param name="items">
            The array whose elements are to be added to the end of this CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.CellCollection)">
      <summary>
            Adds the elements of another CellBaseCollection to the end of this CellBaseCollection.
            </summary>
      <param name="items">
            The CellBaseCollection whose elements are to be added to the end of this CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.Add(SourceGrid.Cells.ICellVirtual)">
      <summary>
            Adds an instance of type Cells.ICellVirtual to the end of this CellBaseCollection.
            </summary>
      <param name="value">
            The Cells.ICellVirtual to be added to the end of this CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.Contains(SourceGrid.Cells.ICellVirtual)">
      <summary>
            Determines whether a specfic Cells.ICellVirtual value is in this CellBaseCollection.
            </summary>
      <param name="value">
            The Cells.ICellVirtual value to locate in this CellBaseCollection.
            </param>
      <returns>
            true if value is found in this CellBaseCollection;
            false otherwise.
            </returns>
    </member>
    <member name="M:SourceGrid.CellCollection.IndexOf(SourceGrid.Cells.ICellVirtual)">
      <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CellBaseCollection
            </summary>
      <param name="value">
            The Cells.ICellVirtual value to locate in the CellBaseCollection.
            </param>
      <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
    </member>
    <member name="M:SourceGrid.CellCollection.Insert(System.Int32,SourceGrid.Cells.ICellVirtual)">
      <summary>
            Inserts an element into the CellBaseCollection at the specified index
            </summary>
      <param name="index">
            The index at which the Cells.ICellVirtual is to be inserted.
            </param>
      <param name="value">
            The Cells.ICellVirtual to insert.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.Remove(SourceGrid.Cells.ICellVirtual)">
      <summary>
            Removes the first occurrence of a specific Cells.ICellVirtual from this CellBaseCollection.
            </summary>
      <param name="value">
            The Cells.ICellVirtual value to remove from this CellBaseCollection.
            </param>
    </member>
    <member name="M:SourceGrid.CellCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the elements of this CellBaseCollection.
            </summary>
      <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>
    </member>
    <member name="P:SourceGrid.CellCollection.Item(System.Int32)">
      <summary>
            Gets or sets the Cells.ICellVirtual at the given index in this CellBaseCollection.
            </summary>
    </member>
    <member name="T:SourceGrid.CellContext">
      <summary>
            Structure that represents a logical cell, composed by a ICellVirtual, a Position and a GridVirtual.
            This is an important structure used to manipulate the cell object, both virtual and real.
            </summary>
    </member>
    <member name="F:SourceGrid.CellContext.Empty">
      <summary>
            An empty CellContext instance.
            </summary>
    </member>
    <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
      <summary>
            Constructor
            </summary>
      <param name="pGridVirtual">
      </param>
      <param name="pPosition">
      </param>
      <param name="pCell">
      </param>
    </member>
    <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position)">
      <summary>
            Constructor
            </summary>
      <param name="pGridVirtual">
      </param>
      <param name="pPosition">
      </param>
    </member>
    <member name="M:SourceGrid.CellContext.Measure(System.Drawing.Size)">
      <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalGetRequiredSize with RowSpan and ColSpan = 1.
            </summary>
      <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.StartEdit">
      <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
    </member>
    <member name="M:SourceGrid.CellContext.EndEdit(System.Boolean)">
      <summary>
            Terminate the edit operation.
            </summary>
      <param name="cancel">If true undo all the changes</param>
      <returns>Returns true if the edit operation is successfully terminated, otherwise false</returns>
    </member>
    <member name="M:SourceGrid.CellContext.IsEditing">
      <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.CanBeDrawn">
      <summary>
            True is the cell can be drawn (usually if the cell is in editing state the drawing code is disabled)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.Invalidate">
      <summary>
            Invalidate this cell
            </summary>
    </member>
    <member name="M:SourceGrid.CellContext.IsEmpty">
      <summary>
            Returns true if the current struct is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.GetHashCode">
      <summary>
            GetHashCode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.Equals(SourceGrid.CellContext)">
      <summary>
      </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.op_Equality(SourceGrid.CellContext,SourceGrid.CellContext)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.op_Inequality(SourceGrid.CellContext,SourceGrid.CellContext)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.CellContext.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.CellContext.DisplayText">
      <summary>
            Gets the string representation of the Model.ValueModel.GetValue method (default ToString())
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.CellContext.Value">
      <summary>
            Gets or sets the cell value.
            </summary>
    </member>
    <member name="P:SourceGrid.CellContext.CellRange">
      <summary>
            Calculate the Range occupied by the current cell. Usually it is simply the Position property, only if RowSpan or ColumnSpan is used this property returns a larger range.
            Internally use the Grid.PositionToCellRange method.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.CellControl">
      <summary>
            The CellControl class is used to create a cell with a Windows Forms Control inside.
            The CellControl class requires a new Windows Forms control for each cell. Unfortunately Winwods Forms control requires a lot of system resources and with many cells this can cause system fault or out of memory conditions.
            Basically I suggest to use CellControl with no more than 50 cells and only if necessary, usually it is better to use standard cells.
            Another problem with the CellControl class is that it is not integrated well with the rest of the grid (control borders, cell navigation, ...)
            Finally a cell of type CellControl cannot be moved, for example you cannot use sort, move the columns, ... when using a CellControl.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control)">
      <summary>
            Constructor.
            </summary>
      <param name="control">Control to insert inside the grid</param>
    </member>
    <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control,SourceGrid.LinkedControlScrollMode,System.Boolean)">
      <summary>
            Constructor.
            </summary>
      <param name="control">Control to insert inside the grid</param>
      <param name="scrollMode">
      </param>
      <param name="useCellBorder">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.CellControl.Control">
      <summary>
            Gets the control associated with this cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.CheckBox">
      <summary>
            A Cell with a CheckBox. This Cell is of type bool.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.CheckBox.#ctor">
      <summary>
            Constrcutor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.CheckBox.#ctor(System.String,System.Nullable{System.Boolean})">
      <summary>
            Construct a CellCheckBox class with caption and align checkbox in the MiddleLeft, using BehaviorModels.CheckBox.Default
            </summary>
      <param name="caption">
      </param>
      <param name="checkValue">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.CheckBox.Checked">
      <summary>
            Checked status (equal to the Value property but returns a bool)
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.CheckBox.Caption">
      <summary>
            Caption of the cell
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.ColumnHeader">
      <summary>
            A cell that rappresent a header of a table. 
            View: Views.ColumnHeader.Default 
            Model: Models.SortableHeader 
            Controllers: Controllers.Unselectable.Default, Controllers.MouseInvalidate.Default, Controllers.Resizable.ResizeWidth, Controllers.SortableHeader.Default 
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.ColumnHeader.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.ColumnHeader.#ctor(System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="cellValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.ColumnHeader.Sort(System.Boolean)">
      <summary>
            Sort the column
            </summary>
      <param name="ascending">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.ResizeEnabled">
      <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.AutomaticSortEnabled">
      <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            If you want to use a custom sort you can add a customized Controller or a customized instance of Controllers.SortableHeader.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.SortableHeaderModel">
      <summary>
            Gets the used SortableHeader model.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.SortStatus">
      <summary>
            Status of the sort.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.SortComparer">
      <summary>
            Comparer used.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.ColumnHeader.SortStyle">
      <summary>
            Sort style.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.BindProperty">
      <summary>
            Summary description for BindProperty.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.BindProperty.#ctor(System.Reflection.PropertyInfo,System.Object)">
      <summary>
            Constructor
            </summary>
      <param name="p_Property">Property of the object that you want to lint to the cell. When the value of the cell changed this behavior call automatically this property.</param>
      <param name="p_LinkObject">Instance of the object to link</param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.BindProperty.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            OnValueChanged
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.BindProperty.BindValueAtProperty(System.Reflection.PropertyInfo,System.Object)">
      <summary>
            Bind the cell's value with the property p_Property of the object p_LinkObject
            when the cell's value change also the property change
            </summary>
      <param name="p_Property">linked property</param>
      <param name="p_LinkObject">Can be null to call static property</param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.BindProperty.BindValueAtProperty(SourceGrid.Cells.ICell,System.Reflection.PropertyInfo,System.Object,System.Int32)">
      <summary>
            Bind the cell's value with the property p_Property of the object p_LinkObject
            when the cell's value change also the property change
            </summary>
            /// <param name="cell">Cell to display value</param><param name="p_Property">linked property</param><param name="p_LinkObject">Can be null to call static property</param><param name="index">index</param></member>
    <member name="M:SourceGrid.Cells.Controllers.BindProperty.UnBindValueAtProperty">
      <summary>
            UnBind the cell with the property
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.Button">
      <summary>
            Button controller is used to executed a specific action when the user click on a cell or when the user press the Enter or Space key (using the OnKeyDown event).
            Is normally used with the Link or Button Cell.
            Override the OnExecuted to add your code or use the Executed event.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.Button.mLastButton">
      <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system button.
            
            Here are the events executed on a system button:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.CellEventDispatcher">
      <summary>
            This controller dispatch each event to the specified cell.
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.CellEventDispatcher.Default">
      <summary>
            The default behavior of a cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnClick(SourceGrid.CellContext,System.EventArgs)">
      <summary>
      </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the SetValue method is called.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when editing is ended
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.CheckBox">
      <summary>
            Summary description for BehaviorModelCheckBox. This behavior can be shared between multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.CheckBox.Default">
      <summary>
            Default behavior checkbox
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.CheckBox.mLastButton">
      <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system CheckBox.
            
            Here are the events executed on a system checkbox:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor(System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="p_bAutoChangeValueOfSelectedCells">Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox.</param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CheckBox.UIChangeChecked(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Toggle the value of the current cell and if AutoChangeValueOfSelectedCells is true of all the selected cells.
            Simulate an edit operation.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.CheckBox.AutoChangeValueOfSelectedCells">
      <summary>
            Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox. Default is false
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Controllers.CheckBox.CheckedChanged">
      <summary>
            An event similar to Windows.Forms.CheckBox.CheckedChanged.
            Fired when value changed
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.ColumnFocus">
      <summary>
            ColumnFocus controller overrides the OnFocusEntering method and set the Focus on the Column. This controller is usually used on the Column Header when the Sort is disabled.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.ColumnFocus.Default">
      <summary>
            Default controller to select all the column
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.ColumnSelector">
      <summary>
            Summary description for FullColumnSelection.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.ColumnSelector.Default">
      <summary>
            Default controller to select all the column
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.ControllerContainer.ControllerList">
      <summary>
            A collection of elements of type IController. Only one instance of the same controller is allowed.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.FindController(System.Type)">
      <summary>
            Returns null if not exist
            </summary>
      <param name="modelType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
      <summary>
            Fired before the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired after the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
      <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.CustomEvents">
      <summary>
            In this Controller are defined all the events fired by the Controller. Each event has a sender object of type CellContext that you can use to read the cell informations.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
      <summary>
            Fired before the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired after the value of the cell is changed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanging">
      <summary>
            Fired before the value of the cell is changed.
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanged">
      <summary>
            Fired after the value of the cell is changed.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.MouseCursor">
      <summary>
            Allow to customize the cursor of a cell. The cell must implement ICellCursor. This behavior can be shared between multiple cells.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ApplyCursor(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Change the cursor with the cursor of the cell
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ResetCursor(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Reset the original cursor
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.MouseInvalidate">
      <summary>
            A behavior that invalidate the cell on mouse events
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.MouseInvalidate.Default">
      <summary>
            Default implementation.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.MouseSelection">
      <summary>
            A cell controller used to handle mouse selection
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseSelection.OnMouseMove(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Used for mouse multi selection and mouse scrolling
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseSelection.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Ends scroll tracking on double click
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseSelection.BeginScrollTracking(SourceGrid.GridVirtual)">
      <summary>
            Start the timer to scroll the visible area
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.MouseSelection.EndScrollTracking">
      <summary>
            Stop the timer
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.MouseSelection.MouseButtons">
      <summary>
            Controls which mouse buttons invoke mouse selection.
            Default is MouseButtons.Left
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.Resizable">
      <summary>
            Implement the mouse resize features of a cell. This behavior can be shared between multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeBoth">
      <summary>
            Resize both width nd height behavior
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeWidth">
      <summary>
            Resize width behavior
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeHeight">
      <summary>
            Resize height behavior
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.Resizable.LogicalBorder">
      <summary>
            Border used to calculate the region where the resize is enabled.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.Resizable.#ctor(SourceGrid.CellResizeMode)">
      <summary>
            Constructor
            </summary>
      <param name="p_Mode">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.Resizable.ResizeMode">
      <summary>
            Resize mode of the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.Resizable.IsWidthResizing">
      <summary>
            Indicates if the behavior is currently resizing a cell width
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.Resizable.IsHeightResizing">
      <summary>
            Indicates if the behavior is currently resizing a cell height
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.RichTextBox">
      <summary>
            Implementation RichTextBox behavior
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.RichTextBox.Default">
      <summary>
            Default behavior RichTextBox
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.RichTextBox.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.RichTextBox.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
      <summary>
            If ValueEventArgs is a font, use it to change SelectionFont
            If String, assign it as rtf
            If Int32, assign it as offset
            If HorizontalAlignment, assign as SelectionAlignment
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.RowFocus">
      <summary>
            RowFocus controller overrides the OnFocusEntering method and set the Focus on the Row. This controller is usually used on the Row Header. This controller also add an arror Cursor when the mouse is over the cell.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.RowFocus.Default">
      <summary>
            Default controller to select all the row
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.RowFocus.LogicalBorder">
      <summary>
            Border used to calculate the region to enable the row selection
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.RowSelector">
      <summary>
            Summary description for FullColumnSelection.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.RowSelector.Default">
      <summary>
            Default controller to select all the column
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.SortableHeader">
      <summary>
            A behavior that support sort and resize. Once created cannot be modified. When calculated automatically the range to sort is all the grid range without the rows minor of the current row and the range header is all the grid range with the rows minor or equal of the current row
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.SortableHeader.Default">
      <summary>
            Column header behavior with sort and resize support, same as SortResizeHeader.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.SortableHeader.LogicalBorder">
      <summary>
            Border used to calculate the region where the sort is enabled.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_RangeToSort">
      <summary>
            Range to sort
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_HeaderRange">
      <summary>
            Header range (can be null).
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.SortableHeader.#ctor(SourceGrid.IRangeLoader,SourceGrid.IRangeLoader)">
      <summary>
            Constructor
            </summary>
      <param name="p_RangeToSort">If null then the range is automatically calculated.</param>
      <param name="p_HeaderRange">If null then the range is automatically calculated.</param>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.SortableHeader.IsSortEnable(SourceGrid.CellContext)">
      <summary>
            Indicates if for the specified cell the sort is enabled.
            </summary>
      <param name="sender">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.SortableHeader.SortColumn(SourceGrid.CellContext,System.Boolean,System.Collections.IComparer)">
      <summary>
            Sort the current column. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
      <param name="sender">
      </param>
      <param name="p_bAscending">
      </param>
      <param name="p_Comparer">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeToSort">
      <summary>
            Range to sort. If null and EnableSort is true the range is automatically calculated.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeHeader">
      <summary>
            Header range. If null and EnableSort is true the range is automatically calculated.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.StandardBehavior">
      <summary>
            Common behavior of the cell. 
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.StandardBehavior.Default">
      <summary>
            The default behavior of a cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when the SetValue method is called.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Fired when editing is ended
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.ToolTipText">
      <summary>
            Allow to customize the tooltiptext of a cell. This class read the tooltiptext from the ICellToolTipText.GetToolTipText.  This behavior can be shared between multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Controllers.ToolTipText.Default">
      <summary>
            Default tooltiptext
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ApplyToolTipText(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Change the cursor with the cursor of the cell
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ResetToolTipText(SourceGrid.CellContext,System.EventArgs)">
      <summary>
            Reset the original cursor
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Controllers.Unselectable">
      <summary>
            Implements a behavior that cannot receive the focus. This behavior can be shared between multiple cells.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.EditorBase">
      <summary>
            Represents the base class of a DataModel. This DataModel support conversion but doesn't provide any user interface editor.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Editors.EditorBase.m_ErrorString">
      <summary>
            Error rappresentation
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate StringEditor property
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.SetEditCell(SourceGrid.CellContext)">
      <summary>
            Set the current editing cell, for an editor only one cell can be in editing state
            </summary>
      <param name="cellContext">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.IsErrorString(System.String)">
      <summary>
            Returns true if the string passed is equal to the error string rappresentation
            </summary>
      <param name="p_str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalStartEdit(SourceGrid.CellContext)">
      <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
      <param name="cellContext">Cell to start edit</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.ApplyEdit">
      <summary>
            Apply edited value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalEndEdit(System.Boolean)">
      <summary>
            Cancel the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
      <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
      <returns>Returns true if the cell terminate the editing mode</returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.GetEditedValue">
      <summary>
            Returns the new value edited with the custom control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.ClearCell(SourceGrid.CellContext)">
      <summary>
            Clear the value of the cell using the default value
            </summary>
      <param name="cellContext">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.SetCellValue(SourceGrid.CellContext,System.Object)">
      <summary>
            Change the value of the cell applying the rule of the current editor. Is recommend to use this method to simulate a edit operation and to validate the cell value using the current model.
            Doesn't call the StartEdit and EndEdit but change directly the cell value. Use the CellContext.Start edit to begin an edit operation.
            </summary>
      <param name="cellContext">Cell to change the value</param>
      <param name="p_NewValue">
      </param>
      <returns>returns true if the value passed is valid and has been applied to the cell</returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidated(SourceGrid.CellContextEventArgs)">
      <summary>
            Functions used when the validating operation is finished
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidating(SourceGrid.ValidatingCellEventArgs)">
      <summary>
            Validating the value of the cell.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.OnEditException(SourceGrid.ExceptionEventArgs)">
      <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.SendCharToEditor(System.Char)">
      <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorBase.GetMinimumSize(SourceGrid.CellContext)">
      <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCellContext">
      <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCell">
      <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EditPosition">
      <summary>
            Cell in editing, if Empty no cell is in editing state
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.ErrorString">
      <summary>
            String used when error occurred
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableEdit">
      <summary>
            Enable or disable the cell editor (if disable no visual edit is allowed)
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EditableMode">
      <summary>
            Mode to edit the cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableCellDrawOnEdit">
      <summary>
            Indicates if the draw of the cell when in editing mode is enabled.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.UseCellViewProperties">
      <summary>
            Gets or sets if the editor must assign to the editor control the default view properties: ForeColor, BackColor, Font. This can be disabled if you want to manually assign these properties to the control.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorBase.IsEditing">
      <summary>
            Indicates if the current editor is in editing state
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Editors.EditorBase.Validating">
      <summary>
            Validating event
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Editors.EditorBase.Validated">
      <summary>
            Validated event
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Editors.EditorBase.EditException">
      <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.EditorControlBase">
      <summary>
            The base class for all the editors that have a control
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Editors.EditorControlBase.mIsInsideEndEdit">
      <summary>
            Variable that indicate if the InternalEndEdit method is already called. Is used because the InternalEndEdit can be called by a the Control_Validated or directly by the user.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.CreateControl">
      <summary>
            Abstract method that must create a new Control used for the editing operations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.IsControlAttached">
      <summary>
            Check if the Control is attached to a grid.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.AttachControl(SourceGrid.GridVirtual)">
      <summary>
            Add the Control to the specified grid. Consider that a Control can only be a child of one Container.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalStartEdit(SourceGrid.CellContext)">
      <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
      <param name="cellContext">Cell to start edit</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
      <summary>
            This method is called just before the edit start. You can override this method to customize the editor with the cell informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="editorControl">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.ApplyEdit">
      <summary>
            Apply edited value without stop the editing.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalEndEdit(System.Boolean)">
      <summary>
            Terminate the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
      <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
      <returns>Returns true if the cell terminate the editing mode</returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InnerControl_Validated(System.Object,System.EventArgs)">
      <summary>
            Validated of the editor control
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.UndoEditValue">
      <summary>
            Undo the edit value of the control to the initial value of the cell, usually used when pressing Esc key or terminate the edit operation with Cancel true.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SafeSetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control calling the SetEditValue method. If an exception is throwed calls the OnUserException method and set the default value.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SendCharToEditor(System.Char)">
      <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnSendCharToEditor(System.Char)">
      <summary>
            Method used to precess the key sended.
            Abstract method that must be override in the derived class
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetMinimumSize(SourceGrid.CellContext)">
      <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Control">
      <summary>
            The Control used to edit the Cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Grid">
      <summary>
            The grid used by this editor. Null if the editor is not attached on a grid.
            </summary>
    </member>
    <member name="E:SourceGrid.Cells.Editors.EditorControlBase.KeyPress">
      <summary>
            KeyPress event is fired in 2 cases: when the Control.KeyPress event is executed and when the user start to editing the cell by pressing a key (calling SendCharToEditor)
            Set the e.Handled property to true to block the event
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Editors.Button.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.ComboBox">
      <summary>
            Editor for a ComboBox (using DevAgeComboBox control)
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type,System.Collections.ICollection,System.Boolean)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
      <param name="p_StandardValues">
      </param>
      <param name="p_StandardValueExclusive">True to not allow custom value, only the values specified in the standardvalues collection are allowed.</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ComboBox.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ComboBox.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ComboBox.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.ComboBox.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.DateTimePicker">
      <summary>
            Create an Editor that use a DateTimePicker as control for date editing.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DateTimePicker.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DateTimePicker.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DateTimePicker.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
      <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="editorControl">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DateTimePicker.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DateTimePicker.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.DateTimePicker.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.DatePicker">
      <summary>
            Create an Editor that use a DateTimePicker as control for time editing.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DatePicker.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DatePicker.#ctor(System.String,System.String[])">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.DatePicker.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.DatePicker.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type)">
      <summary>
            Construct an EditorBase for the specified type. You can set the value returned in the Editor property.
            If the Type support a UITypeEditor returns a EditorUITypeEditor else if the type has a StandardValues list return a EditorComboBox else if the type support string conversion returns a EditorTextBox otherwise returns null.
            </summary>
      <param name="p_Type">Type to edit</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type,System.Object,System.Boolean,System.Collections.ICollection,System.Boolean,System.ComponentModel.TypeConverter,System.Drawing.Design.UITypeEditor)">
      <summary>
            Construct a CellEditor for the specified type
            </summary>
      <param name="p_Type">Cell Type</param>
      <param name="p_DefaultValue">Default value of the editor</param>
      <param name="p_bAllowNull">Allow null</param>
      <param name="p_StandardValues">List of available values or null if there is no available values list</param>
      <param name="p_bStandardValueExclusive">Indicates if the p_StandardValue are the unique values supported</param>
      <param name="p_TypeConverter">Type converter used for conversion for the specified type</param>
      <param name="p_UITypeEditor">UITypeEditor if null must be populated the TypeConverter</param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Editors.ImagePicker">
      <summary>
             A model that use a TextBoxButton for Image editing, allowing to select a source image file. Returns null as DisplayString. Write and read byte[] values.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ImagePicker.#ctor">
      <summary>
            Construct an Editor of type ImagePicker.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ImagePicker.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.ImagePicker.ValueToDisplayString(System.Object)">
      <summary>
            Used to returns the display string for a given value. In this case return null.
            </summary>
      <param name="p_Value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.ImagePicker.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.NumericUpDown">
      <summary>
            EditorNumericUpDown editor class.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.NumericUpDown.#ctor">
      <summary>
            Create a model of type Decimal
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.NumericUpDown.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.NumericUpDown.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.NumericUpDown.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Editors.RichTextBox">
      <summary>
            An editor that use a RichTextBoxTyped for editing support.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
      <summary>
            This method is called just before the edit start.
            You can use this method to customize the editor with the cell informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="editorControl">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.RichTextBox.OnSendCharToEditor(System.Char)">
      <summary>
            Override content of cell with sent character
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.Editors.RichTextBox.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TextBox">
      <summary>
            An editor that use a TextBoxTyped for editing support.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBox.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBox.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBox.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
      <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="editorControl">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBox.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBox.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.TextBox.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TextBoxButton">
      <summary>
            An editor that use a TextBoxTypedButton for editing.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxButton.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxButton.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxButton.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
      <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="editorControl">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxButton.SetEditValue(System.Object)">
      <summary>
            Set the specified value in the current editor control.
            </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxButton.GetEditedValue">
      <summary>
            Returns the value inserted with the current editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.TextBoxButton.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TextBoxNumeric">
      <summary>
            An editor that use a TextBoxTypedNumeric for editing support. You can customize the Control.NumericCharStyle property to enable char validation.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.TextBoxNumeric.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TextBoxCurrency">
      <summary>
            An editor to support Currency data type
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxCurrency.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TextBoxUITypeEditor">
      <summary>
             An editor that use a UITypeEditor to edit the cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.#ctor(System.Type)">
      <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
      <param name="p_Type">The type of this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.TextBoxUITypeEditor.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Editors.TimePicker">
      <summary>
            Create an Editor that use a DateTimePicker as control for time editing.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor(System.String,System.String[])">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Editors.TimePicker.CreateControl">
      <summary>
            Create the editor control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Editors.TimePicker.Control">
      <summary>
            Gets the control used for editing the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Image">
      <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Image.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Image.#ctor(System.Object)">
      <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Link">
      <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Link.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Link.#ctor(System.Object)">
      <summary>
            Constructor using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
      <param name="p_Value">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.Models.ICheckBox">
      <summary>
            Interface for informations about a cechkbox
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.ICheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
      <summary>
            Get the status of the checkbox at the current position
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.ICheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
      <summary>
            Set the checked value
            </summary>
      <param name="cellContext">
      </param>
      <param name="pChecked">True, False or Null</param>
    </member>
    <member name="T:SourceGrid.Cells.Models.CheckBoxStatus">
      <summary>
            Status of the CheckBox
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.CheckEnable">
      <summary>
            Enable or disable the checkbox
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.Caption">
      <summary>
            Caption of the CheckBox
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,System.Nullable{System.Boolean},System.String)">
      <summary>
            Constructor
            </summary>
      <param name="checkEnable">
      </param>
      <param name="bChecked">
      </param>
      <param name="caption">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,DevAge.Drawing.CheckBoxState,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="checkEnable">
      </param>
      <param name="checkState">
      </param>
      <param name="caption">
      </param>
    </member>
    <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.CheckState">
      <summary>
            Gets or sets the state of the check box.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.Checked">
      <summary>
            Gets or set Checked status. Return true for Checked, false for Uncheck and null for Undefined
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Models.IImage">
      <summary>
            Interface for informations about an image.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IImage.GetImage(SourceGrid.CellContext)">
      <summary>
            Get the image of the specified cell. 
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Models.IRichTextBox">
      <summary>
            Model for RichTextBox
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionFont(SourceGrid.CellContext,System.Drawing.Font)">
      <summary>
            Set font of selected text.
            </summary>
      <param name="cellContext">
      </param>
      <param name="font">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionFont(SourceGrid.CellContext)">
      <summary>
            Get font of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionColor(SourceGrid.CellContext,System.Drawing.Color)">
      <summary>
            Set color of selected text.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionColor(SourceGrid.CellContext)">
      <summary>
            Get char offset of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionCharOffset(SourceGrid.CellContext,System.Int32)">
      <summary>
            Set char offset of selected text.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionCharOffset(SourceGrid.CellContext)">
      <summary>
            Get char offset of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionAlignment(SourceGrid.CellContext,System.Windows.Forms.HorizontalAlignment)">
      <summary>
            Set horizontal alignment of selected text.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionAlignment(SourceGrid.CellContext)">
      <summary>
            Get horizontal alignment of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Models.ISortableHeader">
      <summary>
            Summary description for ICellSortableHeader.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.ISortableHeader.GetSortStatus(SourceGrid.CellContext)">
      <summary>
            Returns the current sort status
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.ISortableHeader.SetSortMode(SourceGrid.CellContext,DevAge.Drawing.HeaderSortStyle)">
      <summary>
            Set the current sort mode
            </summary>
      <param name="cellContext">
      </param>
      <param name="pStyle">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle)">
      <summary>
            Constructor
            </summary>
      <param name="p_Style">Status of current sort.</param>
    </member>
    <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle,System.Collections.IComparer)">
      <summary>
            Constructor
            </summary>
      <param name="p_Style">Status of current sort.</param>
      <param name="p_Comparer">Comparer used to sort the column. The comparer will take 2 Cell. If null the default ValueCellComparer is used.</param>
    </member>
    <member name="T:SourceGrid.Cells.Models.IToolTipText">
      <summary>
            Interface for informations about a tooltiptext
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.IToolTipText.GetToolTipText(SourceGrid.CellContext)">
      <summary>
            Get the tooltiptext of the specified cell
            </summary>
      <param name="cellContext">
      </param>
    </member>
    <member name="T:SourceGrid.Cells.Models.ModelContainer">
      <summary>
            A container for the model classes. THe only required model is the Value model, that you can assign using the ValueModel property.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Models.ModelContainer.ModelList">
      <summary>
            A collection of elements of type IModel
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.ModelContainer.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.ModelContainer.FindModel(System.Type)">
      <summary>
            Returns null if not exist
            </summary>
      <param name="modelType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.NullValueModel.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Models.ValueModel">
      <summary>
            A model that contains the value of cell. Usually used for a Real Cell or cells with a static text.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.ValueModel.#ctor(System.Object)">
      <summary>
      </summary>
      <param name="val">value to set for this model</param>
    </member>
    <member name="M:SourceGrid.Cells.Models.ValueModel.SetValue(SourceGrid.CellContext,System.Object)">
      <summary>
      </summary>
      <param name="cellContext">
      </param>
      <param name="newValue">new value of this model</param>
    </member>
    <member name="T:SourceGrid.Cells.Models.CheckBox">
      <summary>
            CheckBox model.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.CheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
      <summary>
            Constructor
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.CheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
      <summary>
            Set the checked value
            </summary>
      <param name="cellContext">
      </param>
      <param name="pChecked">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.Image.GetImage(SourceGrid.CellContext)">
      <summary>
            Get the image of the specified cell. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Models.ValueImage">
      <summary>
            Model that implements the IImage interface, used to read the Image directly from the Value of the cell.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.InsertString(SourceGrid.CellContext,System.String)">
      <summary>
            Insert a string at the selection
            </summary>
      <param name="cellContext">
      </param>
      <param name="s">String to insert</param>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionEffect(SourceGrid.CellContext,DevAge.Windows.Forms.EffectType)">
      <summary>
            Sets the effect of the selected text.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionFont(SourceGrid.CellContext,System.Drawing.Font)">
      <summary>
            Change the font of the selected text.
            </summary>
      <param name="cellContext">
      </param>
      <param name="font">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionFont(SourceGrid.CellContext)">
      <summary>
            Get font of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionColor(SourceGrid.CellContext,System.Drawing.Color)">
      <summary>
            Change the font of the selected text.
            </summary>
      <param name="cellContext">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionColor(SourceGrid.CellContext)">
      <summary>
            Get font of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionCharOffset(SourceGrid.CellContext)">
      <summary>
            Get char offset of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionCharOffset(SourceGrid.CellContext,System.Int32)">
      <summary>
            Change char offset of the selected text.
            </summary>
      <param name="cellContext">
      </param>
      <param name="charoffset">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionAlignment(SourceGrid.CellContext,System.Windows.Forms.HorizontalAlignment)">
      <summary>
            Set horizontal alignment of selected text.
            </summary>
      <param name="cellContext">
      </param>
      <param name="horAlignment">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionAlignment(SourceGrid.CellContext)">
      <summary>
            Get horizontal alignment of current selection
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Models.RichTextBox.GetRichTextBoxControl(SourceGrid.CellContext)">
      <summary>
            Get real RichTextBox Control
            </summary>
      <param name="cellContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Virtual.RichTextBox">
      <summary>
            A Cell with a RichTextBox. This Cell is of type RichText.
            Abstract, you must override GetValue and SetValue.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Virtual.RichTextBox.#ctor">
      <summary>
            Constructor of a RichTextBox style cell. You must st a valid Model to use this type of cell with this constructor.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.RichTextBox">
      <summary>
            A Cell with a RichTextBox. This Cell is of type string.
            View: Views.RichTextBox.Default 
            Model: Models.RichTextBox 
            Controllers: Controllers.RichTextBox.Default
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.#ctor">
      <summary>
            Default constrcutor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.#ctor(DevAge.Windows.Forms.RichText)">
      <summary>
            Value constrcutor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionBold">
      <summary>
            Change SelectionFont to bold respectively not bold if already set.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionItalic">
      <summary>
            Change SelectionFont to italic respectively not italic if already set.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionUnderline">
      <summary>
            Change SelectionFont to underline respectively not underline if already set.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.InsertString(System.String)">
      <summary>
            Insert a string at the selection
            </summary>
      <param name="s">String to insert</param>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionSuperScript">
      <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionNormalScript">
      <summary>
            Change SelectionEffectType to normal.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionSubScript">
      <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.RichTextBox.SelectionNormal">
      <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.RichTextBox.RichTextBoxModel">
      <summary>
            Get RichTextBoxModel
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.RichTextBox.SelectionFont">
      <summary>
            Font of current selection
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.RichTextBox.SelectionColor">
      <summary>
            Color of current selection
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.RichTextBox.SelectionCharOffset">
      <summary>
            CharOffset of current selection
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.RichTextBox.SelectionAlignment">
      <summary>
            Alignment of current selection
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.IView">
      <summary>
            A interface that represents the visual aspect of a cell. Contains the Draw method and the common properties
            Support a deep cloning.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.IView.GetDrawingFont(SourceGrid.GridVirtual)">
      <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
      <param name="grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Views.IView.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the cell specified
            </summary>
      <param name="cellContext">
      </param>
      <param name="graphics">Paint arguments</param>
      <param name="rectangle">Rectangle where draw the current cell</param>
    </member>
    <member name="M:SourceGrid.Cells.Views.IView.Measure(SourceGrid.CellContext,System.Drawing.Size)">
      <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.IView.WordWrap">
      <summary>
            Word Wrap.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.IView.TextAlignment">
      <summary>
            Text Alignment.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.IView.Border">
      <summary>
            The normal border of a cell. Usually it is an instance of a DevAge.Drawing.RectangleBorder structure
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.IView.BackColor">
      <summary>
            The BackColor of a cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.IView.ForeColor">
      <summary>
            The ForeColor of a cell
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.ViewBase">
      <summary>
            Base abstract class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.ViewBase.DefaultBorder">
      <summary>
            A default RectangleBorder instance with a 1 pixed LightGray border on bottom and right side
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor(SourceGrid.Cells.Views.ViewBase)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.GetDrawingFont(SourceGrid.GridVirtual)">
      <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
      <param name="grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
      <summary>
            Draw the cell specified
            </summary>
      <param name="cellContext">
      </param>
      <param name="graphics">Paint arguments</param>
      <param name="rectangle">Rectangle where draw the current cell</param>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.PrepareView(SourceGrid.CellContext)">
      <summary>
            Prepare the current View before drawing. Override this method for customize the specials VisualModel that you need to create. Always calls the base PrepareView.
            </summary>
      <param name="context">Current context. Cell to draw. This property is set before drawing. Only inside the PrepareView you can access this property.</param>
    </member>
    <member name="M:SourceGrid.Cells.Views.ViewBase.Measure(SourceGrid.CellContext,System.Drawing.Size)">
      <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
      <param name="cellContext">
      </param>
      <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.ImageStretch">
      <summary>
            True to stretch the image to all the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.ImageAlignment">
      <summary>
            Image Alignment
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.Font">
      <summary>
            If null the grid font is used
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.ForeColor">
      <summary>
            ForeColor of the cell
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.WordWrap">
      <summary>
            Word Wrap, default false.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.TrimmingMode">
      <summary>
            TrimmingMode, default Char.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.TextAlignment">
      <summary>
            Text Alignment.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.BackColor">
      <summary>
            Returns the color of the Background. If the Background it isn't an instance of BackgroundSolid then returns DefaultBackColor
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.Border">
      <summary>
            The border of the Cell. Usually it is an instance of the DevAge.Drawing.RectangleBorder structure.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.Padding">
      <summary>
            The padding of the cell. Usually it is 2 pixel on all sides.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.ElementsDrawMode">
      <summary>
            Gets or sets a property that specify how to draw the elements.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.ViewBase.Background">
      <summary>
            Background of the cell. Usually it is an instance of BackgroundSolid
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.Cell">
      <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.Cell.Default">
      <summary>
            Represents a default Model
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Cell.#ctor">
      <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Cell.#ctor(SourceGrid.Cells.Views.Cell)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.Cell.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementText(SourceGrid.CellContext)">
      <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementImage(SourceGrid.CellContext)">
      <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.Cell.ElementText">
      <summary>
            Gets or sets the IText visual element used to draw the cell text.
            Default is DevAge.Drawing.VisualElements.TextGDI
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.Cell.ElementImage">
      <summary>
            Gets or sets the IImage visual element used to draw the cell image.
            Default is DevAge.Drawing.VisualElements.Image
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.Button">
      <summary>
            Summary description for a 3D themed Button.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.Button.Default">
      <summary>
            Represents a Button with the ability to draw an Image. Disable also the selection border using the OwnerDrawSelectionBorder = true.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Button.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Button.#ctor(SourceGrid.Cells.Views.Button)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.Button.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Views.CheckBox">
      <summary>
            Summary description for VisualModelCheckBox.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.CheckBox.Default">
      <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.CheckBox.MiddleLeftAlign">
      <summary>
            Represents a CheckBox with the CheckBox image align to the Middle Left of the cell
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor">
      <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor(SourceGrid.Cells.Views.CheckBox)">
      <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.CheckBox.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.CheckBox.CheckBoxAlignment">
      <summary>
            Image Alignment
            </summary>
    </member>
    <member name="P:SourceGrid.Cells.Views.CheckBox.ElementCheckBox">
      <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.Header">
      <summary>
            Summary description for a 3D Header.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.Header.Default">
      <summary>
            Represents a default Header, with a 3D border and a LightGray BackColor
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Header.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Header.#ctor(SourceGrid.Cells.Views.Header)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.Header.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Views.ColumnHeader">
      <summary>
            Summary description for a 3D Header.
            This is a standard header without theme support. Use the ColumnHeaderThemed for theme support.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.ColumnHeader.Default">
      <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor(SourceGrid.Cells.Views.ColumnHeader)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.ColumnHeader.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.ColumnHeader.ElementSort">
      <summary>
            Gets or sets the visual element used to draw the sort indicator. Default is DevAge.Drawing.VisualElements.SortIndicator
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.ComboBox.Default">
      <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor">
      <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor(SourceGrid.Cells.Views.ComboBox)">
      <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.ComboBox.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.ComboBox.ElementDropDown">
      <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.Link">
      <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.Link.Default">
      <summary>
            Represents a model with a link style font and forecolor.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Link.#ctor">
      <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.Link.#ctor(SourceGrid.Cells.Views.Link)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.Link.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Cells.Views.MultiImages">
      <summary>
            Summary description for VisualModelCheckBox.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor(SourceGrid.Cells.Views.MultiImages)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.MultiImages.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.MultiImages.SubImages">
      <summary>
            Images of the cells
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.RichTextBox.Default">
      <summary>
            Represents a rich text box
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.RichTextBox.m_RotateFlipType">
      <summary>
            Rotate flip type
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.RichTextBox.#ctor">
      <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.RichTextBox.#ctor(SourceGrid.Cells.Views.RichTextBox)">
      <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.RichTextBox.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Cells.Views.RichTextBox.ElementRichText">
      <summary>
            Gets or sets the IText visual element used to draw the cell rich text.
            </summary>
    </member>
    <member name="T:SourceGrid.Cells.Views.RowHeader">
      <summary>
            Summary description for a 3D themed Header.
            </summary>
    </member>
    <member name="F:SourceGrid.Cells.Views.RowHeader.Default">
      <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor">
      <summary>
            Use default setting
            </summary>
    </member>
    <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor(SourceGrid.Cells.Views.RowHeader)">
      <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <param name="p_Source">
      </param>
    </member>
    <member name="M:SourceGrid.Cells.Views.RowHeader.Clone">
      <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.ColumnsSimpleBase">
      <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
    </member>
    <member name="T:SourceGrid.GridSelectionMode">
      <summary>
            Selection Mode
            </summary>
    </member>
    <member name="T:SourceGrid.ContextMenuStyle">
      <summary>
            ContextMenuStyle (Flags)
            </summary>
    </member>
    <member name="T:SourceGrid.EditableMode">
      <summary>
            EditableMode Cell mode (Flags)
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.None">
      <summary>
            No edit support
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.F2Key">
      <summary>
            Edit the cell with F2 key ( 1 )
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.DoubleClick">
      <summary>
            Edit the cell with a double click (2)
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.SingleClick">
      <summary>
            Edit a cell with a single Key (4)
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.AnyKey">
      <summary>
            Edit the cell pressing any keys (8 + F2Key)
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.Focus">
      <summary>
            Edit the cell when it receive the focus (16)
            </summary>
    </member>
    <member name="F:SourceGrid.EditableMode.Default">
      <summary>
            DoubleClick + F2Key
            </summary>
    </member>
    <member name="T:SourceGrid.CellResizeMode">
      <summary>
            Type of resize of the cells (Flags)
            </summary>
    </member>
    <member name="T:SourceGrid.GridSpecialKeys">
      <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. (Flags)
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.None">
      <summary>
            No keys
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Arrows">
      <summary>
            Arrows keys, for moving focus cell operation
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Tab">
      <summary>
            Tab and Shift+Tab keys, for moving focus cell operation
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.PageDownUp">
      <summary>
            PageDown and PageUp keys, for page operation
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Enter">
      <summary>
            Enter key, for apply editing operation
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Escape">
      <summary>
            Escape key, for cancel editing operation
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Control">
      <summary>
            Control key, for selection operations. Enables the selection of non adjacent cells
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Shift">
      <summary>
            Shift key, for selection operations. Enables the selection of the range from the focused cell to the selected cells.
            </summary>
    </member>
    <member name="F:SourceGrid.GridSpecialKeys.Default">
      <summary>
            Default: Arrows|Tab|PageDownUp|Enter|Escape|Control|Shift
            </summary>
    </member>
    <member name="T:SourceGrid.CellPositionType">
      <summary>
            Position type of the cell. Look at the .vsd diagram for details.
            </summary>
    </member>
    <member name="F:SourceGrid.CellPositionType.Empty">
      <summary>
            Empty Cell
            </summary>
    </member>
    <member name="F:SourceGrid.CellPositionType.FixedTopLeft">
      <summary>
            Fixed Top+Left Cell
            </summary>
    </member>
    <member name="F:SourceGrid.CellPositionType.FixedTop">
      <summary>
            Fixed Top Cell
            </summary>
    </member>
    <member name="F:SourceGrid.CellPositionType.FixedLeft">
      <summary>
            Fixed Left cell
            </summary>
    </member>
    <member name="F:SourceGrid.CellPositionType.Scrollable">
      <summary>
            Scrollable Cell
            </summary>
    </member>
    <member name="T:SourceGrid.SelectionChangeEventType">
      <summary>
            SelectionChangeEventType
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionChangeEventType.Add">
      <summary>
            Add
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionChangeEventType.Remove">
      <summary>
            Remove
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionChangeEventType.Clear">
      <summary>
            Clear
            </summary>
    </member>
    <member name="T:SourceGrid.FocusStyle">
      <summary>
            FocusStyle (Flags). Used to customize the style of the focus.
            </summary>
    </member>
    <member name="F:SourceGrid.FocusStyle.RemoveFocusCellOnLeave">
      <summary>
            Remove the focus cell when the grid lost the focus
            </summary>
    </member>
    <member name="F:SourceGrid.FocusStyle.RemoveSelectionOnLeave">
      <summary>
            Remove the selection when the grid lost the focus
            </summary>
    </member>
    <member name="F:SourceGrid.FocusStyle.FocusFirstCellOnEnter">
      <summary>
            Set the focus on the first cell when the grid receive the focus and there isnt' an active cell. Use the FocusFirstCell method.
            </summary>
    </member>
    <member name="F:SourceGrid.FocusStyle.Default">
      <summary>
            The default value for this flags: FocusStyle.FocusFirstCellOnEnter | FocusStyle.RemoveFocusCellOnLeave
            </summary>
    </member>
    <member name="T:SourceGrid.AutoSizeMode">
      <summary>
            AutoSizeMode (Flags)
            </summary>
    </member>
    <member name="F:SourceGrid.AutoSizeMode.EnableAutoSize">
      <summary>
            Enable the AutoSize
            </summary>
    </member>
    <member name="F:SourceGrid.AutoSizeMode.EnableAutoSizeView">
      <summary>
            Enable the AutoSize only for visible view
            </summary>
    </member>
    <member name="F:SourceGrid.AutoSizeMode.EnableStretch">
      <summary>
            Enable Stretch operation
            </summary>
    </member>
    <member name="F:SourceGrid.AutoSizeMode.MinimumSize">
      <summary>
            If this flag is selected the Measure function returns always the minimum column/row size and don't calculate the real required size. This flag can be used to don't consider the content of a column/row
            </summary>
    </member>
    <member name="F:SourceGrid.AutoSizeMode.Default">
      <summary>
            Default: EnableAutoSize, EnableStretch
            </summary>
    </member>
    <member name="T:SourceGrid.SelectionBorderMode">
      <summary>
            SelectionBorderMode. Used with Grid.Selection.BorderMode property
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionBorderMode.None">
      <summary>
            Don't draw a border around each selection range
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionBorderMode.FocusRange">
      <summary>
            Draw a border around the range that contains the focus.
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionBorderMode.FocusCell">
      <summary>
            Draw a border around the focusl cell
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionBorderMode.UniqueRange">
      <summary>
            Draw a border around the selection range only is there is only one range selected
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionBorderMode.Auto">
      <summary>
            Like the UniqueRange enum but when there is more then one range set the range only on the FocusCell
            </summary>
    </member>
    <member name="T:SourceGrid.SelectionMaskStyle">
      <summary>
            SelectionmaskStyle, used to customize the visual style of the selection mask. (Flags)
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionMaskStyle.None">
      <summary>
            None. No special flags
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionMaskStyle.DrawOnlyInitializedCells">
      <summary>
            Used to draw only initialized cells. If you have uninitialized cell (you don't create a cell for a specific position: grid[0,0] = null;) the selection mask is not drawed on this cell. Consider that with this flags the drawing method is more complex and slow.If you use this flag the border can only be set to FocusCell or None.
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionMaskStyle.DrawSeletionOverCells">
      <summary>
            Used to draw the selection over the the cells, usually used with a transparent backcolor drawed over the normal cell. If not set, each cells (View) draw the selection or focus backcolor inside the normal drawing code.
            </summary>
    </member>
    <member name="F:SourceGrid.SelectionMaskStyle.Default">
      <summary>
            Default value: None
            </summary>
    </member>
    <member name="T:SourceGrid.CutMode">
      <summary>
            Enum used to specify the cut operation style. Used with the RangeData class.
            </summary>
    </member>
    <member name="F:SourceGrid.CutMode.None">
      <summary>
            Cut disabled.
            </summary>
    </member>
    <member name="F:SourceGrid.CutMode.CutOnPaste">
      <summary>
            Cut enabled, the data are removed from the source only when pasting it on the destination. Used usually with the drag and drop operations.
            </summary>
    </member>
    <member name="F:SourceGrid.CutMode.CutImmediately">
      <summary>
            Cut enabled, the data are removed immediately when cutting the data source.
            </summary>
    </member>
    <member name="T:SourceGrid.TrimmingMode">
      <summary>
            String trimming mode
            </summary>
    </member>
    <member name="F:SourceGrid.ClipboardMode.Copy">
      <summary>
            Copy using Ctrl+C
            </summary>
    </member>
    <member name="F:SourceGrid.ClipboardMode.Cut">
      <summary>
            Cut using Ctrl+X
            </summary>
    </member>
    <member name="F:SourceGrid.ClipboardMode.Paste">
      <summary>
            Paste using Ctrl+V
            </summary>
    </member>
    <member name="F:SourceGrid.ClipboardMode.Delete">
      <summary>
            Delete using Del key
            </summary>
    </member>
    <member name="T:SourceGrid.CellOptimizeMode">
      <summary>
            Optimize mode used when constructing the grid control.
            </summary>
    </member>
    <member name="F:SourceGrid.CellOptimizeMode.ForRows">
      <summary>
            Optimize the grid for many rows
            </summary>
    </member>
    <member name="F:SourceGrid.CellOptimizeMode.ForColumns">
      <summary>
            Optimize the grid for many columns
            </summary>
    </member>
    <member name="T:SourceGrid.RowEventArgs">
      <summary>
            EventArgs used by the FocusRowEnter
            </summary>
    </member>
    <member name="M:SourceGrid.RowEventArgs.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="pRow">
      </param>
    </member>
    <member name="P:SourceGrid.RowEventArgs.Row">
      <summary>
            Row
            </summary>
    </member>
    <member name="T:SourceGrid.RowEventHandler">
      <summary>
            EventHandler used by the FocusRowEnter
            </summary>
    </member>
    <member name="T:SourceGrid.RowCancelEventArgs">
      <summary>
            EventArgs used by the FocusRowLeaving
            </summary>
    </member>
    <member name="M:SourceGrid.RowCancelEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:SourceGrid.RowCancelEventArgs.Cancel">
      <summary>
            Row
            </summary>
    </member>
    <member name="P:SourceGrid.RowCancelEventArgs.ProposedRow">
      <summary>
            Proposed row
            </summary>
    </member>
    <member name="T:SourceGrid.RowCancelEventHandler">
      <summary>
            EventHandler used by the FocusRowLeaving
            </summary>
    </member>
    <member name="T:SourceGrid.ColumnEventArgs">
      <summary>
            EventArgs used by the FocusColumnEnter
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnEventArgs.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="pColumn">
      </param>
    </member>
    <member name="P:SourceGrid.ColumnEventArgs.Column">
      <summary>
            Column
            </summary>
    </member>
    <member name="T:SourceGrid.ColumnEventHandler">
      <summary>
            EventHandled used by the FocusColumnEnter
            </summary>
    </member>
    <member name="T:SourceGrid.ColumnCancelEventArgs">
      <summary>
            EventArgs used by the FocusColumnLeaving
            </summary>
    </member>
    <member name="M:SourceGrid.ColumnCancelEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnCancelEventArgs.Cancel">
      <summary>
            Column
            </summary>
    </member>
    <member name="P:SourceGrid.ColumnCancelEventArgs.ProposedColumn">
      <summary>
            Proposed column
            </summary>
    </member>
    <member name="T:SourceGrid.ColumnCancelEventHandler">
      <summary>
            EventHandled used by the FocusColumnLeave and FocusColumnEnter
            </summary>
    </member>
    <member name="T:SourceGrid.ChangeActivePositionEventArgs">
      <summary>
            Cell Lost Focus event arguments with the old position and the new position. Extends PositionCancelEventArgs.
            </summary>
    </member>
    <member name="M:SourceGrid.ChangeActivePositionEventArgs.#ctor(SourceGrid.Position,SourceGrid.Position)">
      <summary>
            Constructor
            </summary>
      <param name="pOldFocusPosition">
      </param>
      <param name="pNewFocusPosition">If Empty there isn't a cell that will receive the focus.</param>
    </member>
    <member name="P:SourceGrid.ChangeActivePositionEventArgs.OldFocusPosition">
      <summary>
            Position that had the focus
            </summary>
    </member>
    <member name="P:SourceGrid.ChangeActivePositionEventArgs.NewFocusPosition">
      <summary>
            Position that will receive the focus. If Empty there isn't a cell that will receive the focus.
            </summary>
    </member>
    <member name="T:SourceGrid.RangeRegionChangedEventArgs">
      <summary>
            Represents the event arguments used when changing a RangeRegion class (like the selection class).
            </summary>
    </member>
    <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Constructor
            </summary>
      <param name="addedRange">
      </param>
      <param name="removedRange">
      </param>
    </member>
    <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.RangeRegion,SourceGrid.RangeRegion)">
      <summary>
            Constructor
            </summary>
      <param name="addedRange">Use null if the added range is empty</param>
      <param name="removedRange">Use null if the removed range is empty</param>
    </member>
    <member name="P:SourceGrid.RangeRegionChangedEventArgs.AddedRange">
      <summary>
            Null if the added range is empty
            </summary>
    </member>
    <member name="P:SourceGrid.RangeRegionChangedEventArgs.RemovedRange">
      <summary>
            Null if the removed range is empty
            </summary>
    </member>
    <member name="M:SourceGrid.IHiddenRowCoordinator.LoopVisibleRows(System.Int32,System.Int32)">
      <summary>
            Returns a sequence of row indexes which are visible only.
            Correctly handles invisible rows.
            </summary>
      <param name="rowIndex">
      </param>
      <param name="numberOfRowsToProduce">How many visible rows to return</param>
      <returns>Can return less rows than requested. This might occur
            if you request to return visible rows in the end of the grid,
            and all the rows would be hidden. In that case no indexes would be returned
            at all, even though specific amount of rows was requested</returns>
    </member>
    <member name="M:SourceGrid.IHiddenRowCoordinator.ConvertScrollbarValueToRowIndex(System.Int32)">
      <summary>
      </summary>
      <param name="scrollBarValue">The value of the vertical scroll bar. Note that
            this does not directly relate to row number. If there are no hidden rows at all,
            then scroll bar value directly relates to row index number. However,
            if some rows are hidden, then this value is different.
            Basically, it says how many visible rows must be scrolled down</param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.LinkedControlsList">
      <summary>
            A dictionary with keys of type Control and values of type LinkedControlValue
            </summary>
    </member>
    <member name="T:SourceGrid.LinkedControlScrollMode">
      <summary>
            Determine the scrolling mode of the linked controls.
            </summary>
    </member>
    <member name="T:SourceGrid.LinkedControlValue">
      <summary>
            Linked control value
            </summary>
    </member>
    <member name="M:SourceGrid.LinkedControlValue.#ctor(System.Windows.Forms.Control,SourceGrid.Position)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.LinkedControlValue.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.LinkedControlValue.Position">
      <summary>
            Gets or sets the position of the linked control.
            </summary>
    </member>
    <member name="P:SourceGrid.LinkedControlValue.UseCellBorder">
      <summary>
            Gets or sets if show the cell border. True to insert the editor control inside the border of the cell, false to put the editor control over the entire cell. If you use true remember to set EnableCellDrawOnEdit == true.
            </summary>
    </member>
    <member name="P:SourceGrid.LinkedControlValue.ScrollMode">
      <summary>
            Gets or sets the scrolling mode of the control.
            </summary>
    </member>
    <member name="T:SourceGrid.Position">
      <summary>
            Represents a cell position (Row, Col). Once created connot be modified
            </summary>
    </member>
    <member name="F:SourceGrid.Position.c_EmptyIndex">
      <summary>
            An empty index constant
            </summary>
    </member>
    <member name="F:SourceGrid.Position.Empty">
      <summary>
            Empty position
            </summary>
    </member>
    <member name="M:SourceGrid.Position.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="row">
      </param>
      <param name="col">
      </param>
    </member>
    <member name="M:SourceGrid.Position.IsEmpty">
      <summary>
            Returns true if the current struct is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.GetHashCode">
      <summary>
            GetHashCode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.Equals(SourceGrid.Position)">
      <summary>
      </summary>
      <param name="p_Position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.op_Equality(SourceGrid.Position,SourceGrid.Position)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.op_Inequality(SourceGrid.Position,SourceGrid.Position)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.Min(SourceGrid.Position,SourceGrid.Position)">
      <summary>
            Returns a position with the smaller Row and the smaller column
            </summary>
      <param name="p_Position1">
      </param>
      <param name="p_Position2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Position.Max(SourceGrid.Position,SourceGrid.Position)">
      <summary>
            Returns a position with the bigger Row and the bigger column
            </summary>
      <param name="p_Position1">
      </param>
      <param name="p_Position2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Position.Row">
      <summary>
            Row
            </summary>
    </member>
    <member name="P:SourceGrid.Position.Column">
      <summary>
            Column
            </summary>
    </member>
    <member name="T:SourceGrid.PositionCollection">
      <summary>
            A collection of elements of type Position
            </summary>
    </member>
    <member name="T:SourceGrid.Range">
      <summary>
            Represents a range of cells. Once created cannot be modified. This Range has always Start in the Top-Left, and End in the Bottom-Right (see Normalize method).
            </summary>
    </member>
    <member name="F:SourceGrid.Range.Empty">
      <summary>
            Represents an empty range
            </summary>
    </member>
    <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position,SourceGrid.Position)">
      <summary>
            Constructor
            </summary>
      <param name="p_Start">
      </param>
      <param name="p_End">
      </param>
    </member>
    <member name="M:SourceGrid.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="p_StartRow">
      </param>
      <param name="p_StartCol">
      </param>
      <param name="p_EndRow">
      </param>
      <param name="p_EndCol">
      </param>
    </member>
    <member name="M:SourceGrid.Range.MoveTo(SourceGrid.Position)">
      <summary>
            Move the current range to the specified position, leaving the current ColumnsCount and RowsCount
            </summary>
      <param name="p_StartPosition">
      </param>
    </member>
    <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position)">
      <summary>
            Construct a Range of a single cell
            </summary>
      <param name="p_SinglePosition">
      </param>
    </member>
    <member name="M:SourceGrid.Range.Normalize">
      <summary>
            Check and fix the range to always have Start smaller than End
            </summary>
    </member>
    <member name="M:SourceGrid.Range.ContainsRow(System.Int32)">
      <summary>
            Returns true if the specified row is present in the current range.
            </summary>
      <param name="p_Row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.ContainsColumn(System.Int32)">
      <summary>
            Returns true if the specified column is present in the current range.
            </summary>
      <param name="p_Col">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Contains(SourceGrid.Position)">
      <summary>
            Returns true if the specified cell position is present in the current range.
            </summary>
      <param name="p_Position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Contains(SourceGrid.Range)">
      <summary>
            Returns true if the specified range is present in the current range.
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.IsEmpty">
      <summary>
            Determines if the current range is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.op_Equality(SourceGrid.Range,SourceGrid.Range)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.op_Inequality(SourceGrid.Range,SourceGrid.Range)">
      <summary>
      </summary>
      <param name="Left">
      </param>
      <param name="Right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Equals(SourceGrid.Range)">
      <summary>
      </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.GetCellsPositions">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Union(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
      <param name="p_Range1">
      </param>
      <param name="p_Range2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.GetBounds(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
      <param name="p_Range1">
      </param>
      <param name="p_Range2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
      <param name="p_Range1">
      </param>
      <param name="p_Range2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range)">
      <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
      <param name="p_Range1">
      </param>
      <param name="p_Range2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range)">
      <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Range.Exclude(SourceGrid.Range)">
      <summary>
            Return all the cells that don't intersect with the specified cells. (Remove the specified cells from the current cells ad returns the remaining cells)
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Range.ColumnsCount">
      <summary>
            Sets or Gets the columns count (End.Column-Start.Column)
            </summary>
    </member>
    <member name="P:SourceGrid.Range.RowsCount">
      <summary>
            Sets or Gets the rows count (End.Row-Start.Row)
            </summary>
    </member>
    <member name="T:SourceGrid.IRangeLoader">
      <summary>
            Interface that rappresent a range of the grid. (RangeFullGridNoFixedRows, RangeFullGridNoFixedCols, RangeFixedRows, RangeFixedCols, Range)
            This class is used to calculate a real Range structure at runtime.
            </summary>
    </member>
    <member name="M:SourceGrid.IRangeLoader.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Rectangle that contains the range.
            </summary>
    </member>
    <member name="T:SourceGrid.RangeFullGrid">
      <summary>
            Represents a range that contains all the grid
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGrid.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGrid.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeFullGridNoFixedRows">
      <summary>
            Represents a range that contains all the grid with no fixed rows
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGridNoFixedRows.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGridNoFixedRows.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeFullGridNoFixedCols">
      <summary>
            Represents a range that contains all the grid with no fixed cols
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGridNoFixedCols.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFullGridNoFixedCols.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeFixedRows">
      <summary>
            Represents a range that contains only fixed rows
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFixedRows.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFixedRows.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeFixedCols">
      <summary>
            Represents a range that contains only fixed cols
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFixedCols.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeFixedCols.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeLoader">
      <summary>
            Range custom
            </summary>
    </member>
    <member name="M:SourceGrid.RangeLoader.#ctor(SourceGrid.Range)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeLoader.GetRange(SourceGrid.GridVirtual)">
      <summary>
            Returns the Range struct from the specific instance
            </summary>
      <param name="p_Grid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.RangeLoader.Range">
      <summary>
            Gets or sets the Range loaded in the class.
            </summary>
    </member>
    <member name="T:SourceGrid.RangeCollection">
      <summary>
            A collection of elements of type Range
            </summary>
    </member>
    <member name="M:SourceGrid.RangeCollection.ContainsCell(SourceGrid.Position)">
      <summary>
            Returns true if the specified cell position is present in any range in the current collection.
            </summary>
      <param name="p_Position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RangeData">
      <summary>
            RangeData class represents a range of data. Can represent a range of data in string format. Usually used for drag and drop and clipboard copy/paste operations.
            See Controllers\Clipboard, Controllers\SelectionDrag and Controllers\SelectionDrop.
            </summary>
    </member>
    <member name="F:SourceGrid.RangeData.RANGEDATA_FORMAT">
      <summary>
            The string constant used with the System.Windows.Forms.DataFormats.GetFormat to register the clipboard format RangeData object.
            </summary>
    </member>
    <member name="M:SourceGrid.RangeData.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.RangeData.LoadData(SourceGrid.GridVirtual,SourceGrid.Range,SourceGrid.CutMode)">
      <summary>
            Load the specified range data into a string array. This method use the cell editor to get the value.
            </summary>
      <param name="sourceGrid">
      </param>
      <param name="sourceRange">
      </param>
      <param name="cutMode">Cut mode. Can be used to remove the data from the source when pasting it to the destination or immediately.</param>
    </member>
    <member name="M:SourceGrid.RangeData.LoadData(System.String)">
      <summary>
            Load the data from a Tab delimited string of data. Each column is separated by a Tab and each row by a LineFeed character.
            </summary>
    </member>
    <member name="M:SourceGrid.RangeData.WriteData(SourceGrid.GridVirtual,SourceGrid.Position)">
      <summary>
            Write the current loaded array string in the specified grid range. This method use the cell editor to set the value.
            </summary>
    </member>
    <member name="M:SourceGrid.RangeData.DataToStringArray(SourceGrid.GridVirtual,SourceGrid.Range)">
      <summary>
            Convert a range and an array of string into a string. Normally using a tab delimited for columns and a LineFeed for rows.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeData.FindDestinationRange(SourceGrid.GridVirtual,SourceGrid.Position)">
      <summary>
            Calculate the destination range for the drop or paste operations.
            </summary>
      <param name="destinationGrid">
      </param>
      <param name="dropDestination">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeData.ClipboardSetData(SourceGrid.RangeData)">
      <summary>
            Copy the specified RangeData object the the clipboard
            </summary>
      <param name="rangeData">
      </param>
    </member>
    <member name="M:SourceGrid.RangeData.ClipboardGetData">
      <summary>
            Get a RangeData object from the clipboard. Return null if the clipboard doesn't contains valid data formats.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.RangeData.SourceRange">
      <summary>
            Range source
            </summary>
    </member>
    <member name="P:SourceGrid.RangeData.SourceValues">
      <summary>
            String array for values.
            </summary>
    </member>
    <member name="P:SourceGrid.RangeData.StartDragPosition">
      <summary>
            Starting drag position. Used only for calculating drop destination range.
            </summary>
    </member>
    <member name="P:SourceGrid.RangeData.SourceGrid">
      <summary>
            Working grid.
            </summary>
    </member>
    <member name="P:SourceGrid.RangeData.CutMode">
      <summary>
            Cut mode. Default is none.
            </summary>
    </member>
    <member name="T:SourceGrid.RangeRegion">
      <summary>
            RangeRegion is a collection of range that are never overlying each other.
            </summary>
    </member>
    <member name="F:SourceGrid.RangeRegion.m_bValidated">
      <summary>
            Variabile che indica se lo stato interno della classe ?stato modificato, serve per poter ottimizzare alcune verifiche.
            </summary>
    </member>
    <member name="M:SourceGrid.RangeRegion.#ctor(SourceGrid.RangeRegion)">
      <summary>
            Copy constructor
            </summary>
      <param name="other">
      </param>
    </member>
    <member name="M:SourceGrid.RangeRegion.GetCellsPositions">
      <summary>
            Returns a Collection of cells that represents the current class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.GetRowsIndex">
      <summary>
            Returns all the selected rows index
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.GetColumnsIndex">
      <summary>
            Returns all the selected columns index
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Position)">
      <summary>
            Indicates if the specified cell is selected
            </summary>
      <param name="p_Cell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Range)">
      <summary>
            Indicates if the specified range of cells is selected
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.RangeRegion)">
      <summary>
            Indicates if the specified range of cells is selected
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.ContainsRow(System.Int32)">
      <summary>
            Indicates if the specified row is selected
            </summary>
      <param name="p_Row">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.ContainsColumn(System.Int32)">
      <summary>
            Indicates if the specified column is selected
            </summary>
      <param name="p_Column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.IntersectsWith(SourceGrid.Range)">
      <summary>
            Indicates if the specified range of cells is selected
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Intersect(SourceGrid.Range)">
      <summary>
            Returns a non contiguous range of cells of the intersection between the current range and the specified range.
            </summary>
      <param name="p_Range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Exclude(SourceGrid.Range)">
      <summary>
            Returns the cells of the current range that don't intersect with the specified range
            </summary>
      <param name="pRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Clear">
      <summary>
            Remove all the cells
            </summary>
    </member>
    <member name="M:SourceGrid.RangeRegion.Clear(SourceGrid.Range)">
      <summary>
            Remove all the cells excluse the specified range
            </summary>
      <param name="pRangeToLeave">
      </param>
    </member>
    <member name="M:SourceGrid.RangeRegion.ResetRange">
      <summary>
            Reset the object to its original state. It is similar to the Clear method but doesn't call any events when removeing the saved positions, usually used when refreshing the cells with new data.
            To simply clear the object use the Clear method, only use this method when you want to force a reset of the object without calling additional methods.
            </summary>
    </member>
    <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Position)">
      <summary>
            Add the specified cell and add the cell to the collection.
            </summary>
      <param name="pCell">
      </param>
      <returns>Returns true if sucesfully added</returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Position)">
      <summary>
            Remove from the collection the specified cell
            </summary>
      <param name="pCell">
      </param>
      <returns>Returns true if sucesfully removed</returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Range)">
      <summary>
            Add the specified Range of cells
            </summary>
      <param name="pRange">
      </param>
      <returns>Returns true if sucesfully added</returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Range)">
      <summary>
            Remove from the collection the specified range of cells
            </summary>
      <param name="pRange">
      </param>
      <returns>Returns true if sucesfully removed</returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.RangeRegion)">
      <summary>
            Add the specified ranges of cells
            </summary>
      <param name="pRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.RangeRegion)">
      <summary>
            Remove the specified ranges of cells
            </summary>
      <param name="pRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.InternalAdd(SourceGrid.RangeRegion)">
      <summary>
            Prende un range che ?gi?stato filtrato con solo le celle non presenti nell'attuale range
            </summary>
      <param name="pRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RangeRegion.InternalRemove(SourceGrid.RangeRegion)">
      <summary>
            Prende un range che ?gi?stato filtrato con solo le celle presenti nell'attuale range
            </summary>
      <param name="pRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.RangeRegion.Item(System.Int32)">
      <summary>
            Returns the range at the specific position
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.RowInfo">
      <summary>
            Row Information
            </summary>
    </member>
    <member name="M:SourceGrid.RowInfo.#ctor(SourceGrid.GridVirtual)">
      <summary>
            Constructor
            </summary>
      <param name="p_Grid">
      </param>
    </member>
    <member name="P:SourceGrid.RowInfo.Height">
      <summary>
            Height of the current row
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfo.Index">
      <summary>
            Index of the current row
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfo.Grid">
      <summary>
            Attached Grid
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfo.Tag">
      <summary>
            A property that the user can use to insert custom informations associated to a specific row
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfo.AutoSizeMode">
      <summary>
            Flags for autosize and stretch
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfo.Visible">
      <summary>
            Gets or sets if the row is visible.
            Internally set the height to 0 to hide a row.
            </summary>
    </member>
    <member name="T:SourceGrid.RowInfoCollection">
      <summary>
            Collection of RowInfo
            </summary>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.#ctor(SourceGrid.GridVirtual)">
      <summary>
            Constructor
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.IsValidRange(System.Int32,System.Int32)">
      <summary>
            Returns true if the range passed is valid
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
      <summary>
            Returns true if the range passed is valid for insert method
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.InsertRange(System.Int32,SourceGrid.RowInfo[])">
      <summary>
            Insert the specified number of rows at the specified position
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="rows">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.Remove(System.Int32)">
      <summary>
            Remove a row at the speicifed position
            </summary>
      <param name="p_Index">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove the RowInfo at the specified positions
            </summary>
      <param name="p_StartIndex">
      </param>
      <param name="p_Count">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.Move(System.Int32,System.Int32)">
      <summary>
            Move a row from one position to another position
            </summary>
      <param name="p_CurrentRowPosition">
      </param>
      <param name="p_NewRowPosition">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.Swap(System.Int32,System.Int32)">
      <summary>
            Change the position of row 1 with row 2.
            </summary>
      <param name="p_RowIndex1">
      </param>
      <param name="p_RowIndex2">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.OnRowsAdded(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired when the number of rows change
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoved(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired when some rows are removed
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoving(SourceGrid.IndexRangeEventArgs)">
      <summary>
            Fired before some rows are removed
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.OnRowHeightChanged(SourceGrid.RowInfoEventArgs)">
      <summary>
            Execute the RowHeightChanged event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.AutoSizeView">
      <summary>
            Auto size the rows calculating the required size only on the columns currently visible
            </summary>
    </member>
    <member name="M:SourceGrid.RowInfoCollection.Clear">
      <summary>
            Remove all the columns
            </summary>
    </member>
    <member name="P:SourceGrid.RowInfoCollection.Item(System.Int32)">
      <summary>
            Indexer. Returns a RowInfo at the specified position
            </summary>
    </member>
    <member name="E:SourceGrid.RowInfoCollection.RowsAdded">
      <summary>
            Fired when the number of rows change
            </summary>
    </member>
    <member name="E:SourceGrid.RowInfoCollection.RowsRemoved">
      <summary>
            Fired when some rows are removed
            </summary>
    </member>
    <member name="E:SourceGrid.RowInfoCollection.RowsRemoving">
      <summary>
            Fired before some rows are removed
            </summary>
    </member>
    <member name="E:SourceGrid.RowInfoCollection.RowHeightChanged">
      <summary>
            Fired when the user change the Height property of one of the Row
            </summary>
    </member>
    <member name="F:SourceGrid.StandardHiddenRowCoordinator.m_rowMerger">
      <summary>
            This will help us track which rows are hidden, and which are not
            </summary>
    </member>
    <member name="M:SourceGrid.StandardHiddenRowCoordinator.LoopVisibleRows(System.Int32,System.Int32)">
      <summary>
            Returns a sequence of row indexes which are visible only.
            Correctly handles invisible rows.
            </summary>
      <param name="scrollBarValue">The value of the vertical scroll bar. Note that
            this does not directly relate to row number. If there are no hidden rows at all,
            then scroll bar value directly relates to row index number. However,
            if some rows are hidden, then this value is different.
            Basically, it says how many visible rows must be scrolled down</param>
      <param name="numberOfRowsToProduce">How many visible rows to return</param>
      <returns>Can return less rows than requested. This might occur
            if you request to return visible rows in the end of the grid,
            and all the rows would be hidden. In that case no indexes would be returned
            at all, even though specific amount of rows was requested</returns>
    </member>
    <member name="T:SourceGrid.MultiColumnsComparer">
      <summary>
            A comparer used to sort more than one columns.
            </summary>
    </member>
    <member name="T:SourceGrid.DisplayStringCellComparer">
      <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the DisplayString of the cell.
            </summary>
    </member>
    <member name="T:SourceGrid.ValueCellComparer">
      <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the value of the cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Decorators.DecoratorHighlight.Range">
      <summary>
            Gets or sets the range to draw
            </summary>
    </member>
    <member name="T:SourceGrid.Exporter.CSV">
      <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
    </member>
    <member name="T:SourceGrid.Exporter.GridPrintDocument">
      <summary>
            Grid print document.
            </summary>
    </member>
    <member name="P:SourceGrid.Exporter.GridPrintDocument.CellPrintView">
      <summary>
            Cell view when printing.
            </summary>
    </member>
    <member name="P:SourceGrid.Exporter.GridPrintDocument.HeaderCellPrintView">
      <summary>
            Header cell view when printing.
            </summary>
    </member>
    <member name="P:SourceGrid.Exporter.GridPrintDocument.RepeatFixedRows">
      <summary>
            Property if fixed rows should be repeated on each page.
            </summary>
    </member>
    <member name="P:SourceGrid.Exporter.GridPrintDocument.PageCount">
      <summary>
            Return calculated page count.
            </summary>
    </member>
    <member name="T:SourceGrid.Exporter.HTML">
      <summary>
            An utility class to export the grid in a html format file.
            </summary>
    </member>
    <member name="F:SourceGrid.Exporter.HTML.m_EmbeddedImagesPath">
      <summary>
            Key:Image, Value:ImageFileName
            </summary>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.#ctor(SourceGrid.Exporter.ExportHTMLMode,System.String,System.String,System.IO.Stream)">
      <summary>
            Constructor
            </summary>
      <param name="p_Mode">
      </param>
      <param name="p_ImageFullPath">The path to write embedded images files</param>
      <param name="p_ImageRelativePath">The path used in the HTML source. If you save the images in the same path of the HTML file you can leave this path empty.</param>
      <param name="p_HtmlStream">The stream to write</param>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.ClearEmbeddedImages">
      <summary>
            Clear the list of embedded images. This method don't delete the files only clear the list.
            </summary>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.ExportImage(System.Drawing.Image)">
      <summary>
            Save the Image to file and returns the file
            </summary>
      <param name="p_Image">
      </param>
      <returns>Returns the path where the image is exported valid for the HTML page</returns>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.ColorToHTML(System.Drawing.Color)">
      <summary>
            Convert a Color to HTML compatible string
            </summary>
      <param name="p_Color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.ExportHTML_Element_Font(System.Xml.XmlTextWriter,System.String,System.Drawing.Font)">
      <summary>
            Export a font html element with the specified font and text
            </summary>
      <param name="p_Writer">
      </param>
      <param name="p_DisplayText">
      </param>
      <param name="p_Font">
      </param>
    </member>
    <member name="M:SourceGrid.Exporter.HTML.ExportHTMLCell(SourceGrid.CellContext,System.Xml.XmlTextWriter)">
      <summary>
            Export the specified cell to HTML
            </summary>
      <param name="context">
      </param>
      <param name="writer">
      </param>
    </member>
    <member name="P:SourceGrid.Exporter.HTML.Mode">
      <summary>
            Export mode
            </summary>
    </member>
    <member name="P:SourceGrid.Exporter.HTML.EmbeddedImagesPath">
      <summary>
            List of images exported during HTML export
            </summary>
    </member>
    <member name="T:SourceGrid.Exporter.ExportHTMLMode">
      <summary>
            Flags for the export html features (Flags)
            </summary>
    </member>
    <member name="T:SourceGrid.Exporter.Image">
      <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
    </member>
    <member name="T:SourceGrid.Grid">
      <summary>
            The main grid control with static data.
            </summary>
    </member>
    <member name="F:SourceGrid.Grid.mDrawnRange">
      <summary>
            List of the ranges already drawn
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.CreateRowsObject">
      <summary>
            Method used to create the rows object, in this class of type RowInfoCollection.
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.CreateColumnsObject">
      <summary>
            Method used to create the columns object, in this class of type ColumnInfoCollection.
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.SetCell(System.Int32,System.Int32,SourceGrid.Cells.ICellVirtual)">
      <summary>
            Set the specified cell int he specified position. Abstract method of the GridVirtual control
            </summary>
      <param name="p_iRow">
      </param>
      <param name="p_iCol">
      </param>
      <param name="p_Cell">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.SetCell(SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
      <summary>
            Set the specified cell int he specified position. This method calls SetCell(int p_iRow, int p_iCol, Cells.ICellVirtual p_Cell)
            </summary>
      <param name="p_Position">
      </param>
      <param name="p_Cell">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.GetCell(System.Int32,System.Int32)">
      <summary>
            Return the Cell at the specified Row and Col position.
            </summary>
      <param name="p_iRow">
      </param>
      <param name="p_iCol">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Grid.GetSpannedCell(SourceGrid.Position)">
      <summary>
            Check if a cell exists in spanned cells.
            If yes, returns. If no, returns null
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.RemoveCell(System.Int32,System.Int32)">
      <summary>
            Remove the specified cell
            </summary>
      <param name="row">
      </param>
      <param name="col">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.RemoveSpannedCell(SourceGrid.Position)">
      <summary>
            Removes a spanned cell internal reference.
            This effectively removes any data in spannedCellReferences collection
            </summary>
      <param name="pos">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.EnsureNoOtherCellsExist(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
      <summary>
            Check
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.EnsureDestinationSpannedAreaIsEmptyExceptOriginalCell(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
      <summary>
      </summary>
      <param name="row">
      </param>
      <param name="col">
      </param>
      <param name="p_cell">except this cell</param>
    </member>
    <member name="M:SourceGrid.Grid.InsertCell(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
      <summary>
            Insert the specified cell
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.GrowGrid">
      <summary>
            Call this method to update internal grid structures.
            This is used to update QuadTree space at the moment.
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.Redim(System.Int32,System.Int32)">
      <summary>
            Set the number of columns and rows
            </summary>
    </member>
    <member name="M:SourceGrid.Grid.RangeToCellRange(SourceGrid.Range)">
      <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Grid.PositionToCellRange(SourceGrid.Position)">
      <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
      <param name="pPosition">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Cells.ICell)">
      <summary>
            Force a redraw of the specified cell
            </summary>
      <param name="p_Cell">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Position)">
      <summary>
            Force a cell to redraw. If ColSpan or RowSpan is greater than 0 this function invalidate the complete range with InvalidateRange
            </summary>
      <param name="p_Position">
      </param>
    </member>
    <member name="M:SourceGrid.Grid.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
      <summary>
            Fired when calling SortRangeRows method. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:SourceGrid.Grid.SpannedCellReferences">
      <summary>
            Allows to check what spanned cells we have.
            Do not use this property directly from client code
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.ColumnsCount">
      <summary>
            Gets or Sets the number of columns
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.RowsCount">
      <summary>
            Gets or Sets the number of rows
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.Rows">
      <summary>
            RowsCount informations
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.Columns">
      <summary>
            Columns informations
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.OptimizeMode">
      <summary>
            Gets or sets the optimize mode. Default is ForRows
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.AllowOverlappingCells">
      <summary>
            Indicates that overlapping cells are not allowed and will be thrown an exception.
            This is needed due to the fact that when there are two overlapping spanned cells,
            SourceGrid can not reliably draw them, since the call to function GetCell(x,y)
            returns random results. However, some users epxressed the need to allow such
            behaviour. So this flag forces Grid to not check for overlapping cells
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.Item(System.Int32,System.Int32)">
      <summary>
            Returns or set a cell at the specified row and col.
            If you get a ICell position occupied by a row/col span cell,
            and EnableRowColSpan is true, this method returns the cell with Row/Col span.
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.MaxSpan">
      <summary>
            Gets the maximum rows or columns number to search when using Row/Col Span.
            This is a static property.
            This value is automatically calculated based on the current cells. Do not change this value manually.
            Default is 100.
            </summary>
    </member>
    <member name="P:SourceGrid.Grid.CustomSort">
      <summary>
            Gets or sets if when calling SortRangeRows method use a custom sort or an automatic sort. Default = false (automatic)
            </summary>
    </member>
    <member name="M:SourceGrid.GridColumns.Insert(System.Int32)">
      <summary>
            Insert a column at the specified position
            </summary>
      <param name="p_Index">
      </param>
    </member>
    <member name="M:SourceGrid.GridColumns.InsertRange(System.Int32,System.Int32)">
      <summary>
            Insert the specified number of Columns at the specified position
            </summary>
    </member>
    <member name="M:SourceGrid.GridRows.Insert(System.Int32)">
      <summary>
            Insert a row at the specified position
            </summary>
      <param name="p_Index">
      </param>
    </member>
    <member name="M:SourceGrid.GridRows.InsertRange(System.Int32,System.Int32)">
      <summary>
            Insert the specified number of rows at the specified position
            </summary>
    </member>
    <member name="T:SourceGrid.ISpannedCellRangesController">
      <summary>
            This interfaces defines the logic how spanned cell ranges
            are handled.
            At the moment this interface is bloated, since it was
            copy pasted from implementation straight from Grid.
            
            In the future it would be nice to reduce it
            so that separate implementations would be possible
            </summary>
    </member>
    <member name="M:SourceGrid.ISpannedCellRangesController.UpdateOrAdd(SourceGrid.Range)">
      <summary>
            Adds or updates given range.
            Updates range only when existing range with given start position is found
            </summary>
      <param name="newRange">
      </param>
    </member>
    <member name="T:SourceGrid.ISpannedRangesCollection">
      <summary>
            This interface helps work with spanned ranges collection
            
            There are two implementations at the moment.
            One is SpannedRangesList,
            another is QuadTree implementation, which is much faster.
            Look at unit tests for speed comparisons:
            TestSpannedCellRnages_Performance: TestBoth.
            </summary>
    </member>
    <member name="M:SourceGrid.ISpannedRangesCollection.Update(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Searches for an old range. If finds, updates 
            found region. Else throws RangeNotFoundException
            </summary>
    </member>
    <member name="M:SourceGrid.ISpannedRangesCollection.Redim(System.Int32,System.Int32)">
      <summary>
            Increase size up to specified values.
            Note that shrinking is not possible
            </summary>
      <param name="rowCount">
      </param>
      <param name="colCount">
      </param>
    </member>
    <member name="M:SourceGrid.ISpannedRangesCollection.Remove(SourceGrid.Range)">
      <summary>
            If does not find, throws RangeNotFoundException
            </summary>
    </member>
    <member name="M:SourceGrid.ISpannedRangesCollection.FindRangeWithStart(SourceGrid.Position)">
      <summary>
            Returns range which has exactly the same start position
            as indicated
            </summary>
      <param name="start">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.ISpannedRangesCollection.Count">
      <summary>
            Returns the number of ranges contained
            </summary>
    </member>
    <member name="T:QuadTreeLib.QuadTree">
      <summary>
            A Quadtree is a structure designed to partition space so
            that it's faster to find out what is inside or outside a given
            area. See http://en.wikipedia.org/wiki/Quadtree
            This QuadTree contains items that have an area (RectangleF)
            it will store a reference to the item in the quad
            that is just big enough to hold it. Each quad has a bucket that
            contain multiple items.
            </summary>
    </member>
    <member name="T:QuadTreeLib.QuadTree.QTAction">
      <summary>
            An delegate that performs an action on a QuadTreeNode
            </summary>
      <param name="obj">
      </param>
    </member>
    <member name="F:QuadTreeLib.QuadTree.m_root">
      <summary>
            The root QuadTreeNode
            </summary>
    </member>
    <member name="F:QuadTreeLib.QuadTree.m_rectangle">
      <summary>
            The bounds of this QuadTree
            </summary>
    </member>
    <member name="M:QuadTreeLib.QuadTree.Grow">
      <summary>
            Double ocuppied space by adding one more root level node.
            Current root will go under the new root
            </summary>
    </member>
    <member name="M:QuadTreeLib.QuadTree.#ctor(SourceGrid.Range)">
      <summary>
      </summary>
      <param name="rectangle">
      </param>
    </member>
    <member name="M:QuadTreeLib.QuadTree.Insert(SourceGrid.Range)">
      <summary>
            Insert the feature into the QuadTree
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:QuadTreeLib.QuadTree.Insert(System.Collections.Generic.IEnumerable{SourceGrid.Range})">
      <summary>
            Insert the feature into the QuadTree
            </summary>
    </member>
    <member name="M:QuadTreeLib.QuadTree.Query(SourceGrid.Range)">
      <summary>
            Query the QuadTree, returning the items that are in the given area
            </summary>
      <param name="area">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:QuadTreeLib.QuadTree.QueryFirst(SourceGrid.Position)">
      <summary>
            Return first matching range
            </summary>
      <param name="area">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:QuadTreeLib.QuadTree.ForEach(QuadTreeLib.QuadTree.QTAction)">
      <summary>
            Do the specified action for each item in the quadtree
            </summary>
      <param name="action">
      </param>
    </member>
    <member name="P:QuadTreeLib.QuadTree.Root">
      <summary>
            Returns the root node
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTree.Contents">
      <summary>
            Returns all the content 
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTree.Count">
      <summary>
            Get the count of items in the QuadTree
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTree.MaxDepth">
      <summary>
            returns
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.QuadTreeRangesList">
      <summary>
            This is a QuadTree implementation for cell ranges.
            Performance is definetely not O(n*n) as in simple
            list of ranges
            
            Have a look at these numbers to see the difference:
            
            with simple List of Ranges
            Total 30000 spanned ranges
            Total result count 90000
            Total time 98541 ms
            Average time 0,98541
            Total queries 100000
            
            testing quad tree
            Total 30000 spanned ranges
            Total result count 90000
            Total time 1495 ms
            Average time 0,01495
            Total queries 100000
            max tree depth: 11
            
            </summary>
    </member>
    <member name="M:SourceGrid.SpannedCellRangesController.UpdateOrAdd(SourceGrid.Range)">
      <summary>
            Adds or updates given range.
            Updates range only when existing range with given start position is found
            </summary>
      <param name="newRange">
      </param>
    </member>
    <member name="M:SourceGrid.SpannedCellRangesController.Update(SourceGrid.Range)">
      <summary>
            Updates range whose start position matches.
            If no matches found, an exception is thrown
            </summary>
      <param name="newRange">
      </param>
    </member>
    <member name="T:SourceGrid.SpannedRangesList">
      <summary>
            A is simple List of Ranges.
            Uses simple iterating over list to find
            required range
            </summary>
    </member>
    <member name="M:SourceGrid.SpannedRangesList.GetFirstIntersectedRange(SourceGrid.Position)">
      <summary>
            Returns first intersecting region
            </summary>
      <param name="pos">
      </param>
    </member>
    <member name="T:QuadTreeLib.IHasRect">
      <summary>
            An interface that defines and object with a rectangle
            </summary>
    </member>
    <member name="M:QuadTreeLib.IQuadTreeNodeDivider.CreateNewRoot(QuadTreeLib.QuadTreeNode)">
      <summary>
            Expand tree by creating new root.
            Add old root under new root, and create any
            additional tree nodes that are needed
            </summary>
      <param name="currentRoot">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:QuadTreeLib.ProportioanteSizeNodeDivider">
      <summary>
            Tries to divide into nodes, that are more suited for grids,
            which expand more into rows than into columns.
            In this case, quad tree does not end up divided
            into regions where width is very very small.
            
            This is much more efficien space partitioning
            </summary>
    </member>
    <member name="T:QuadTreeLib.HalfSizeNodeDivider">
      <summary>
            Creates sub-nodes simply by dividing current node
            by 2 and creating 4 smaller regions.
            
            This is not efficient if the area is very rectangular,
            for example, row count 10 000 and column count 10
            
            Use ProportioanteSizeNodeDivider instead
            </summary>
    </member>
    <member name="T:QuadTreeLib.QuadTreeNode">
      <summary>
            The QuadTreeNode
            </summary>
    </member>
    <member name="F:QuadTreeLib.QuadTreeNode.m_bounds">
      <summary>
            The area of this node
            </summary>
    </member>
    <member name="F:QuadTreeLib.QuadTreeNode.m_contents">
      <summary>
            The contents of this node.
            Note that the contents have no limit: this is not the standard way to impement a QuadTree
            </summary>
    </member>
    <member name="F:QuadTreeLib.QuadTreeNode.m_nodes">
      <summary>
            The child nodes of the QuadTree
            </summary>
    </member>
    <member name="M:QuadTreeLib.QuadTreeNode.#ctor(SourceGrid.Range,System.Int32,QuadTreeLib.QuadTree)">
      <summary>
            Construct a quadtree node with the given bounds
            </summary>
    </member>
    <member name="M:QuadTreeLib.QuadTreeNode.QueryInternal(SourceGrid.Range,System.Boolean)">
      <summary>
            Query the QuadTree for items that are in the given area
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:QuadTreeLib.QuadTreeNode.Insert(SourceGrid.Range)">
      <summary>
            Insert an item to this node
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="P:QuadTreeLib.QuadTreeNode.IsEmpty">
      <summary>
            Is the node empty
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTreeNode.Bounds">
      <summary>
            Area of the quadtree node
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTreeNode.Count">
      <summary>
            Total number of nodes in the this node and all SubNodes
            </summary>
    </member>
    <member name="P:QuadTreeLib.QuadTreeNode.SubTreeContents">
      <summary>
            Return the contents of this node and all subnodes in the true below this one.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.GetSelectionRegion">
      <summary>
            Returns the selected region.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.IsSelectedRow(System.Int32)">
      <summary>
            Check if the row is selected. Returns true if one or more column of the row is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.CanReceiveFocus(SourceGrid.Position)">
      <summary>
            Returns true if the specified position can receive the focus.
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.FocusFirstCell(System.Boolean)">
      <summary>
            Set the focus on the first available cells starting from the not fixed cells.
            If there is an active selection set the focus on the first selected cells.
            </summary>
      <param name="pResetSelection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.BindToGrid(SourceGrid.GridVirtual)">
      <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
      <param name="p_grid">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.UnBindToGrid">
      <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            Does reset selection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <param name="resetSelection">if false, selection is not reset</param>
      <param name="rowShift">
      </param>
      <param name="colShift">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.IsEmpty">
      <summary>
            Returns true if the selection is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.Invalidate">
      <summary>
            Invalidate all the selected cells
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.SelectRange(SourceGrid.Range,System.Boolean)">
      <summary>
            Select or unselect the specified range
            </summary>
      <param name="range">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.SelectCell(SourceGrid.Position,System.Boolean)">
      <summary>
            Select or unselect the specified cell
            </summary>
      <param name="position">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.IsSelectedCell(SourceGrid.Position)">
      <summary>
            Check if the cell is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.ResetSelection(System.Boolean)">
      <summary>
            Reset the selection
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.SelectRow(System.Int32,System.Boolean)">
      <summary>
            Select or unselect the specified row
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.SelectColumn(System.Int32,System.Boolean)">
      <summary>
            Select or unselect the specified column
            </summary>
      <param name="column">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.FocusRow(System.Int32)">
      <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.FocusColumn(System.Int32)">
      <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.IGridSelection.Focus(SourceGrid.Position,System.Boolean)">
      <summary>
            Change the ActivePosition (focus) of the grid.
            </summary>
      <param name="pCellToActivate">
      </param>
      <param name="pResetSelection">True to deselect the previous selected cells</param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Selection.IGridSelection.EnableMultiSelection">
      <summary>
            Gets or sets if enable multi selection using Ctrl key or Shift Key or with mouse. Default is true.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.IGridSelection.ActivePosition">
      <summary>
            Gets the active cell position. The cell with the focus.
            Returns Position.Empty if there isn't an active cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.IGridSelection.FocusStyle">
      <summary>
            Gets or sets the behavior of the focus and selection. Default is FocusStyle.Default.
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.SelectionChanged">
      <summary>
            Fired after when the selection change (added or removed).
            If you need more control over the selection I suggest to create a custom Selection class.
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.CellGotFocus">
      <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.CellLostFocus">
      <summary>
            Fired before a cell lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.FocusRowLeaving">
      <summary>
            Fired before a row lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.FocusRowEntered">
      <summary>
            Fired after a row receive the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.FocusColumnLeaving">
      <summary>
            Fired before a column lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.IGridSelection.FocusColumnEntered">
      <summary>
            Fired after a column receive the focus
            </summary>
    </member>
    <member name="T:SourceGrid.Selection.SelectionBase">
      <summary>
            Base selection class
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.BindToGrid(SourceGrid.GridVirtual)">
      <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
      <param name="p_grid">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.UnBindToGrid">
      <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.Focus(SourceGrid.Position,System.Boolean)">
      <summary>
            Change the ActivePosition (focus) of the grid.
            </summary>
      <param name="pCellToActivate">
      </param>
      <param name="pResetSelection">True to deselect the previous selected cells</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.FocusFirstCell(System.Boolean)">
      <summary>
            Set the focus on the first available cells starting from the not fixed cells.
            If there is an active selection set the focus on the first selected cells.
            </summary>
      <param name="pResetSelection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.FocusColumn(System.Int32)">
      <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.FocusRow(System.Int32)">
      <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.CanReceiveFocus(SourceGrid.Position)">
      <summary>
            Returns true if the specified position can receive the focus.
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowLeaving(SourceGrid.RowCancelEventArgs)">
      <summary>
            Fired before a row lost the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowEntered(SourceGrid.RowEventArgs)">
      <summary>
            Fired after a row receive the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnLeaving(SourceGrid.ColumnCancelEventArgs)">
      <summary>
            Fired before a column lost the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnEntered(SourceGrid.ColumnEventArgs)">
      <summary>
            Fired after a column receive the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnCellGotFocus(SourceGrid.ChangeActivePositionEventArgs)">
      <summary>
            Fired when a cell receive the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnCellLostFocus(SourceGrid.ChangeActivePositionEventArgs)">
      <summary>
            Fired when a cell lost the focus
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <param name="rowShift">
      </param>
      <param name="colShift">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
      <param name="start">
      </param>
      <param name="rowShift1">
      </param>
      <param name="colShift1">
      </param>
      <param name="rowShift2">
      </param>
      <param name="colShift2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.Invalidate">
      <summary>
            Invalidate all the selected cells
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedColumn(System.Int32)">
      <summary>
            Check if the column is selected. Returns true if one or more row of the column is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.SelectColumn(System.Int32,System.Boolean)">
      <summary>
            Select or unselect the specified column
            </summary>
      <param name="column">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRow(System.Int32)">
      <summary>
            Check if the row is selected. Returns true if one or more column of the row is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.SelectRow(System.Int32,System.Boolean)">
      <summary>
            Select or unselect the specified row
            </summary>
      <param name="row">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedCell(SourceGrid.Position)">
      <summary>
            Check if the cell is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.SelectCell(SourceGrid.Position,System.Boolean)">
      <summary>
            Select or unselect the specified cell
            </summary>
      <param name="position">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRange(SourceGrid.Range)">
      <summary>
            Check if the range is selected.
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.SelectRange(SourceGrid.Range,System.Boolean)">
      <summary>
            Select or unselect the specified range
            </summary>
      <param name="range">
      </param>
      <param name="select">
      </param>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.OnResetSelection">
      <summary>
            Reset the selection
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.ResetSelection(System.Boolean)">
      <summary>
            Reset the selection
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IsEmpty">
      <summary>
            Returns true if the selection is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.GetSelectionRegion">
      <summary>
            Returns the selected region.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.IntersectsWith(SourceGrid.Range)">
      <summary>
            Returns true if the specified selection intersect with the range
            </summary>
      <param name="rng">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.SelectionBase.ValidateRange(SourceGrid.Range)">
      <summary>
            Check if the range can be selected
            </summary>
      <param name="rng">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.Grid">
      <summary>
            The Grid object
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.ActivePosition">
      <summary>
            Gets the active cell position. The cell with the focus.
            Returns Position.Empty if there isn't an active cell.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.FocusBackColor">
      <summary>
            Gets or sets the backColor of the cell with the Focus. Default is Color.Transparent.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.FocusStyle">
      <summary>
            Gets or sets the behavior of the focus and selection. Default is FocusStyle.Default.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.EnableMultiSelection">
      <summary>
            Gets or sets if enable multi selection using Ctrl key or Shift Key or with mouse. Default is true.
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.BackColor">
      <summary>
            Gets or set the highlight backcolor.
            Usually is a color with a transparent value so you can see the color of the cell. Default is: Color.FromArgb(75, Color.FromKnownColor(KnownColor.Highlight))
            </summary>
    </member>
    <member name="P:SourceGrid.Selection.SelectionBase.Border">
      <summary>
            The Border used to highlight the range
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.CellGotFocus">
      <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.CellLostFocus">
      <summary>
            Fired before a cell lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.FocusRowLeaving">
      <summary>
            Fired before a row lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.FocusRowEntered">
      <summary>
            Fired after a row receive the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnLeaving">
      <summary>
            Fired before a column lost the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnEntered">
      <summary>
            Fired after a column receive the focus
            </summary>
    </member>
    <member name="E:SourceGrid.Selection.SelectionBase.SelectionChanged">
      <summary>
            Fired after when the selection change (added or removed).
            If you need more control over the selection I suggest to create a custom Selection class.
            </summary>
    </member>
    <member name="T:SourceGrid.Selection.RangeMergerByCells">
      <summary>
            Similar to <see cref="T:SourceGrid.Selection.RangeMergerByRows" />, this class merge adjancent
            ranges if they are differ only by row or column count.
            
            See TestRangeMergerByCells for unit tests, which show how this class works
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByCells.JoinAdjancedRecursive">
      <summary>
            Repeat this function until it returns false to recursively merge all ranges
            </summary>
      <returns>true, if at least two ranges were joined into single</returns>
    </member>
    <member name="T:SourceGrid.Selection.FreeSelection">
      <summary>
            A selection class that support free selection of cells (ranges)
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.FreeSelection.IsEmpty">
      <summary>
            Returns true if the selection is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.FreeSelection.GetSelectionRegion">
      <summary>
            Returns the selected region.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.FreeSelection.IntersectsWith(SourceGrid.Range)">
      <summary>
            Returns true if the specified selection intersect with the range
            </summary>
      <param name="rng">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Selection.RangeMergerByRows">
      <summary>
            Contains a list of ranges which differ only by row, that is vertically.
            This the reason why the class contains a word "row" in its name.
            
            "Merger" means that it will merge adjancent ranges into single big range.
            So, for example, if you have 100 ranges from first row to second, that
            equals to one big range from row 1 to 100. If Row 50 is not selected,
            then this class splits one big range into two smaller. One from first row
            to row number 49, and anoter range from row 51 to row 100
            
            Although some functions work with Range structure, which has also a horizontal 
            span, that information is actually not needed, and used as dummy only.
            
            
            </summary>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.LoopAllRanges">
      <summary>
            Loops via all ranges. Ranges are guaranteed to be ordered
            from lowest row to highest.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.GetSelectedRowRegions(System.Int32,System.Int32)">
      <summary>
            Returns a list of selected ranges
            </summary>
      <param name="startColumn">start column, usually 0</param>
      <param name="endColumn">end column, usually equals to column count - 1</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.Merge(SourceGrid.Range)">
      <summary>
      </summary>
      <param name="rangeToMerge">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.MergeRecursive(SourceGrid.Range)">
      <summary>
            Merges given range with one of the intersecting range in m_ranges
            if no intersecting ranges is found, then rangeToMerge is
            added to m_ranges
            </summary>
      <param name="rangeToMerge">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.JoinAjdancedRecursive">
      <summary>
            Returns true if at least two ranges were joined
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.AddRange(SourceGrid.Range)">
      <summary>
            Add a range to collection. If the range can be added (merged)
            to existing range, it will be added so. This will guarantee
            that the number of different ranges is kept to minimal.
            In theory only if user selects every second row, this would produce
            RowCount / 2 number of ranges. In practice, there are rarely 
            more than 3 - 5 different selection regions
            </summary>
      <param name="rangeToAdd">columns values are ignored, so simply 
            put 0 as start colum and 1 as end column. Only row values matter</param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.MergeByRow(SourceGrid.Range,SourceGrid.Range)">
      <summary>
            Returns new range witch is the max of both ranges in row axis
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.RemoveRange(SourceGrid.Range)">
      <summary>
            As opposed to Adding a range, this will remove a range.
            It might happend that removing a range is dividing one bigger range into two 
            smaller ones. So practically the number of ranges might increase.
            
            It might be that this method might carry more exact meaning with "Exclude", instead
            of "RemoveRange"
            </summary>
      <param name="rangeToRemove">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceGrid.Selection.RangeMergerByRows.GetRowsIndex">
      <summary>
            Returns a list of indexes of rows
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SourceGrid.Utils.SourceGridConvert">
      <summary>
            A generic converter class used to convert values from
            one type to another
            </summary>
    </member>
    <member name="M:SourceGrid.Utils.SourceGridConvert.To``1(System.Object)">
      <summary>
            Converts specified value to type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">Type to convert to.</typeparam>
      <param name="value">Value to convert.</param>
      <returns>Converted value.</returns>
    </member>
    <member name="M:SourceGrid.Utils.SourceGridConvert.To(System.Object,System.Type)">
      <summary>
            Converts specified value to the specified type.
            </summary>
      <param name="value">Value to convert.</param>
      <param name="type">Type to convert to.</param>
      <returns>Converted value.</returns>
    </member>
    <member name="T:SourceCell.CellBase">
      <summary>
            Source Cell Base
            </summary>
    </member>
    <member name="T:SourceCell.CellBase.FontName">
      <summary>
            字體
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.BorderShadowColor">
      <summary>
            【邊框陰影色】Default：Color.White
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.BorderLightColor">
      <summary>
            【邊框色】Default：Color.Silver
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.control">
      <summary>
            Cell Event Control
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.tip">
      <summary>
            Cell Tip Control
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="F:SourceCell.CellBase.message">
      <summary>
            Message
            </summary>
    </member>
    <member name="M:SourceCell.CellBase.#ctor">
      <summary>
            建構
            </summary>
    </member>
    <member name="M:SourceCell.CellBase.DoClick(System.Object,System.EventArgs)">
      <summary>
            Click
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoDoubleClick(System.Object,System.EventArgs)">
      <summary>
            Double Click
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoValueChanging(System.Object,SourceGrid.ValueChangeEventArgs)">
      <summary>
            Value Changing
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoValueChanged(System.Object,System.EventArgs)">
      <summary>
            Value Change
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoMouseEnter(System.Object,System.EventArgs)">
      <summary>
            Mouse Enter
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoMouseLeave(System.Object,System.EventArgs)">
      <summary>
            Mouse Leave
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
      <summary>
            Key Down
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
      <summary>
            Key Press
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
      <summary>
            Key Up
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Mouse Down
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Mouse Up
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoEditEnded(System.Object,System.EventArgs)">
      <summary>
            Edit Ended
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoEditStarted(System.Object,System.EventArgs)">
      <summary>
            Edit Started
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.DoEditStarting(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>
            EditStarting
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.Finalize">
      <summary>
            解構
            </summary>
    </member>
    <member name="M:SourceCell.CellBase.SetFontType(SourceGrid.Cells.Views.IView,System.String,System.Single,System.Drawing.FontStyle)">
      <summary>
            字型設定
            </summary>
      <param name="v">Cell View</param>
      <param name="fontname">字型名稱</param>
      <param name="fontsize">大小</param>
      <param name="fontstyle">字型設定</param>
    </member>
    <member name="M:SourceCell.CellBase.SetBorder(SourceGrid.Cells.Views.Cell,System.Boolean)">
      <summary>
            欄位邊框
            </summary>
      <param name="v">Cell View</param>
      <param name="hasborder">是否有編框</param>
    </member>
    <member name="M:SourceCell.CellBase.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CellBase.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.CellBase.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.CellBase.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.CellBase.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.CellBase.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的顏色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CellBase.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CellBase.SetValue(System.Object)">
      <summary>
            設定欄位值
            </summary>
      <param name="_Txt">欄位值</param>
    </member>
    <member name="M:SourceCell.CellBase.SetValueColor(System.Object,System.Object)">
      <summary>
            設定內容及背景色
            </summary>
      <param name="_Txt">內容</param>
      <param name="_Color">背景色;null自動代入DefaultBackColor</param>
    </member>
    <member name="M:SourceCell.CellBase.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            設定內容、背景色、字色
            </summary>
      <param name="_Txt">內容</param>
      <param name="_BC">背景色; null代入DefaultBackColor</param>
      <param name="_FC">字色; null代入DefaultFontColor</param>
    </member>
    <member name="M:SourceCell.CellBase.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.CellBase.SetDataBinding(System.Type,System.String,System.Object,System.Int32)">
      <summary>
            資料綁定
            2014/02/07 Modify For Array Binding
            </summary>
      <param name="type">
      </param>
      <param name="PropertyName">
      </param>
      <param name="LinkObject">
      </param>
      <param name="Index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SourceCell.CellBase.RemoveDataBinding">
      <summary>
            移除資料綁定
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.BackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.FontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Image">
      <summary>
            圖示
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Controller">
      <summary>
            Cell Event Controller
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Message">
      <summary>
            Cell Message
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Context">
      <summary>
            CellContext
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Cell">
      <summary>
            欄位
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Name">
      <summary>
            Name
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.Enable">
      <summary>
            編輯狀態
            </summary>
    </member>
    <member name="P:SourceCell.CellBase.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnClick">
      <summary>
            Click
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnDoubleClick">
      <summary>
            Double Click
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnMouseEnter">
      <summary>
            Mouse Enter
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnMouseLeave">
      <summary>
            Mouse Leave
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnValueChanged">
      <summary>
            Value Change; 沒作用
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnValueChanging">
      <summary>
            Value Changing; 沒作用
            </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnKeyDown">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnKeyPress">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnKeyUp">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnMouseDown">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnMouseUp">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnEditEnded">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnEditStarted">
      <summary>
      </summary>
    </member>
    <member name="E:SourceCell.CellBase.OnEditStarting">
      <summary>
      </summary>
    </member>
    <member name="T:SourceCell.ButtonCell">
      <summary>
            按鈕Cell
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.ButtonBackColor">
      <summary>
            【Button背景色】Default：Color.FromName("Control")
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.ButtonFontColor">
      <summary>
            【Button字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.fvalue">
      <summary>
            Value
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.rowspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.hasborder">
      <summary>
            有無邊框
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.ButtonCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.ButtonCell.#ctor">
      <summary>
            建構
            </summary>
    </member>
    <member name="M:SourceCell.ButtonCell.SetBackColor(System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Color">沒作用</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的字色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.ButtonCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.ButtonCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.ButtonCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.ButtonCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.ButtonCell.SetValue(System.Object)">
      <summary>
            Set Caption
            </summary>
      <param name="_Txt">Caption</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SetValueColor(System.Object,System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
      <param name="_Color">沒作用</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
      <param name="_BC">沒作用</param>
      <param name="_FC">沒作用</param>
    </member>
    <member name="M:SourceCell.ButtonCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Caption">
      <summary>
            標題
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.HasBorder">
      <summary>
            是否有邊框; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Enable">
      <summary>
            編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.ButtonCell.Image">
      <summary>
            圖片
            </summary>
    </member>
    <member name="T:SourceCell.OnClickDelegate">
      <summary>
            Click
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnDoubleClickDelegate">
      <summary>
            DoubleClick
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnValueChangedDelegate">
      <summary>
            ValueChange
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnMouseEnterDelegate">
      <summary>
            MouseEnter
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnMouseLeaveDelegate">
      <summary>
            MouseLeave
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnValueChangingDelegate">
      <summary>
            Value Changing
            </summary>
      <param name="cell">欄位</param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnKeyDownDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnKeyPressDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnKeyUpDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnEditEndedDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnEditStartedDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnEditStartingDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnMouseDownDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.OnMouseUpDelegate">
      <summary>
      </summary>
      <param name="cell">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:SourceCell.SetCellValueColor">
      <summary>
            改變內容 背景色
            </summary>
      <param name="txt">內容</param>
      <param name="color">背景色</param>
    </member>
    <member name="T:SourceCell.SetValueBFColor">
      <summary>
            改變內容 背景色 字色
            </summary>
      <param name="txt">內容</param>
      <param name="bc">背景色</param>
      <param name="fc">字色</param>
    </member>
    <member name="T:SourceCell.SetCellValue">
      <summary>
            改變內容
            </summary>
      <param name="txt">內容</param>
    </member>
    <member name="T:SourceCell.SetCheckBoxChecked">
      <summary>
            改變Checked狀態
            </summary>
      <param name="_Checked">Checked</param>
    </member>
    <member name="T:SourceCell.SetColor">
      <summary>
            改變背景色
            </summary>
      <param name="_Color">背景色</param>
    </member>
    <member name="T:SourceCell.SetImage">
      <summary>
            設定圖片
            </summary>
      <param name="_img">
      </param>
    </member>
    <member name="T:SourceCell.CheckBoxCell">
      <summary>
            CheckBox的Cell
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.CheckBoxBackColor">
      <summary>
            【CheckBox背景色】Default：Color.White
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.CheckBoxFontColor">
      <summary>
            【CheckBox字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.caption">
      <summary>
            標題
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.rowspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.em">
      <summary>
            點擊修改模式
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.checkboxAlignment">
      <summary>
            CheckBox方塊對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.hasborder">
      <summary>
            有無邊框
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.CheckBoxCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.CheckBoxCell.#ctor">
      <summary>
            建構; 商品資料建構時輸入後無法修改，欄位資料可使用範例方式建立
            範例: _CheckBoxCell(){BackColor =Color.White}
            </summary>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetChecked(System.Boolean)">
      <summary>
            設定欄位值
            </summary>
      <param name="_Checked">欄位值</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetValue(System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetValueColor(System.Object,System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
      <param name="_Color">沒作用</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
      <param name="_BC">沒作用</param>
      <param name="_FC">沒作用</param>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetDataBinding(System.Type,System.String,System.Object,System.Int32)">
      <summary>
            物件資料綁定
            2014/02/07 Modify for Array Binding
            </summary>
      <param name="type">物件型態</param>
      <param name="PropertyName">綁定的物件屬性</param>
      <param name="LinkObject">綁定的物件</param>
      <param name="Index">綁定的物件的index</param>
      <returns>是否成功</returns>
    </member>
    <member name="M:SourceCell.CheckBoxCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Caption">
      <summary>
            標題; 預設值: String.Empty
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Checked">
      <summary>
            Cell Value; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.EditMode">
      <summary>
            欄位修改模式
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.CheckBoxAlignment">
      <summary>
            CheckBox對齊方式; 預設值: MiddleLeft
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.HasBorder">
      <summary>
            是否有邊框; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Enable">
      <summary>
            編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Tag">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CheckBoxCell.Image">
      <summary>
            設定圖片
            </summary>
    </member>
    <member name="T:SourceCell.ComboBoxCell">
      <summary>
            ComboBox的Cell
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.ComboBoxBackColor">
      <summary>
            【ComboBox背景色】Default：Color.White
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.ComboBoxFontColor">
      <summary>
            【ComboBox字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.selitem">
      <summary>
            下拉選單
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.m_IsExclusive">
      <summary>
            是否可輸入不在選單內的值
            True: 不可; False: 可
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.fvalue">
      <summary>
            Value
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.rowspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.em">
      <summary>
            點擊修改模式
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.hasborder">
      <summary>
            有無邊框
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.ComboBoxCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.ComboBoxCell.#ctor">
      <summary>
            建構; 商品資料建構時輸入後無法修改，欄位資料可使用範例方式建立
            範例: _ComboBoxCell(){BackColor =Color.White}
            </summary>
    </member>
    <member name="M:SourceCell.ComboBoxCell.DoValueChanged(System.Object,System.EventArgs)">
      <summary>
            Value Changed
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetValue(System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetValueColor(System.Object,System.Object)">
      <summary>
      </summary>
      <param name="_Txt">
      </param>
      <param name="_Color">
      </param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            沒作用
            </summary>
      <param name="_Txt">沒作用</param>
      <param name="_BC">沒作用</param>
      <param name="_FC">沒作用</param>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetDataBinding(System.Type,System.String,System.Object,System.Int32)">
      <summary>
            物件資料綁定
            2014/02/07 Modify for Array Binding
            </summary>
      <param name="type">物件型態</param>
      <param name="PropertyName">綁定的物件屬性</param>
      <param name="LinkObject">綁定的物件</param>
      <param name="Index">綁定的物件的index</param>
      <returns>是否成功</returns>
    </member>
    <member name="M:SourceCell.ComboBoxCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.SelItem">
      <summary>
            下拉選單
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.IsExclusive">
      <summary>
            是否可輸入不在選單內的值
            True: 不可; False: 可
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Value">
      <summary>
            Cell Value
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.EditMode">
      <summary>
            欄位修改模式
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.HasBorder">
      <summary>
            是否有邊框; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.DropDownStyle">
      <summary>
            下拉樣式; 預設值: DropDown
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Enable">
      <summary>
            編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.ComboBoxCell.Image">
      <summary>
            設定圖片
            </summary>
    </member>
    <member name="T:SourceCell.CHeaderCell">
      <summary>
            欄標題
            </summary>
    </member>
    <member name="T:SourceCell.CHeaderCell.SetStyle">
      <summary>
            色彩表現方式
            </summary>
      <param name="colorStyle">
      </param>
    </member>
    <member name="F:SourceCell.CHeaderCell.HeaderBackColor">
      <summary>
            【Header背景色】Default：Color.DarkGray
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.HeaderFontColor">
      <summary>
            【Header字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.fvalue">
      <summary>
            Value
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.sortable">
      <summary>
            是否有排序功能
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.rowspan">
      <summary>
            欄位合併
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.usetip">
      <summary>
            有無Tip
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.tooltip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.CHeaderCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.CHeaderCell.#ctor">
      <summary>
            建構
            </summary>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetValue(System.Object)">
      <summary>
            Set Caption
            </summary>
      <param name="_Txt">Caption</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetValueColor(System.Object,System.Object)">
      <summary>
            設定內容及背景色
            </summary>
      <param name="_Caption">內容</param>
      <param name="_Color">背景色;null自動代入DefaultBackColor</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            設定內容、背景色、字色
            </summary>
      <param name="_Caption">內容</param>
      <param name="_BC">背景色; null代入DefaultBackColor</param>
      <param name="_FC">字色; null代入DefaultFontColor</param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetColorStyle(DevAge.Drawing.BackgroundColorStyle)">
      <summary>
            設定色彩表現方式
            </summary>
      <param name="colorStyle">
      </param>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="M:SourceCell.CHeaderCell.SetTip">
      <summary>
            設定Tip
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Caption">
      <summary>
            標題
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Sortable">
      <summary>
            是否有排序功能; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.UseTip">
      <summary>
            是否有Tip; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.ToolTip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Image">
      <summary>
            圖示
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.Enable">
      <summary>
             編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="P:SourceCell.CHeaderCell.ColorStyle">
      <summary>
            色彩表現方式
            </summary>
    </member>
    <member name="T:SourceCell.RHeaderCell">
      <summary>
            列標題
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.HeaderBackColor">
      <summary>
            【Header背景色】Default：Color.DarkGray
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.HeaderFontColor">
      <summary>
            【Header字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.fvalue">
      <summary>
            Value
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.rowspan">
      <summary>
            欄位合併
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.usetip">
      <summary>
            有無Tip
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.tooltip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.RHeaderCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.RHeaderCell.#ctor">
      <summary>
            建構
            </summary>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記錄之前顏色
            </summary>
      <param name="_Color">顏色</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原成之前顏色)
            </summary>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetValue(System.Object)">
      <summary>
            Set Caption
            </summary>
      <param name="_Txt">Caption</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetValueColor(System.Object,System.Object)">
      <summary>
            設定內容及背景色
            </summary>
      <param name="_Caption">內容</param>
      <param name="_Color">背景色;null自動代入DefaultBackColor</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            設定內容、背景色、字色
            </summary>
      <param name="_Caption">內容</param>
      <param name="_BC">背景色; null代入DefaultBackColor</param>
      <param name="_FC">字色; null代入DefaultFontColor</param>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="M:SourceCell.RHeaderCell.SetTip">
      <summary>
            設定Tip
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Caption">
      <summary>
            標題
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.UseTip">
      <summary>
            是否有Tip; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.ToolTip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Image">
      <summary>
            設定圖片
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.Enable">
      <summary>
            編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.RHeaderCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="T:SourceCell.TextCell">
      <summary>
            TextBox 的Cell
            </summary>
    </member>
    <member name="T:SourceCell.TextCell.TextType">
      <summary>
            欄位型態
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.TextBackColor">
      <summary>
            【Text背景色】Default：Color.White
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.TextFontColor">
      <summary>
            【Text字色】Default：Color.Black
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.fvalue">
      <summary>
            Value
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.texttype">
      <summary>
            欄位型態
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.columnspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.rowspan">
      <summary>
            合併欄位
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.em">
      <summary>
            點擊修改模式
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.textAlignment">
      <summary>
            內容對齊方式
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.fontname">
      <summary>
            字型名稱
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.fontsize">
      <summary>
            字型大小
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.fontstyle">
      <summary>
            字型樣式
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.hasborder">
      <summary>
            有無邊框
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.usetip">
      <summary>
            有無Tip
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.tooltip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.format">
      <summary>
            格式化
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.border">
      <summary>
            邊框
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.dbackcolor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.backcolor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.dfontcolor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="F:SourceCell.TextCell.fontcolor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="M:SourceCell.TextCell.#ctor">
      <summary>
            建構; 商品資料建構時輸入後無法修改，欄位資料可使用範例方式建立
            範例: _TextCell(){BackColor =Color.White}
            </summary>
    </member>
    <member name="M:SourceCell.TextCell.#ctor(System.Object,System.Type)">
      <summary>
            建構
            </summary>
      <param name="Value">
      </param>
      <param name="CellType">
      </param>
    </member>
    <member name="M:SourceCell.TextCell.DoValueChanged(System.Object,System.EventArgs)">
      <summary>
            Value Changed
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:SourceCell.TextCell.SetBackColor(System.Object)">
      <summary>
            設定背景色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.TextCell.SetFontColor(System.Object)">
      <summary>
            設定字色
            </summary>
      <param name="_Color">要設定的背景色, null則還原為預設值</param>
    </member>
    <member name="M:SourceCell.TextCell.SetImage(System.Drawing.Image)">
      <summary>
            設定圖片
            </summary>
      <param name="_Image">
      </param>
    </member>
    <member name="M:SourceCell.TextCell.SetValueColor(System.Object,System.Object)">
      <summary>
            設定內容及背景色
            </summary>
      <param name="_Txt">內容</param>
      <param name="_Color">背景色;null自動代入DefaultBackColor</param>
    </member>
    <member name="M:SourceCell.TextCell.SetValueColor(System.Object,System.Object,System.Object)">
      <summary>
            設定內容、背景色、字色
            </summary>
      <param name="_Txt">內容</param>
      <param name="_BC">背景色; null代入DefaultBackColor</param>
      <param name="_FC">字色; null代入DefaultFontColor</param>
    </member>
    <member name="M:SourceCell.TextCell.SetValue(System.Object)">
      <summary>
            設定欄位值
            </summary>
      <param name="_Txt">欄位值</param>
    </member>
    <member name="M:SourceCell.TextCell.SelectRow(System.Boolean)">
      <summary>
            選取/取消選取 欄位所在的Row
            </summary>
      <param name="IsSelect">是否選取</param>
    </member>
    <member name="M:SourceCell.TextCell.SelectCell(System.Int32,System.Boolean,System.Nullable{System.Drawing.Color})">
      <summary>
            選取/取消選取 欄位所在Row的某個Cell
            </summary>
      <param name="ColumnIndex">Cell的Column Index</param>
      <param name="IsSelect">是否選取</param>
      <param name="SelectionColor">選取顏色</param>
    </member>
    <member name="M:SourceCell.TextCell.PaintRow(System.Drawing.Color)">
      <summary>
            整Row上色
            </summary>
      <param name="_Color">null 則還原為預設值</param>
    </member>
    <member name="M:SourceCell.TextCell.PaintRowByMemory(System.Drawing.Color)">
      <summary>
            整Row上色, 並記住之前顏色
            </summary>
      <param name="_Color">上色</param>
    </member>
    <member name="M:SourceCell.TextCell.PaintRowFromMemory">
      <summary>
            整Row上色(還原為之前記住的顏色)
            </summary>
    </member>
    <member name="M:SourceCell.TextCell.SetDataBinding(System.Type,System.String,System.Object,System.Int32)">
      <summary>
            物件資料綁定
            2014/02/07 Modify for Array Binding
            </summary>
      <param name="type">物件型態</param>
      <param name="PropertyName">綁定的物件屬性</param>
      <param name="LinkObject">綁定的物件</param>
      <param name="Index">綁定的物件的index</param>
      <returns>是否成功</returns>
    </member>
    <member name="M:SourceCell.TextCell.SetCell">
      <summary>
            建立欄位
            </summary>
    </member>
    <member name="M:SourceCell.TextCell.SetTip">
      <summary>
            設定Tip
            </summary>
    </member>
    <member name="M:SourceCell.TextCell.SetTextType">
      <summary>
            設定欄位型態
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Cell">
      <summary>
            SourceGrid.Cells.ICell
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Field">
      <summary>
            Cell
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Value">
      <summary>
            Cell Value
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.CellType">
      <summary>
            欄位型態
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.ColumnSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.RowSpan">
      <summary>
            合併欄位; 預設值: 1
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.EditMode">
      <summary>
            欄位修改模式
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.TextAlignment">
      <summary>
            內容對齊方式;　預設值:MiddleCenter
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.FontName">
      <summary>
            字形; 預設Arial
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.FontSize">
      <summary>
            字型大小; 預設 8
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.FontStyle">
      <summary>
            字型樣式; 預設 一般
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.HasBorder">
      <summary>
            是否有邊框; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Border">
      <summary>
            設定邊框樣式
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.UseTip">
      <summary>
            是否有Tip; 預設值: False
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.ToolTip">
      <summary>
            Tip內容
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Enable">
      <summary>
            編輯狀態; 預設值: false
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.WordWrap">
      <summary>
            換行
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.DefaultBackColor">
      <summary>
            Default BackColor
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.DefaultFontColor">
      <summary>
            Default FontColor
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.BackColor">
      <summary>
            BackColor
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.FontColor">
      <summary>
            FontColor
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Image">
      <summary>
            設定圖片
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Format">
      <summary>
            格式化
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.NumericType">
      <summary>
            UpDown Button的Type, 非Numeric無作用
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Maximum">
      <summary>
            UpDown Button的最大值, 非Numeric無作用
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Minimum">
      <summary>
            UpDown Button的最小值, 非Numeric無作用
            </summary>
    </member>
    <member name="P:SourceCell.TextCell.Increment">
      <summary>
            UpDown Button的增減值, 非Numeric無作用
            </summary>
    </member>
    <member name="E:SourceCell.TextCell.OnBeforeIncrement">
      <summary>
            NumericUpDown才有作用
            </summary>
    </member>
    <member name="E:SourceCell.TextCell.OnAfterIncrement">
      <summary>
            NumericUpDown才有作用
            </summary>
    </member>
    <member name="E:SourceCell.TextCell.OnBeforeDecrement">
      <summary>
            NumericUpDown才有作用
            </summary>
    </member>
    <member name="E:SourceCell.TextCell.OnAfterDecrement">
      <summary>
            NumericUpDown才有作用
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ObjectListView">
      <summary>
            An ObjectListView is a much easier to use, and much more powerful, version of the ListView.
            </summary>
      <remarks>
        <para>
            An ObjectListView automatically populates a ListView control with information taken 
            from a given collection of objects. It can do this because each column is configured
            to know which bit of the model object (the "aspect") it should be displaying. Columns similarly
            understand how to sort the list based on their aspect, and how to construct groups
            using their aspect.
            </para>
        <para>
            Aspects are extracted by giving the name of a method to be called or a
            property to be fetched. These names can be simple names or they can be dotted
            to chain property access e.g. "Owner.Address.Postcode".
            Aspects can also be extracted by installing a delegate.
            </para>
        <para>
            An ObjectListView can show a "this list is empty" message when there is nothing to show in the list, 
            so that the user knows the control is supposed to be empty.
            </para>
        <para>
            Right clicking on a column header should present a menu which can contain:
            commands (sort, group, ungroup); filtering; and column selection. Whether these
            parts of the menu appear is controlled by ShowCommandMenuOnRightClick, 
            ShowFilterMenuOnRightClick and SelectColumnsOnRightClick respectively.
            </para>
        <para>
            The groups created by an ObjectListView can be configured to include other formatting
            information, including a group icon, subtitle and task button. Using some undocumented
            interfaces, these groups can even on virtual lists.
            </para>
        <para>
            ObjectListView supports dragging rows to other places, including other application. 
            Special support is provide for drops from other ObjectListViews in the same application. 
            In many cases, an ObjectListView becomes a full drag source by setting <see cref="P:BrightIdeasSoftware.ObjectListView.IsSimpleDragSource" /> to 
            true. Similarly, to accept drops, it is usually enough to set <see cref="P:BrightIdeasSoftware.ObjectListView.IsSimpleDropSink" /> to true, 
            and then handle the <see cref="E:BrightIdeasSoftware.ObjectListView.CanDrop" />  and <see cref="E:BrightIdeasSoftware.ObjectListView.Dropped" />  events (or the <see cref="E:BrightIdeasSoftware.ObjectListView.ModelCanDrop" />  and 
            <see cref="E:BrightIdeasSoftware.ObjectListView.ModelDropped" /> events, if you only want to handle drops from other ObjectListViews in your application).
            </para>
        <para>
            For these classes to build correctly, the project must have references to these assemblies:
            </para>
        <list type="bullet">
          <item>
            <description>System</description>
          </item>
          <item>
            <description>System.Data</description>
          </item>
          <item>
            <description>System.Design</description>
          </item>
          <item>
            <description>System.Drawing</description>
          </item>
          <item>
            <description>System.Windows.Forms (obviously)</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.ObjectListView.CellEditActivateMode">
      <summary>
            How does a user indicate that they want to edit cells?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ObjectListView.ColumnSelectBehaviour">
      <summary>
            These values specify how column selection will be presented to the user
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ObjectListView.ObjectListViewState">
      <summary>
            Instances of this class are used to store the state of an ObjectListView.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ObjectListView.SuspendSelectionDisposable">
      <summary>
            Implementation only class that suspends and resumes selection
            events on instance creation and disposal.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.SORT_INDICATOR_UP_KEY">
      <summary>
            The name of the image used when a column is sorted ascending
            </summary>
      <remarks>This image is only used on pre-XP systems. System images are used for XP and later</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.SORT_INDICATOR_DOWN_KEY">
      <summary>
            The name of the image used when a column is sorted descending
            </summary>
      <remarks>This image is only used on pre-XP systems. System images are used for XP and later</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.CHECKED_KEY">
      <summary>
            The name of the image used when a check box is checked
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.UNCHECKED_KEY">
      <summary>
            The name of the image used when a check box is unchecked
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.INDETERMINATE_KEY">
      <summary>
            The name of the image used when a check box is Indeterminate
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.EditorRegistry">
      <summary>
            This registry decides what control should be used to edit what cells, based
            on the type of the value in the cell.
            </summary>
      <see cref="F:BrightIdeasSoftware.ObjectListView.EditorRegistry" />
      <remarks>All instances of ObjectListView share the same editor registry.</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.SortAscendingImage">
      <summary>
            Gets or sets the image that will be place next to the Sort Ascending command
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ObjectListView.SortDescendingImage">
      <summary>
            Gets or sets the image that will be placed next to the Sort Descending command
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnAboutToCreateGroups(BrightIdeasSoftware.CreateGroupsEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnBeforeCreatingGroups(BrightIdeasSoftware.CreateGroupsEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnAfterCreatingGroups(BrightIdeasSoftware.CreateGroupsEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnAfterSearching(BrightIdeasSoftware.AfterSearchingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnAfterSorting(BrightIdeasSoftware.AfterSortingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnBeforeSearching(BrightIdeasSoftware.BeforeSearchingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnBeforeSorting(BrightIdeasSoftware.BeforeSortingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCanDrop(BrightIdeasSoftware.OlvDropEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellClick(BrightIdeasSoftware.CellClickEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellOver(BrightIdeasSoftware.CellOverEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellRightClick(BrightIdeasSoftware.CellRightClickEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellToolTip(BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnSubItemChecking(BrightIdeasSoftware.SubItemCheckingEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnColumnRightClick(System.Windows.Forms.ColumnClickEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDropped(BrightIdeasSoftware.OlvDropEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnFilter(BrightIdeasSoftware.FilterEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnFormatCell(BrightIdeasSoftware.FormatCellEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnFormatRow(BrightIdeasSoftware.FormatRowEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnFreezing(BrightIdeasSoftware.FreezeEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnGroupExpandingCollapsing(BrightIdeasSoftware.GroupExpandingCollapsingEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnGroupStateChanged(BrightIdeasSoftware.GroupStateChangedEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnHeaderToolTip(BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnHotItemChanged(BrightIdeasSoftware.HotItemChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnHyperlinkClicked(BrightIdeasSoftware.HyperlinkClickedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnGroupTaskClicked(BrightIdeasSoftware.GroupTaskClickedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnIsHyperlink(BrightIdeasSoftware.IsHyperlinkEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnItemsAdding(BrightIdeasSoftware.ItemsAddingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnItemsChanged(BrightIdeasSoftware.ItemsChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnItemsChanging(BrightIdeasSoftware.ItemsChangingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnItemsRemoving(BrightIdeasSoftware.ItemsRemovingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnModelCanDrop(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnModelDropped(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnSelectionChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnScroll(System.Windows.Forms.ScrollEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellEditStarting(BrightIdeasSoftware.CellEditEventArgs)">
      <summary>
            Tell the world when a cell is about to be edited.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellEditorValidating(BrightIdeasSoftware.CellEditEventArgs)">
      <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnCellEditFinishing(BrightIdeasSoftware.CellEditEventArgs)">
      <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.#ctor">
      <summary>
            Create an ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Dispose(System.Boolean)">
      <summary>
            Dispose of any resources this instance has been using
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EnumerableToArray(System.Collections.IEnumerable,System.Boolean)">
      <summary>
            Convert the given enumerable into an ArrayList as efficiently as possible
            </summary>
      <param name="collection">The source collection</param>
      <param name="alwaysCreate">If true, this method will always create a new
            collection.</param>
      <returns>An ArrayList with the same contents as the given collection.</returns>
      <remarks>
        <para>When we move to .NET 3.5, we can use LINQ and not need this method.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsEnumerableEmpty(System.Collections.IEnumerable)">
      <summary>
            Return whether or not the given enumerable is empty. A string is regarded as 
            an empty collection.
            </summary>
      <param name="collection">
      </param>
      <returns>True if the given collection is null or empty</returns>
      <remarks>
        <para>When we move to .NET 3.5, we can use LINQ and not need this method.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AddObject(System.Object)">
      <summary>
            Add the given model object to this control.
            </summary>
      <param name="modelObject">The model object to be displayed</param>
      <remarks>See AddObjects() for more details</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AddObjects(System.Collections.ICollection)">
      <summary>
            Add the given collection of model objects to this control.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
      <remarks>
        <para>The added objects will appear in their correct sort position, if sorting
            is active (i.e. if LastSortColumn is not null). Otherwise, they will appear at the end of the list.</para>
        <para>No check is performed to see if any of the objects are already in the ListView.</para>
        <para>Null objects are silently ignored.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AutoResizeColumns">
      <summary>
            Resize the columns to the maximum of the header width and the data.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AutoSizeColumns">
      <summary>
            Set up any automatically initialized column widths (columns that 
            have a width of 0 or -1 will be resized to the width of their 
            contents or header respectively).
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.BuildGroups">
      <summary>
            Organise the view items into groups, based on the last sort column or the first column
            if there is no last sort column
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.BuildGroups(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Organise the view items into groups, based on the given column
            </summary>
      <remarks>
        <para>
            If the AlwaysGroupByColumn property is not null,
            the list view items will be organisd by that column,
            and the 'column' parameter will be ignored.
            </para>
        <para>This method triggers sorting events: BeforeSorting and AfterSorting.</para>
      </remarks>
      <param name="column">The column whose values should be used for sorting.</param>
      <param name="order">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.BuildGroups(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Organise the view items into groups, based on the given columns
            </summary>
      <param name="groupByColumn">What column will be used for grouping</param>
      <param name="groupByOrder">What ordering will be used for groups</param>
      <param name="column">The column whose values should be used for sorting. Cannot be null</param>
      <param name="order">The order in which the values from column will be sorted</param>
      <param name="secondaryColumn">When the values from 'column' are equal, use the values provided by this column</param>
      <param name="secondaryOrder">How will the secondary values be sorted</param>
      <remarks>This method does not trigger sorting events. Use BuildGroups() to do that</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CollectGroupingParameters(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Collect and return all the variables that influence the creation of groups
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeGroups(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Make a list of groups that should be shown according to the given parameters
            </summary>
      <param name="parms">
      </param>
      <returns>The list of groups to be created</returns>
      <remarks>This should not change the state of the control. It is possible that the
            groups created will not be used. They may simply be discarded.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.BuildList">
      <summary>
            Build/rebuild all the list view items in the list, preserving as much state as is possible
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.BuildList(System.Boolean)">
      <summary>
            Build/rebuild all the list view items in the list
            </summary>
      <param name="shouldPreserveState">If this is true, the control will try to preserve the selection,
            focused item, and the scroll position (see Remarks)
            </param>
      <remarks>
        <para>
            Use this method in situations were the contents of the list is basically the same
            as previously.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ApplyExtendedStyles">
      <summary>
            Apply all required extended styles to our control.
            </summary>
      <remarks>
        <para>
            Whenever .NET code sets an extended style, it erases all other extended styles
            that it doesn't use. So, we have to explicit reapply the styles that we have
            added.
            </para>
        <para>
            Normally, we would override CreateParms property and update
            the ExStyle member, but ListView seems to ignore all ExStyles that
            it doesn't already know about. Worse, when we set the LVS_EX_HEADERINALLVIEWS 
            value, bad things happen (the control crashes!).
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateReasonableTileSize">
      <summary>
            Give the listview a reasonable size of its tiles, based on the number of lines of
            information that each tile is going to display.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ChangeToFilteredColumns(System.Windows.Forms.View)">
      <summary>
            Rebuild this list for the given view
            </summary>
      <param name="view">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ClearObjects">
      <summary>
            Remove all items from this list
            </summary>
      <remark>This method can safely be called from background threads.</remark>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ClearUrlVisited">
      <summary>
            Reset the memory of which URLs have been visited
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CopySelectionToClipboard">
      <summary>
            Copy a text and html representation of the selected rows onto the clipboard.
            </summary>
      <remarks>Be careful when using this with virtual lists. If the user has selected
            10,000,000 rows, this method will faithfully try to copy all of them to the clipboard.
            From the user's point of view, your program will appear to have hung.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CopyObjectsToClipboard(System.Collections.IList)">
      <summary>
            Copy a text and html representation of the given objects onto the clipboard.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ObjectsToHtml(System.Collections.IList)">
      <summary>
            Return a html representation of the given objects
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.DeselectAll">
      <summary>
            Deselect all rows in the listview
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EnableCustomSelectionColors">
      <summary>
            Setup the list so it will draw selected rows using custom colours.
            </summary>
      <remarks>
            This method makes the list owner drawn, and ensures that all columns have at
            least a BaseRender installed.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetNextItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Return the ListViewItem that appears immediately after the given item.
            If the given item is null, the first item in the list will be returned.
            Return null if the given item is the last item.
            </summary>
      <param name="itemToFind">The item that is before the item that is returned, or null</param>
      <returns>A ListViewItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetLastItemInDisplayOrder">
      <summary>
            Return the last item in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetNthItemInDisplayOrder(System.Int32)">
      <summary>
            Return the n'th item (0-based) in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetDisplayOrderOfItemIndex(System.Int32)">
      <summary>
            Return the display index of the given listviewitem index.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetPreviousItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Return the ListViewItem that appears immediately before the given item.
            If the given item is null, the last item in the list will be returned.
            Return null if the given item is the first item.
            </summary>
      <param name="itemToFind">The item that is before the item that is returned</param>
      <returns>A ListViewItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.InsertObjects(System.Int32,System.Collections.ICollection)">
      <summary>
             Insert the given collection of objects before the given position
             </summary>
      <param name="index">Where to insert the objects</param>
      <param name="modelObjects">The objects to be inserted</param>
      <remarks>
        <para>
             This operation only makes sense of non-sorted, non-grouped
             lists, since any subsequent sort/group operation will rearrange
             the list.
             </para>
        <para>This method only works on ObjectListViews and FastObjectListViews.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsSelected(System.Object)">
      <summary>
            Return true if the row representing the given model is selected
            </summary>
      <param name="model">The model object to look for</param>
      <returns>Is the row selected</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsUrlVisited(System.String)">
      <summary>
            Has the given URL been visited?
            </summary>
      <param name="url">The string to be consider</param>
      <returns>Has it been visited</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.LowLevelScroll(System.Int32,System.Int32)">
      <summary>
            Scroll the ListView by the given deltas.
            </summary>
      <param name="dx">Horizontal delta</param>
      <param name="dy">Vertical delta</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MarkUrlVisited(System.String)">
      <summary>
            Remember that the given URL has been visited
            </summary>
      <param name="url">The url to be remembered</param>
      <remarks>This does not cause the control be redrawn</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MoveObjects(System.Int32,System.Collections.ICollection)">
      <summary>
            Move the given collection of objects to the given index.
            </summary>
      <remarks>This operation only makes sense on non-grouped ObjectListViews.</remarks>
      <param name="index">
      </param>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HitTest(System.Int32,System.Int32)">
      <summary>
            Calculate what item is under the given point?
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.LowLevelHitTest(System.Int32,System.Int32)">
      <summary>
            Perform a hit test using the Windows control's SUBITEMHITTEST message.
            This provides information about group hits that the standard ListView.HitTest() does not.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OlvHitTest(System.Int32,System.Int32)">
      <summary>
            What is under the given point? This takes the various parts of a cell into accout, including
            any custom parts that a custom renderer might use
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>An information block about what is under the point</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateStandardHitTest(BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Perform a hit test when the control is not owner drawn
            </summary>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateOwnerDrawnHitTest(BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Perform a hit test when the control is owner drawn. This hands off responsibility
            to the renderer.
            </summary>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PauseAnimations(System.Boolean)">
      <summary>
            Pause (or unpause) all animations in the list
            </summary>
      <param name="isPause">true to pause, false to unpause</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RebuildColumns">
      <summary>
            Rebuild the columns based upon its current view and column visibility settings
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RemoveObject(System.Object)">
      <summary>
            Remove the given model object from the ListView
            </summary>
      <param name="modelObject">The model to be removed</param>
      <remarks>See RemoveObjects() for more details
            <para>This method is thread-safe.</para></remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove all of the given objects from the control.
            </summary>
      <param name="modelObjects">Collection of objects to be removed</param>
      <remarks>
        <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
        <para>This method is thread-safe.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SelectAll">
      <summary>
            Select all rows in the listview
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)">
      <summary>
            Set the given image to be fixed in the bottom right of the list view.
            This image will not scroll when the list view scrolls.
            </summary>
      <remarks>
        <para>
            This method uses ListView's native ability to display a background image.
            It has a few limitations: 
            </para>
        <list type="bullet">
          <item>
            <description>It doesn't work well with owner drawn mode. In owner drawn mode, each cell draws itself,
            including its background, which covers the background image.</description>
          </item>
          <item>
            <description>It doesn't look very good when grid lines are enabled, since the grid lines are drawn over the image.</description>
          </item>
          <item>
            <description>It does not work at all on XP.</description>
          </item>
          <item>
            <description>Obviously, it doesn't look good when alternate row background colors are enabled.</description>
          </item>
        </list>
        <para>
            If you can live with these limitations, native watermarks are quite neat. They are true backgrounds, not
            translucent overlays like the OverlayImage uses. They also have the decided advantage over overlays in that
            they work correctly even in MDI applications.
            </para>
        <para>Setting this clears any background image.</para>
      </remarks>
      <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundImage(System.Drawing.Image,System.Int32,System.Int32)">
      <summary>
            Set the given image to be background of the ListView so that it appears at the given
            percentage offsets within the list.
            </summary>
      <remarks>
        <para>This has the same limitations as described in <see cref="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)" />. Make sure those limitations
            are understood before using the method.</para>
        <para>This is very similar to setting the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property of the standard .NET ListView, except that the standard
            BackgroundImage does not handle images with transparent areas properly -- it renders transparent areas as black. This 
            method does not have that problem.</para>
        <para>Setting this clears any background watermark.</para>
      </remarks>
      <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
      <param name="xOffset">The horizontal percentage where the image will be placed. 0 is absolute left, 100 is absolute right.</param>
      <param name="yOffset">The vertical percentage where the image will be placed.</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundTiledImage(System.Drawing.Image)">
      <summary>
            Set the given image to be the tiled background of the ListView.
            </summary>
      <remarks>
        <para>This has the same limitations as described in <see cref="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)" /> and <see cref="M:BrightIdeasSoftware.ObjectListView.SetNativeBackgroundImage(System.Drawing.Image,System.Int32,System.Int32)" />.
            Make sure those limitations
            are understood before using the method.</para>
      </remarks>
      <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetObjects(System.Collections.IEnumerable)">
      <summary>
            Set the collection of objects that will be shown in this list view.
            </summary>
      <remark>This method can safely be called from background threads.</remark>
      <remarks>The list is updated immediately</remarks>
      <param name="collection">The objects to be displayed</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetObjects(System.Collections.IEnumerable,System.Boolean)">
      <summary>
            Set the collection of objects that will be shown in this list view.
            </summary>
      <remark>This method can safely be called from background threads.</remark>
      <remarks>The list is updated immediately</remarks>
      <param name="collection">The objects to be displayed</param>
      <param name="preserveState">Should the state of the list be preserved as far as is possible.</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateNotificationSubscriptions(System.Collections.IEnumerable)">
      <summary>
            Change any subscriptions to INotifyPropertyChanged events on our current
            model objects so that we no longer listen for events on the old models
            and do listen for events on the given collection.
            </summary>
      <remarks>This does nothing if UseNotifyPropertyChanged is false.</remarks>
      <param name="collection">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SaveState">
      <summary>
            Return a byte array that represents the current state of the ObjectListView, such
            that the state can be restored by RestoreState()
            </summary>
      <remarks>
        <para>The state of an ObjectListView includes the attributes that the user can modify:
            <list type="bullet"><item><description>current view (i.e. Details, Tile, Large Icon...)</description></item><item><description>sort column and direction</description></item><item><description>column order</description></item><item><description>column widths</description></item><item><description>column visibility</description></item></list></para>
        <para>
            It does not include selection or the scroll position.
            </para>
      </remarks>
      <returns>A byte array representing the state of the ObjectListView</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RestoreState(System.Byte[])">
      <summary>
            Restore the state of the control from the given string, which must have been
            produced by SaveState()
            </summary>
      <param name="state">A byte array returned from SaveState()</param>
      <returns>Returns true if the state was restored</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleApplicationIdle(System.Object,System.EventArgs)">
      <summary>
            The application is idle. Trigger a SelectionChanged event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleApplicationIdleResizeColumns(System.Object,System.EventArgs)">
      <summary>
            The application is idle. Trigger a SelectionChanged event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleBeginScroll(System.Windows.Forms.Message@)">
      <summary>
            Handle the BeginScroll listview notification
            </summary>
      <param name="m">
      </param>
      <returns>True if the event was completely handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleEndScroll(System.Windows.Forms.Message@)">
      <summary>
            Handle the EndScroll listview notification
            </summary>
      <param name="m">
      </param>
      <returns>True if the event was completely handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleLinkClick(System.Windows.Forms.Message@)">
      <summary>
            Handle the LinkClick listview notification
            </summary>
      <param name="m">
      </param>
      <returns>True if the event was completely handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleCellToolTipShowing(System.Object,BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
            The cell tooltip control wants information about the tool tip that it should show.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HeaderToolTipShowingCallback(System.Object,BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
            Allow the HeaderControl to call back into HandleHeaderToolTipShowing without making that method public
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleHeaderToolTipShowing(System.Object,BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
            The header tooltip control wants information about the tool tip that it should show.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
      <summary>
            Event handler for the column click event
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Override the basic message pump for this control
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleChar(System.Windows.Forms.Message@)">
      <summary>
            Handle the search for item m if possible.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleContextMenu(System.Windows.Forms.Message@)">
      <summary>
            The user wants to see the context menu.
            </summary>
      <param name="m">The windows m</param>
      <returns>A bool indicating if this m has been handled</returns>
      <remarks>
            We want to ignore context menu requests that are triggered by right clicks on the header
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleCustomDraw(System.Windows.Forms.Message@)">
      <summary>
            Handle the Custom draw series of notifications
            </summary>
      <param name="m">The message</param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleDestroy(System.Windows.Forms.Message@)">
      <summary>
            Handle the underlying control being destroyed
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleFindItem(System.Windows.Forms.Message@)">
      <summary>
            Handle the search for item m if possible.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FindMatchingRow(System.String,System.Int32,System.Windows.Forms.SearchDirectionHint)">
      <summary>
            Find the first row after the given start in which the text value in the
            comparison column begins with the given text. The comparison column is column 0,
            unless IsSearchOnSortColumn is true, in which case the current sort column is used.
            </summary>
      <param name="text">The text to be prefix matched</param>
      <param name="start">The index of the first row to consider</param>
      <param name="direction">Which direction should be searched?</param>
      <returns>The index of the first row that matched, or -1</returns>
      <remarks>The text comparison is a case-insensitive, prefix match. The search will
            search the every row until a match is found, wrapping at the end if needed.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FindMatchInRange(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Find the first row in the given range of rows that prefix matches the string value of the given column.
            </summary>
      <param name="text">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>The index of the matched row, or -1</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleGroupInfo(System.Windows.Forms.Message@)">
      <summary>
            Handle the Group Info series of notifications
            </summary>
      <param name="m">The message</param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleKeyDown(System.Windows.Forms.Message@)">
      <summary>
            Handle a key down message
            </summary>
      <param name="m">
      </param>
      <returns>True if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleLButtonDown(System.Windows.Forms.Message@)">
      <summary>
            Catch the Left Button down event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessLButtonDown(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            Handle a left mouse down at the given hit test location
            </summary>
      <remarks>Subclasses can override this to do something unique</remarks>
      <param name="hti">
      </param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleLButtonUp(System.Windows.Forms.Message@)">
      <summary>
            Catch the Left Button up event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.TriggerGroupExpandCollapse(BrightIdeasSoftware.OLVGroup)">
      <summary>
            Trigger a GroupExpandCollapse event and return true if the action was cancelled
            </summary>
      <param name="group">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleRButtonDown(System.Windows.Forms.Message@)">
      <summary>
            Catch the Right Button down event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessRButtonDown(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            Handle a left mouse down at the given hit test location
            </summary>
      <remarks>Subclasses can override this to do something unique</remarks>
      <param name="hti">
      </param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleLButtonDoubleClick(System.Windows.Forms.Message@)">
      <summary>
            Catch the Left Button double click event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessLButtonDoubleClick(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            Handle a mouse double click at the given hit test location
            </summary>
      <remarks>Subclasses can override this to do something unique</remarks>
      <param name="hti">
      </param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleRButtonDoubleClick(System.Windows.Forms.Message@)">
      <summary>
            Catch the right Button double click event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessRButtonDoubleClick(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            Handle a right mouse double click at the given hit test location
            </summary>
      <remarks>Subclasses can override this to do something unique</remarks>
      <param name="hti">
      </param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleMouseMove(System.Windows.Forms.Message@)">
      <summary>
            Catch the MouseMove event.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleReflectNotify(System.Windows.Forms.Message@)">
      <summary>
            Handle notifications that have been reflected back from the parent window
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleNotify(System.Windows.Forms.Message@)">
      <summary>
            In the notification messages, we handle attempts to change the width of our columns
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CreateCellToolTip">
      <summary>
            Create a ToolTipControl to manage the tooltip control used by the listview control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateCellToolTipHandle">
      <summary>
            Update the handle used by our cell tooltip to be the tooltip used by
            the underlying Windows listview control.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandlePaint(System.Windows.Forms.Message@)">
      <summary>
            Handle the WM_PAINT event
            </summary>
      <param name="m">
      </param>
      <returns>Return true if the msg has been handled and nothing further should be done</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandlePrePaint">
      <summary>
            Perform any steps needed before painting the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandlePostPaint">
      <summary>
            Perform any steps needed after painting the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleWindowPosChanging(System.Windows.Forms.Message@)">
      <summary>
            Handle the window position changing.
            </summary>
      <param name="m">The m to be processed</param>
      <returns>bool to indicate if the msg has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleHeaderRightClick(System.Int32)">
      <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
      <returns>Return true if this event has been handle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowHeaderRightClickMenu(System.Int32,System.Drawing.Point)">
      <summary>
            Show a menu that is appropriate when the given column header is clicked.
            </summary>
      <param name="columnIndex">The index of the header that was clicked. This
            can be -1, indicating that the header was clicked outside of a column</param>
      <param name="pt">Where should the menu be shown</param>
      <returns>True if a menu was displayed</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeHeaderRightClickMenu(System.Int32)">
      <summary>
            Create the menu that should be displayed when the user right clicks
            on the given column header.
            </summary>
      <param name="columnIndex">Index of the column that was right clicked.
            This can be negative, which indicates a click outside of any header.</param>
      <returns>The toolstrip that should be displayed</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleHeaderRightClick">
      <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
      <returns>Return true if this event has been handle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowColumnSelectMenu(System.Drawing.Point)">
      <summary>
            Show a popup menu at the given point which will allow the user to choose which columns
            are visible on this listview
            </summary>
      <param name="pt">Where should the menu be placed</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowColumnCommandMenu(System.Int32,System.Drawing.Point)">
      <summary>
            Show a popup menu at the given point which will allow the user to choose which columns
            are visible on this listview
            </summary>
      <param name="columnIndex">
      </param>
      <param name="pt">Where should the menu be placed</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeColumnCommandMenu(System.Windows.Forms.ToolStripDropDown,System.Int32)">
      <summary>
            Append the column selection menu items to the given menu strip.
            </summary>
      <param name="strip">The menu to which the items will be added.</param>
      <param name="columnIndex">
      </param>
      <returns>Return the menu to which the items were added</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeColumnSelectMenu(System.Windows.Forms.ToolStripDropDown)">
      <summary>
            Append the column selection menu items to the given menu strip.
            </summary>
      <param name="strip">The menu to which the items will be added.</param>
      <returns>Return the menu to which the items were added</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AddItemsToColumnSelectMenu(System.Windows.Forms.ToolStripItemCollection)">
      <summary>
            Create the menu items that will allow columns to be choosen and add them to the 
            given collection
            </summary>
      <param name="items">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeFilteringMenu(System.Windows.Forms.ToolStripDropDown,System.Int32)">
      <summary>
            Create a Filtering menu
            </summary>
      <param name="strip">
      </param>
      <param name="columnIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)">
      <summary>
            Override the OnColumnReordered method to do what we want
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleColumnWidthChanging(System.Object,System.Windows.Forms.ColumnWidthChangingEventArgs)">
      <summary>
            When the column widths are changing, resize the space filling columns
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleColumnWidthChanged(System.Object,System.Windows.Forms.ColumnWidthChangedEventArgs)">
      <summary>
            When the column widths change, resize the space filling columns
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HandleLayout(System.Object,System.Windows.Forms.LayoutEventArgs)">
      <summary>
            When the size of the control changes, we have to resize our space filling columns.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ResizeFreeSpaceFillingColumns">
      <summary>
            Resize our space filling columns so they fill any unoccupied width in the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ResizeFreeSpaceFillingColumns(System.Int32)">
      <summary>
            Resize our space filling columns so they fill any unoccupied width in the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CheckIndeterminateObject(System.Object)">
      <summary>
            Mark the given object as indeterminate check state
            </summary>
      <param name="modelObject">The model object to be marked indeterminate</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CheckObject(System.Object)">
      <summary>
            Mark the given object as checked in the list
            </summary>
      <param name="modelObject">The model object to be checked</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CheckObjects(System.Collections.IEnumerable)">
      <summary>
            Mark the given objects as checked in the list
            </summary>
      <param name="modelObjects">The model object to be checked</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CheckSubItem(System.Object,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Put a check into the check box at the given cell
            </summary>
      <param name="rowObject">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CheckIndeterminateSubItem(System.Object,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Put an indeterminate check into the check box at the given cell
            </summary>
      <param name="rowObject">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsChecked(System.Object)">
      <summary>
            Return true of the given object is checked
            </summary>
      <param name="modelObject">The model object whose checkedness is returned</param>
      <returns>Is the given object checked?</returns>
      <remarks>If the given object is not in the list, this method returns false.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsCheckedIndeterminate(System.Object)">
      <summary>
            Return true of the given object is indeterminately checked
            </summary>
      <param name="modelObject">The model object whose checkedness is returned</param>
      <returns>Is the given object indeterminately checked?</returns>
      <remarks>If the given object is not in the list, this method returns false.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IsSubItemChecked(System.Object,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Is there a check at the check box at the given cell
            </summary>
      <param name="rowObject">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetCheckState(System.Object)">
      <summary>
            Get the checkedness of an object from the model. Returning null means the
            model does not know and the value from the control will be used.
            </summary>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Record the change of checkstate for the given object in the model.
            This does not update the UI -- only the model
            </summary>
      <param name="modelObject">
      </param>
      <param name="state">
      </param>
      <returns>The check state that was recorded and that should be used to update
            the control.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetObjectCheckedness(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Change the check state of the given object to be the given state.
            </summary>
      <remarks>
            If the given model object isn't in the list, we still try to remember
            its state, in case it is referenced in the future.</remarks>
      <param name="modelObject">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ToggleCheckObject(System.Object)">
      <summary>
            Toggle the checkedness of the given object. A checked object becomes
            unchecked; an unchecked or indeterminate object becomes checked.
            If the list has tristate checkboxes, the order is:
               unchecked -&gt; checked -&gt; indeterminate -&gt; unchecked ...
            </summary>
      <param name="modelObject">The model object to be checked</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ToggleSubItemCheckBox(System.Object,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Toggle the check at the check box of the given cell
            </summary>
      <param name="rowObject">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UncheckObject(System.Object)">
      <summary>
            Mark the given object as unchecked in the list
            </summary>
      <param name="modelObject">The model object to be unchecked</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UncheckObjects(System.Collections.IEnumerable)">
      <summary>
            Mark the given objects as unchecked in the list
            </summary>
      <param name="modelObjects">The model object to be checked</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UncheckSubItem(System.Object,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Uncheck the check at the given cell
            </summary>
      <param name="rowObject">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetColumn(System.Int32)">
      <summary>
            Return the column at the given index
            </summary>
      <param name="index">Index of the column to be returned</param>
      <returns>An OLVColumn</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetColumn(System.String)">
      <summary>
            Return the column at the given title.
            </summary>
      <param name="name">Name of the column to be returned</param>
      <returns>An OLVColumn</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetFilteredColumns(System.Windows.Forms.View)">
      <summary>
            Return a collection of columns that are visible to the given view.
            Only Tile and Details have columns; all other views have 0 columns.
            </summary>
      <param name="view">Which view are the columns being calculate for?</param>
      <returns>A list of columns</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetItemCount">
      <summary>
            Return the number of items in the list
            </summary>
      <returns>the number of items in the list</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetItem(System.Int32)">
      <summary>
            Return the item at the given index
            </summary>
      <param name="index">Index of the item to be returned</param>
      <returns>An OLVListItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetModelObject(System.Int32)">
      <summary>
            Return the model object at the given index
            </summary>
      <param name="index">Index of the model object to be returned</param>
      <returns>A model object</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetItemAt(System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn@)">
      <summary>
            Find the item and column that are under the given co-ords
            </summary>
      <param name="x">X co-ord</param>
      <param name="y">Y co-ord</param>
      <param name="hitColumn">The column under the given point</param>
      <returns>The item under the given point. Can be null.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetSubItem(System.Int32,System.Int32)">
      <summary>
            Return the sub item at the given index/column
            </summary>
      <param name="index">Index of the item to be returned</param>
      <param name="columnIndex">Index of the subitem to be returned</param>
      <returns>An OLVListSubItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EnsureGroupVisible(System.Windows.Forms.ListViewGroup)">
      <summary>
            Scroll the listview so that the given group is at the top.
            </summary>
      <param name="lvg">The group to be revealed</param>
      <remarks>
        <para>
            If the group is already visible, the list will still be scrolled to move
            the group to the top, if that is possible.
            </para>
        <para>This only works when the list is showing groups (obviously).</para>
        <para>This does not work on virtual lists, since virtual lists don't use ListViewGroups
            for grouping. Use <see cref="M:BrightIdeasSoftware.VirtualObjectListView.EnsureNthGroupVisible(System.Int32)" /> instead.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EnsureModelVisible(System.Object)">
      <summary>
            Ensure that the given model object is visible
            </summary>
      <param name="modelObject">The model object to be revealed</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetSelectedObject">
      <summary>
            Return the model object of the row that is selected or null if there is no selection or more than one selection
            </summary>
      <returns>Model object or null</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetSelectedObjects">
      <summary>
            Return the model objects of the rows that are selected or an empty collection if there is no selection
            </summary>
      <returns>ArrayList</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetCheckedObject">
      <summary>
            Return the model object of the row that is checked or null if no row is checked
            or more than one row is checked
            </summary>
      <returns>Model object or null</returns>
      <remarks>Use CheckedObject property instead of this method</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetCheckedObjects">
      <summary>
            Get the collection of model objects that are checked.
            </summary>
      <remarks>Use CheckedObjects property instead of this method</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.IndexOf(System.Object)">
      <summary>
            Find the given model object within the listview and return its index
            </summary>
      <param name="modelObject">The model object to be found</param>
      <returns>The index of the object. -1 means the object was not present</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Update the ListViewItem with the data from its associated model.
            </summary>
      <remarks>This method does not resort or regroup the view. It simply updates
            the displayed data of the given item</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshObject(System.Object)">
      <summary>
            Update the rows that are showing the given objects
            </summary>
      <remarks>This method does not resort or regroup the view.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshObjects(System.Collections.IList)">
      <summary>
            Update the rows that are showing the given objects
            </summary>
      <remarks>
        <para>This method does not resort or regroup the view.</para>
        <para>This method can safely be called from background threads.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshSelectedObjects">
      <summary>
            Update the rows that are selected
            </summary>
      <remarks>This method does not resort or regroup the view.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SelectObject(System.Object)">
      <summary>
            Select the row that is displaying the given model object, in addition to any current selection.
            </summary>
      <param name="modelObject">The object to be selected</param>
      <remarks>Use the <see cref="P:BrightIdeasSoftware.ObjectListView.SelectedObject" /> property to deselect all other rows</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SelectObject(System.Object,System.Boolean)">
      <summary>
            Select the row that is displaying the given model object, in addition to any current selection.
            </summary>
      <param name="modelObject">The object to be selected</param>
      <param name="setFocus">Should the object be focused as well?</param>
      <remarks>Use the <see cref="P:BrightIdeasSoftware.ObjectListView.SelectedObject" /> property to deselect all other rows</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SelectObjects(System.Collections.IList)">
      <summary>
            Select the rows that is displaying any of the given model object. All other rows are deselected.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Freeze">
      <summary>
            Freeze the listview so that it no longer updates itself.
            </summary>
      <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Unfreeze">
      <summary>
            Unfreeze the listview. If this call is the outermost Unfreeze(),
            the contents of the listview will be rebuilt.
            </summary>
      <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.DoUnfreeze">
      <summary>
            Do the actual work required when the listview is unfrozen
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SuspendSelectionEvents">
      <summary>
            Suspend selection events until a matching ResumeSelectionEvents()
            is called.
            </summary>
      <remarks>Calls to this method nest correctly. Every call to SuspendSelectionEvents()
            must have a matching ResumeSelectionEvents().</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ResumeSelectionEvents">
      <summary>
            Resume raising selection events.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SuspendSelectionEventsDuring">
      <summary>
            Returns a disposable that will disable selection events
            during a using() block.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Sort">
      <summary>
            Sort the items by the last sort column and order
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Sort(System.String)">
      <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
      <param name="columnToSortName">The name of the column whose values will be used for the sorting</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Sort(System.Int32)">
      <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
      <param name="columnToSortIndex">The index of the column whose values will be used for the sorting</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Sort(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
      <param name="columnToSort">The column whose values will be used for the sorting</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Sort(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Sort the items in the list view by the values in the given column and by the given order.
            </summary>
      <param name="columnToSort">The column whose values will be used for the sorting.
            If null, the first column will be used.</param>
      <param name="order">The ordering to be used for sorting. If this is None,
            this.Sorting and then SortOrder.Ascending will be used</param>
      <remarks>If ShowGroups is true, the rows will be grouped by the given column.
            If AlwaysGroupsByColumn is not null, the rows will be grouped by that column,
            and the rows within each group will be sorted by the given column.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowSortIndicator">
      <summary>
            Put a sort indicator next to the text of the sort column
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowSortIndicator(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Put a sort indicator next to the text of the given given column
            </summary>
      <param name="columnToSort">The column to be marked</param>
      <param name="sortOrder">The sort order in effect on that column</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeSortIndicatorImages">
      <summary>
            If the sort indicator images don't already exist, this method will make and install them
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Unsort">
      <summary>
            Remove any sorting and revert to the given order of the model objects
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CreateGroups(System.Collections.Generic.IEnumerable{BrightIdeasSoftware.OLVGroup})">
      <summary>
            Do the actual work of creating the given list of groups
            </summary>
      <param name="groups">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CorrectSubItemColors(System.Windows.Forms.ListViewItem)">
      <summary>
            For some reason, UseItemStyleForSubItems doesn't work for the colors
            when owner drawing the list, so we have to specifically give each subitem
            the desired colors
            </summary>
      <param name="olvi">The item whose subitems are to be corrected</param>
      <remarks>Cells drawn via BaseRenderer don't need this, but it is needed
            when an owner drawn cell uses DrawDefault=true</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FillInValues(BrightIdeasSoftware.OLVListItem,System.Object)">
      <summary>
            Fill in the given OLVListItem with values of the given row
            </summary>
      <param name="lvi">the OLVListItem that is to be stuff with values</param>
      <param name="rowObject">the model object from which values will be taken</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ForceSubItemImagesExStyle">
      <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
      <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetActualImageIndex(System.Object)">
      <summary>
            Convert the given image selector to an index into our image list.
            Return -1 if that's not possible
            </summary>
      <param name="imageSelector">
      </param>
      <returns>Index of the image in the imageList, or -1</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetHeaderToolTip(System.Int32)">
      <summary>
            Return the tooltip that should be shown when the mouse is hovered over the given column
            </summary>
      <param name="columnIndex">The column index whose tool tip is to be fetched</param>
      <returns>A string or null if no tool tip is to be shown</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetCellToolTip(System.Int32,System.Int32)">
      <summary>
            Return the tooltip that should be shown when the mouse is hovered over the given cell
            </summary>
      <param name="columnIndex">The column index whose tool tip is to be fetched</param>
      <param name="rowIndex">The row index whose tool tip is to be fetched</param>
      <returns>A string or null if no tool tip is to be shown</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ModelToItem(System.Object)">
      <summary>
            Return the OLVListItem that displays the given model object
            </summary>
      <param name="modelObject">The modelObject whose item is to be found</param>
      <returns>The OLVListItem that displays the model, or null</returns>
      <remarks>This method has O(n) performance.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PostProcessRows">
      <summary>
            Do the work required after the items in a listview have been created
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PostProcessOneRow(System.Int32,System.Int32,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Do the work required after one item in a listview have been created
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PrepareAlternateBackColors">
      <summary>
             Prepare the listview to show alternate row backcolors
             </summary>
      <remarks>We cannot rely on lvi.Index in this method.
             In a straight list, lvi.Index is the display index, and can be used to determine
             whether the row should be colored. But when organised by groups, lvi.Index is not
             useable because it still refers to the position in the overall list, not the display order.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetAllSubItemImages">
      <summary>
            Setup all subitem images on all rows
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetSubItemImages(System.Int32,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
      <param name="rowIndex">the index at which the item occurs</param>
      <param name="item">the item whose subitems are to be set</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetSubItemImages(System.Int32,BrightIdeasSoftware.OLVListItem,System.Boolean)">
      <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
      <param name="rowIndex">the index at which the item occurs</param>
      <param name="item">the item whose subitems are to be set</param>
      <param name="shouldClearImages">will existing images be cleared if no new image is provided?</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetSubItemImage(System.Int32,System.Int32,BrightIdeasSoftware.OLVListSubItem,System.Boolean)">
      <summary>
            Set the subitem image natively
            </summary>
      <param name="rowIndex">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="subItem">
      </param>
      <param name="shouldClearImages">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.TakeOwnershipOfObjects">
      <summary>
            Take ownership of the 'objects' collection. This separats our collection from the source.
            </summary>
      <remarks>
        <para>
            This method
            separates the 'objects' instance variable from its source, so that any AddObject/RemoveObject
            calls will modify our collection and not the original colleciton.
            </para>
        <para>
            This method has the intentional side-effect of converting our list of objects to an ArrayList.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.TriggerFormatRowEvent(System.Int32,System.Int32,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Trigger FormatRow and possibly FormatCell events for the given item
            </summary>
      <param name="rowIndex">
      </param>
      <param name="displayIndex">
      </param>
      <param name="olvi">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.Reset">
      <summary>
            Make the list forget everything -- all rows and all columns
            </summary>
      <remarks>Use <see cref="M:BrightIdeasSoftware.ObjectListView.ClearObjects" /> if you want to remove just the rows.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetupBaseImageList">
      <summary>
            Update our externally visible image list so it holds the same images as our shadow list, but sized correctly
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeResizedImageList(System.Int32,System.Int32,System.Windows.Forms.ImageList)">
      <summary>
            Return a copy of the given source image list, where each image has been resized to be height x height in size.
            If source is null, an empty image list of the given size is returned
            </summary>
      <param name="width">Height and width of the new images</param>
      <param name="height">Height and width of the new images</param>
      <param name="source">Source of the images (can be null)</param>
      <returns>A new image list</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeResizedImage(System.Int32,System.Int32,System.Drawing.Image,System.Drawing.Color)">
      <summary>
            Return a bitmap of the given height x height, which shows the given image, centred.
            </summary>
      <param name="width">Height and width of new bitmap</param>
      <param name="height">Height and width of new bitmap</param>
      <param name="image">Image to be centred</param>
      <param name="transparent">The background color</param>
      <returns>A new bitmap</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.InitializeStateImageList">
      <summary>
            Initialize the state image list with the required checkbox images
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetupSubItemCheckBoxes">
      <summary>
            Setup this control so it can display check boxes on subitems
            (or primary checkboxes in virtual mode)
            </summary>
      <remarks>This gives the ListView a small image list, if it doesn't already have one.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.InitializeCheckBoxImages">
      <summary>
            Make sure the small image list for this control has checkbox images 
            (used for sub-item checkboxes).
            </summary>
      <remarks>This gives the ListView a small image list, if it doesn't already have one.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
      <summary>
            Owner draw the column header
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)">
      <summary>
            Owner draw the item
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)">
      <summary>
            Owner draw a single subitem
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            We need the click count in the mouse up event, but that is always 1.
            So we have to remember the click count from the preceding mouse down event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnMouseLeave(System.EventArgs)">
      <summary>
            When the mouse leaves the control, remove any hot item highlighting
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            When the mouse moves, we might need to change the hot item.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Check to see if we need to start editing a cell
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessHyperlinkClicked(BrightIdeasSoftware.CellClickEventArgs)">
      <summary>
            Tell the world that a hyperlink was clicked and if the event isn't handled,
            do the default processing.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.StandardHyperlinkClickedProcessing(BrightIdeasSoftware.HyperlinkClickedEventArgs)">
      <summary>
            Do the default processing for a hyperlink clicked event, which
            is to try and open the url.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnRightMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            The user right clicked on the control
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
            This method is called every time a row is selected or deselected. This can be
            a pain if the user shift-clicks 100 rows. We override this method so we can
            trigger one event for any number of select/deselects that come from one user action
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnHandleCreated(System.EventArgs)">
      <summary>
            Called when the handle of the underlying control is created
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnControlCreated">
      <summary>
            This method is called after the control has been fully created.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShouldStartCellEdit(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Should we start editing the cell in response to the given mouse button event?
            </summary>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ProcessDialogKey(System.Windows.Forms.Keys)">
      <summary>
            Handle a key press on this control. We specifically look for F2 which edits the primary column,
            or a Tab character during an edit operation, which tries to start editing on the next (or previous) cell.
            </summary>
      <param name="keyData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EditModel(System.Object)">
      <summary>
            Start an editing operation on the first editable column of the given model.
            </summary>
      <param name="rowModel">
      </param>
      <remarks>
        <para>
            If the model doesn't exist, or there are no editable columns, this method
            will do nothing.</para>
        <para>
            This will start an edit operation regardless of CellActivationMode.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.EditSubItem(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Begin an edit operation on the given cell.
            </summary>
      <remarks>This performs various sanity checks and passes off the real work to StartCellEdit().</remarks>
      <param name="item">The row to be edited</param>
      <param name="subItemIndex">The index of the cell to be edited</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.StartCellEdit(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Really start an edit operation on a given cell. The parameters are assumed to be sane.
            </summary>
      <param name="item">The row to be edited</param>
      <param name="subItemIndex">The index of the cell to be edited</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateCellEditorBounds(BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Calculate the bounds of the edit control for the given item/column
            </summary>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateCellEditorBoundsOwnerDrawn(BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Calculate the bounds of the edit control for the given item/column, when the listview
            is being owner drawn.
            </summary>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="r">
      </param>
      <param name="preferredSize">
      </param>
      <returns>A rectangle that is the bounds of the cell editor</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateCellEditorBoundsStandard(BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Calculate the bounds of the edit control for the given item/column, when the listview
            is not being owner drawn.
            </summary>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="cellBounds">
      </param>
      <param name="preferredSize">
      </param>
      <returns>A rectangle that is the bounds of the cell editor</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetControlValue(System.Windows.Forms.Control,System.Object,System.String)">
      <summary>
            Try to give the given value to the provided control. Fall back to assigning a string
            if the value assignment fails.
            </summary>
      <param name="control">A control</param>
      <param name="value">The value to be given to the control</param>
      <param name="stringValue">The string to be given if the value doesn't work</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ConfigureControl">
      <summary>
            Setup the given control to be a cell editor
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetControlValue(System.Windows.Forms.Control)">
      <summary>
            Return the value that the given control is showing
            </summary>
      <param name="control">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CellEditor_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>
            Called when the cell editor could be about to lose focus. Time to commit the change
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateCellBounds(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Return the bounds of the given cell
            </summary>
      <param name="item">The row to be edited</param>
      <param name="subItemIndex">The index of the cell to be edited</param>
      <returns>A Rectangle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CalculateCellTextBounds(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Return the bounds of the given cell only until the edge of the current text
            </summary>
      <param name="item">The row to be edited</param>
      <param name="subItemIndex">The index of the cell to be edited</param>
      <returns>A Rectangle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetCellEditor(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Return a control that can be used to edit the value of the given cell.
            </summary>
      <param name="item">The row to be edited</param>
      <param name="subItemIndex">The index of the cell to be edited</param>
      <returns>A Control to edit the given cell</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetFirstNonNullValue(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Get the first non-null value of the given column.
            At most 1000 rows will be considered.
            </summary>
      <param name="column">
      </param>
      <returns>The first non-null value, or null if no non-null values were found</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.MakeDefaultCellEditor(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Return a TextBox that can be used as a default cell editor.
            </summary>
      <param name="column">What column does the cell belong to?</param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ConfigureAutoComplete(System.Windows.Forms.TextBox,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Configure the given text box to autocomplete unique values
            from the given column. At most 1000 rows will be considered.
            </summary>
      <param name="tb">The textbox to configure</param>
      <param name="column">The column used to calculate values</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ConfigureAutoComplete(System.Windows.Forms.TextBox,BrightIdeasSoftware.OLVColumn,System.Int32)">
      <summary>
            Configure the given text box to autocomplete unique values
            from the given column. At most 1000 rows will be considered.
            </summary>
      <param name="tb">The textbox to configure</param>
      <param name="column">The column used to calculate values</param>
      <param name="maxRows">Consider only this many rows</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CancelCellEdit">
      <summary>
            Stop editing a cell and throw away any changes.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PossibleFinishCellEditing">
      <summary>
            If a cell edit is in progress, finish the edit.
            </summary>
      <returns>Returns false if the finishing process was cancelled
            (i.e. the cell editor is still on screen)</returns>
      <remarks>This method does not guarantee that the editing will finish. The validation
            process can cause the finishing to be aborted. Developers should check the return value
            or use IsCellEditing property after calling this method to see if the user is still
            editing a cell.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.PossibleFinishCellEditing(System.Boolean)">
      <summary>
            If a cell edit is in progress, finish the edit.
            </summary>
      <returns>Returns false if the finishing process was cancelled
            (i.e. the cell editor is still on screen)</returns>
      <remarks>This method does not guarantee that the editing will finish. The validation
            process can cause the finishing to be aborted. Developers should check the return value
            or use IsCellEditing property after calling this method to see if the user is still
            editing a cell.</remarks>
      <param name="expectingCellEdit">True if it is likely that another cell is going to be 
            edited immediately after this cell finishes editing</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FinishCellEdit">
      <summary>
            Finish the cell edit operation, writing changed data back to the model object
            </summary>
      <remarks>This method does not trigger a Validating event, so it always finishes
            the cell edit.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FinishCellEdit(System.Boolean)">
      <summary>
            Finish the cell edit operation, writing changed data back to the model object
            </summary>
      <remarks>This method does not trigger a Validating event, so it always finishes
            the cell edit.</remarks>
      <param name="expectingCellEdit">True if it is likely that another cell is going to be 
            edited immediately after this cell finishes editing</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CleanupCellEdit(System.Boolean)">
      <summary>
            Remove all trace of any existing cell edit operation
            </summary>
      <param name="expectingCellEdit">True if it is likely that another cell is going to be 
            edited immediately after this cell finishes editing</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ClearHotItem">
      <summary>
            Force the hot item to be recalculated
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshHotItem">
      <summary>
            Force the hot item to be recalculated
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateHotItem(System.Drawing.Point)">
      <summary>
            The mouse has moved to the given pt. See if the hot item needs to be updated
            </summary>
      <param name="pt">Where is the mouse?</param>
      <remarks>This is the main entry point for hot item handling</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateHotItem(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            The mouse has moved to the given pt. See if the hot item needs to be updated
            </summary>
      <param name="hti">
      </param>
      <remarks>This is the main entry point for hot item handling</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateHotRow(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Update the given row using the current hot item information
            </summary>
      <param name="olvi">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateHotRow(System.Int32,System.Int32,BrightIdeasSoftware.HitTestLocation,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Update the given row using the given hot item information
            </summary>
      <param name="rowIndex">
      </param>
      <param name="columnIndex">
      </param>
      <param name="hitLocation">
      </param>
      <param name="olvi">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ApplyRowStyle(BrightIdeasSoftware.OLVListItem,BrightIdeasSoftware.IItemStyle)">
      <summary>
            Apply a style to the given row
            </summary>
      <param name="olvi">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ApplyCellStyle(BrightIdeasSoftware.OLVListItem,System.Int32,BrightIdeasSoftware.IItemStyle)">
      <summary>
            Apply a style to a cell
            </summary>
      <param name="olvi">
      </param>
      <param name="columnIndex">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UnapplyHotItem(System.Int32)">
      <summary>
            Remove hot item styling from the given row
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnDragLeave(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AddDecoration(BrightIdeasSoftware.IDecoration)">
      <summary>
            Add the given decoration to those on this list and make it appear
            </summary>
      <param name="decoration">The decoration</param>
      <remarks>
            A decoration scrolls with the listview. An overlay stays fixed in place.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.AddOverlay(BrightIdeasSoftware.IOverlay)">
      <summary>
            Add the given overlay to those on this list and make it appear
            </summary>
      <param name="overlay">The overlay</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.DrawAllDecorations(System.Drawing.Graphics,System.Collections.Generic.List{BrightIdeasSoftware.OLVListItem})">
      <summary>
            Draw all the decorations
            </summary>
      <param name="g">A Graphics</param>
      <param name="drawnItems">The items that were redrawn and whose decorations should also be redrawn</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HasDecoration(BrightIdeasSoftware.IDecoration)">
      <summary>
            Is the given decoration shown on this list
            </summary>
      <param name="decoration">The overlay</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HasOverlay(BrightIdeasSoftware.IOverlay)">
      <summary>
            Is the given overlay shown on this list?
            </summary>
      <param name="overlay">The overlay</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.HideOverlays">
      <summary>
            Hide any overlays.
            </summary>
      <remarks>
            This is only a temporary hiding -- the overlays will be shown
            the next time the ObjectListView redraws.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.InitializeEmptyListMsgOverlay">
      <summary>
            Create and configure the empty list msg overlay
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.InitializeStandardOverlays">
      <summary>
            Initialize the standard image and text overlays
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ShowOverlays">
      <summary>
            Make sure that any overlays are visible.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshOverlays">
      <summary>
            Refresh the display of the overlays
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RefreshOverlay(BrightIdeasSoftware.IOverlay)">
      <summary>
            Refresh the display of just one overlays
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RemoveDecoration(BrightIdeasSoftware.IDecoration)">
      <summary>
            Remove the given decoration from this list
            </summary>
      <param name="decoration">The decoration to remove</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.RemoveOverlay(BrightIdeasSoftware.IOverlay)">
      <summary>
            Remove the given overlay to those on this list
            </summary>
      <param name="overlay">The overlay</param>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.CreateColumnFilter">
      <summary>
            Create a filter that will enact all the filtering currently installed
            on the visible columns.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.FilterObjects(System.Collections.IEnumerable,BrightIdeasSoftware.IModelFilter,BrightIdeasSoftware.IListFilter)">
      <summary>
            Do the actual work of filtering
            </summary>
      <param name="originalObjects">
      </param>
      <param name="aModelFilter">
      </param>
      <param name="aListFilter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ResetColumnFiltering">
      <summary>
            Remove all column filtering.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateColumnFiltering">
      <summary>
            Update the filtering of this ObjectListView based on the value filtering
            defined in each column
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.UpdateFiltering">
      <summary>
            When some setting related to filtering changes, this method is called.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.GetPersistentCheckState(System.Object)">
      <summary>
            Gets the checkedness of the given model.
            </summary>
      <param name="model">The model</param>
      <returns>The checkedness of the model. Defaults to unchecked.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.SetPersistentCheckState(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Remember the check state of the given model object
            </summary>
      <param name="model">The model to be remembered</param>
      <param name="state">The model's checkedness</param>
      <returns>The state given to the method</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ObjectListView.ClearPersistentCheckState">
      <summary>
            Forget any persistent checkbox state
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsVistaOrLater">
      <summary>
            Gets whether the program running on Vista or later?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsWin7OrLater">
      <summary>
            Gets whether the program running on Win7 or later?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SmoothingMode">
      <summary>
            Gets or sets how what smoothing mode will be applied to graphic operations.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.TextRenderingHint">
      <summary>
            Gets or sets how should text be renderered.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IgnoreMissingAspects">
      <summary>
            Gets or sets whether all ObjectListViews will silently ignore missing aspect errors.
            </summary>
      <remarks>
        <para>
            By default, if an ObjectListView is asked to display an aspect
            (i.e. a field/property/method)
            that does not exist from a model, it displays an error message in that cell, since that 
            condition is normally a programming error. There are some use cases where
            this is not an error -- in those cases, set this to true and ObjectListView will
            simply display an empty cell.
            </para>
        <para>Be warned: if you set this to true, it can be very difficult to track down
            typing mistakes or name changes in AspectNames.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowCellPaddingBounds">
      <summary>
            Gets or sets whether the control will draw a rectangle in each cell showing the cell padding.
            </summary>
      <remarks>
        <para>
            This can help with debugging display problems from cell padding.
            </para>
        <para>As with all cell padding, this setting only takes effect when the control is owner drawn.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AdditionalFilter">
      <summary>
            Gets or sets an model filter that is combined with any column filtering that the end-user specifies.
            </summary>
      <remarks>This is different from the ModelFilter property, since setting that will replace
            any column filtering, whereas setting this will combine this filter with the column filtering</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AllColumns">
      <summary>
            Get or set all the columns that this control knows about.
            Only those columns where IsVisible is true will be seen by the user.
            </summary>
      <remarks>
        <para>
            If you want to add new columns programmatically, add them to
            AllColumns and then call RebuildColumns(). Normally, you do not have to
            deal with this property directly. Just use the IDE.
            </para>
        <para>If you do add or remove columns from the AllColumns collection,
            you have to call RebuildColumns() to make those changes take effect.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AlternateRowBackColor">
      <summary>
            Gets or sets the background color of every second row 
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AlternateRowBackColorOrDefault">
      <summary>
            Gets the alternate row background color that has been set, or the default color
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AlwaysGroupByColumn">
      <summary>
            This property forces the ObjectListView to always group items by the given column.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.AlwaysGroupBySortOrder">
      <summary>
            If AlwaysGroupByColumn is not null, this property will be used to decide how
            those groups are sorted. If this property has the value SortOrder.None, then
            the sort order will toggle according to the users last header click.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.BaseSmallImageList">
      <summary>
            Give access to the image list that is actually being used by the control
            </summary>
      <remarks>
            Normally, it is preferable to use SmallImageList. Only use this property
            if you know exactly what you are doing.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellEditActivation">
      <summary>
            How does the user indicate that they want to edit a cell?
            None means that the listview cannot be edited.
            </summary>
      <remarks>Columns can also be marked as editable.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellEditKeyEngine">
      <summary>
            Gets or sets the engine that will handle key presses during a cell edit operation.
            Settings this to null will reset it to default value.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellEditor">
      <summary>
            Gets the control that is currently being used for editing a cell.
            </summary>
      <remarks>This will obviously be null if no cell is being edited.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellEditTabChangesRows">
      <summary>
            Gets or sets the behaviour of the Tab key when editing a cell on the left or right
            edge of the control. If this is false (the default), pressing Tab will wrap to the other side
            of the same row. If this is true, pressing Tab when editing the right most cell will advance 
            to the next row 
            and Shift-Tab when editing the left-most cell will change to the previous row.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellEditEnterChangesRows">
      <summary>
            Gets or sets the behaviour of the Enter keys while editing a cell.
            If this is false (the default), pressing Enter will simply finish the editing operation.
            If this is true, Enter will finish the edit operation and start a new edit operation
            on the cell below the current cell, wrapping to the top of the next row when at the bottom cell.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellToolTip">
      <summary>
            Gets the tool tip control that shows tips for the cells
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellPadding">
      <summary>
            Gets or sets how many pixels will be left blank around each cell of this item.
            Cell contents are aligned after padding has been taken into account.
            </summary>
      <remarks>
        <para>Each value of the given rectangle will be treated as an inset from
            the corresponding side. The width of the rectangle is the padding for the
            right cell edge. The height of the rectangle is the padding for the bottom
            cell edge.
            </para>
        <para>
            So, this.olv1.CellPadding = new Rectangle(1, 2, 3, 4); will leave one pixel
            of space to the left of the cell, 2 pixels at the top, 3 pixels of space
            on the right edge, and 4 pixels of space at the bottom of each cell.
            </para>
        <para>
            This setting only takes effect when the control is owner drawn.
            </para>
        <para>This setting only affects the contents of the cell. The background is
            not affected.</para>
        <para>If you set this to a foolish value, your control will appear to be empty.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellVerticalAlignment">
      <summary>
            Gets or sets how cells will be vertically aligned by default.
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn. It will only be noticable
            when RowHeight has been set such that there is some vertical space in each row.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckBoxes">
      <summary>
            Should this list show checkboxes?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckedObject">
      <summary>
            Return the model object of the row that is checked or null if no row is checked
            or more than one row is checked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckedObjects">
      <summary>
            Get or set the collection of model objects that are checked.
            When setting this property, any row whose model object isn't
            in the given collection will be unchecked. Setting to null is
            equivilent to unchecking all.
            </summary>
      <remarks>
        <para>
            This property returns a simple collection. Changes made to the returned
            collection do NOT affect the list. This is different to the behaviour of
            CheckedIndicies collection.
            </para>
        <para>
            .NET's CheckedItems property is not helpful. It is just a short-hand for
            iterating through the list looking for items that are checked.
            </para>
        <para>
            The performance of the get method is O(n), where n is the number of items
            in the control. The performance of the set method is
            O(n + m) where m is the number of objects being checked. Be careful on long lists.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckedObjectsEnumerable">
      <summary>
            Gets or sets the checked objects from an enumerable.
            </summary>
      <remarks>
            Useful for checking all objects in the list.
            </remarks>
      <example>
            this.olv1.CheckedObjectsEnumerable = this.olv1.Objects;
            </example>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Columns">
      <summary>
            Gets Columns for this list. We hide the original so we can associate
            a specialised editor with it.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ColumnsForTileView">
      <summary>
            Get/set the list of columns that should be used when the list switches to tile view.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ColumnsInDisplayOrder">
      <summary>
            Return the visible columns in the order they are displayed to the user
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ContentRectangle">
      <summary>
            Get the area of the control that shows the list, minus any header control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CopySelectionOnControlC">
      <summary>
            Gets or sets if the selected rows should be copied to the clipboard when the user presses Ctrl-C
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CopySelectionOnControlCUsesDragSource">
      <summary>
            Gets or sets whether the Control-C copy to clipboard functionality should use
            the installed DragSource to create the data object that is placed onto the clipboard.
            </summary>
      <remarks>This is normally what is desired, unless a custom DragSource is installed 
            that does some very specialized drag-drop behaviour.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Decorations">
      <summary>
            Gets the list of decorations that will be drawn the ListView
            </summary>
      <remarks>
        <para>
            Do not modify the contents of this list directly. Use the AddDecoration() and RemoveDecoration() methods.
            </para>
        <para>
            A decoration scrolls with the list contents. An overlay is fixed in place.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.DefaultRenderer">
      <summary>
            When owner drawing, this renderer will draw columns that do not have specific renderer
            given to them
            </summary>
      <remarks>If you try to set this to null, it will revert to a BaseRenderer</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.DragSource">
      <summary>
            Gets or sets the object that controls how drags start from this control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.DropSink">
      <summary>
            Gets or sets the object that controls how drops are accepted and processed
            by this ListView.
            </summary>
      <remarks>
        <para>
            If the given sink is an instance of SimpleDropSink, then events from the drop sink
            will be automatically forwarded to the ObjectListView (which means that handlers
            for those event can be configured within the IDE).
            </para>
        <para>If this is set to null, the control will not accept drops.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.EmptyListMsg">
      <summary>
            Gets or sets the text that should be shown when there are no items in this list view.
            </summary>
      <remarks>If the EmptyListMsgOverlay has been changed to something other than a TextOverlay,
            this property does nothing</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.EmptyListMsgFont">
      <summary>
            Gets or sets the font in which the List Empty message should be drawn
            </summary>
      <remarks>If the EmptyListMsgOverlay has been changed to something other than a TextOverlay,
            this property does nothing</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.EmptyListMsgFontOrDefault">
      <summary>
            Return the font for the 'list empty' message or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.EmptyListMsgOverlay">
      <summary>
            Gets or sets the overlay responsible for drawing the List Empty msg.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.FilteredObjects">
      <summary>
            Gets the collection of objects that survive any filtering that may be in place.
            </summary>
      <remarks>
        <para>
            This collection is the result of filtering the current list of objects. 
            It is not a snapshot of the filtered list that was last used to build the control. 
            </para>
        <para>
            Normal warnings apply when using this with virtual lists. It will work, but it
            may take a while.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.FilterMenuBuildStrategy">
      <summary>
            Gets or sets the strategy object that will be used to build the Filter menu
            </summary>
      <remarks>If this is null, no filter menu will be built.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Groups">
      <summary>
            Hide the Groups collection so it's not visible in the Properties grid.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.GroupImageList">
      <summary>
            Gets or sets the image list from which group header will take their images
            </summary>
      <remarks>If this is not set, then group headers will not show any images.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.GroupWithItemCountFormat">
      <summary>
            Gets how the group label should be formatted when a group is empty or
            contains more than one item
            </summary>
      <remarks>
            The given format string must have two placeholders:
            <list type="bullet"><item><description>{0} - the original group title</description></item><item><description>{1} - the number of items in the group</description></item></list></remarks>
      <example>"{0} [{1} items]"</example>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.GroupWithItemCountFormatOrDefault">
      <summary>
            Return this.GroupWithItemCountFormat or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.GroupWithItemCountSingularFormat">
      <summary>
            Gets how the group label should be formatted when a group contains only a single item
            </summary>
      <remarks>
            The given format string must have two placeholders:
            <list type="bullet"><item><description>{0} - the original group title</description></item><item><description>{1} - the number of items in the group (always 1)</description></item></list></remarks>
      <example>"{0} [{1} item]"</example>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.GroupWithItemCountSingularFormatOrDefault">
      <summary>
            Gets GroupWithItemCountSingularFormat or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HasCollapsibleGroups">
      <summary>
            Gets or sets whether or not the groups in this ObjectListView should be collapsible.
            </summary>
      <remarks>
            This feature only works under Vista and later.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HasEmptyListMsg">
      <summary>
            Does this listview have a message that should be drawn when the list is empty?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HasOverlays">
      <summary>
            Get whether there are any overlays to be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderControl">
      <summary>
            Gets the header control for the ListView
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderFont">
      <summary>
            Gets or sets the font in which the text of the column headers will be drawn
            </summary>
      <remarks>Individual columns can override this through their HeaderFormatStyle property.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderFormatStyle">
      <summary>
            Gets or sets the style that will be used to draw the columm headers of the listview
            </summary>
      <remarks>
        <para>
            This is only used when HeaderUsesThemes is false.
            </para>
        <para>
            Individual columns can override this through their HeaderFormatStyle property.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderMaximumHeight">
      <summary>
            Gets or sets the maximum height of the header. -1 means no maximum.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderUsesThemes">
      <summary>
            Gets or sets whether the header will be drawn strictly according to the OS's theme. 
            </summary>
      <remarks>
        <para>
            If this is set to true, the header will be rendered completely by the system, without
            any of ObjectListViews fancy processing -- no images in header, no filter indicators,
            no word wrapping, no header styling.
            </para>
        <para>If this is set to false, ObjectListView will render the header as it thinks best.
            If no special features are required, then ObjectListView will delegate rendering to the OS.
            Otherwise, ObjectListView will draw the header according to the configuration settings.
            </para>
        <para>
            The effect of not being themed will be different from OS to OS. At
            very least, the sort indicator will not be standard. 
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderWordWrap">
      <summary>
            Gets or sets the whether the text in the header will be word wrapped.
            </summary>
      <remarks>
        <para>Line breaks will be applied between words. Words that are too long
            will still be ellipsed.</para>
        <para>
            As with all settings that make the header look different, HeaderUsesThemes must be set to false, otherwise
            the OS will be responsible for drawing the header, and it does not allow word wrapped text.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderToolTip">
      <summary>
            Gets the tool tip that shows tips for the column headers
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotRowIndex">
      <summary>
            Gets the index of the row that the mouse is currently over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotColumnIndex">
      <summary>
            Gets the index of the subitem that the mouse is currently over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotCellHitLocation">
      <summary>
            Gets the part of the item/subitem that the mouse is currently over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotCellHitLocationEx">
      <summary>
            Gets an extended indication of the part of item/subitem/group that the mouse is currently over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotGroup">
      <summary>
            Gets the group that the mouse is over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotItemIndex">
      <summary>
            The index of the item that is 'hot', i.e. under the cursor. -1 means no item.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HotItemStyle">
      <summary>
            What sort of formatting should be applied to the row under the cursor?
            </summary>
      <remarks>This only takes effect when UseHotItem is true.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HyperlinkStyle">
      <summary>
            What sort of formatting should be applied to hyperlinks?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HighlightBackgroundColor">
      <summary>
            What color should be used for the background of selected rows?
            </summary>
      <remarks>Windows does not give the option of changing the selection background.
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HighlightBackgroundColorOrDefault">
      <summary>
            Return the color should be used for the background of selected rows or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HighlightForegroundColor">
      <summary>
            What color should be used for the foreground of selected rows?
            </summary>
      <remarks>Windows does not give the option of changing the selection foreground (text color).
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HighlightForegroundColorOrDefault">
      <summary>
            Return the color should be used for the foreground of selected rows or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IncludeHiddenColumnsInDataTransfer">
      <summary>
            Gets or sets whether or not hidden columns should be included in the text representation
            of rows that are copied or dragged to another application. If this is false (the default),
            only visible columns will be included.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IncludeColumnHeadersInCopy">
      <summary>
            Gets or sets whether or not hidden columns should be included in the text representation
            of rows that are copied or dragged to another application. If this is false (the default),
            only visible columns will be included.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsCellEditing">
      <summary>
            Return true if a cell edit operation is currently happening
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsDesignMode">
      <summary>
            Return true if the ObjectListView is being used within the development environment.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsFiltering">
      <summary>
            Gets whether or not the current list is filtering its contents
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsSearchOnSortColumn">
      <summary>
            When the user types into a list, should the values in the current sort column be searched to find a match?
            If this is false, the primary column will always be used regardless of the sort column.
            </summary>
      <remarks>When this is true, the behavior is like that of ITunes.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsSimpleDropSink">
      <summary>
            Gets or sets if this control will use a SimpleDropSink to receive drops
            </summary>
      <remarks>
        <para>
            Setting this replaces any previous DropSink.
            </para>
        <para>
            After setting this to true, the SimpleDropSink will still need to be configured
            to say when it can accept drops and what should happen when something is dropped.
            The need to do these things makes this property mostly useless :(
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.IsSimpleDragSource">
      <summary>
            Gets or sets if this control will use a SimpleDragSource to initiate drags
            </summary>
      <remarks>Setting this replaces any previous DragSource</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Items">
      <summary>
            Hide the Items collection so it's not visible in the Properties grid.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ItemRenderer">
      <summary>
            This renderer draws the items when in the list is in non-details view.
            In details view, the renderers for the individuals columns are responsible.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.LastSortColumn">
      <summary>
            Which column did we last sort by
            </summary>
      <remarks>This is an alias for PrimarySortColumn</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.LastSortOrder">
      <summary>
            Which direction did we last sort
            </summary>
      <remarks>This is an alias for PrimarySortOrder</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ListFilter">
      <summary>
            Gets or  sets the filter that is applied to our whole list of objects.
            </summary>
      <remarks>
            The list is updated immediately to reflect this filter. 
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ModelFilter">
      <summary>
            Gets or  sets the filter that is applied to each model objects in the list
            </summary>
      <remarks>
        <para>You may want to consider using <see cref="P:BrightIdeasSoftware.ObjectListView.AdditionalFilter" /> instead of this property,
            since AdditionalFilter combines with column filtering at runtime. Setting this property simply
            replaces any column filter the user may have given.</para>
        <para>
            The list is updated immediately to reflect this filter. 
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MouseMoveHitTest">
      <summary>
            Gets the hit test info last time the mouse was moved.
            </summary>
      <remarks>Useful for hot item processing.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.OLVGroups">
      <summary>
            Gets or sets the list of groups shown by the listview.
            </summary>
      <remarks>
            This property does not work like the .NET Groups property. It should
            be treated as a read-only property.
            Changes made to the list are NOT reflected in the ListView itself -- it is pointless to add
            or remove groups to/from this list. Such modifications will do nothing.
            To do such things, you must listen for
            BeforeCreatingGroups or AboutToCreateGroups events, and change the list of
            groups in those events.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.OwnerDrawnHeader">
      <summary>
            Gets or sets whether the user wants to owner draw the header control
            themselves. If this is false (the default), ObjectListView will use
            custom drawing to render the header, if needed.
            </summary>
      <remarks>
            If you listen for the DrawColumnHeader event, you need to set this to true,
            otherwise your event handler will not be called.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Objects">
      <summary>
            Get/set the collection of objects that this list will show
            </summary>
      <remarks>
        <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
        <para>This method preserves selection, if possible. Use <see cref="M:BrightIdeasSoftware.ObjectListView.SetObjects(System.Collections.IEnumerable,System.Boolean)" /> if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code and performance is O(n) where n is the number of selected rows.</para>
        <para>This method is not thread safe.</para>
        <para>The property DOES work on virtual lists: setting is problem-free, but if you try to get it
            and the list has 10 million objects, it may take some time to return.</para>
        <para>This collection is unfiltered. Use <see cref="P:BrightIdeasSoftware.ObjectListView.FilteredObjects" /> to access just those objects
            that survive any installed filters.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ObjectsForClustering">
      <summary>
            Gets the collection of objects that will be considered when creating clusters
            (which are used to generate Excel-like column filters)
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.OverlayImage">
      <summary>
            Gets or sets the image that will be drawn over the top of the ListView
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.OverlayText">
      <summary>
            Gets or sets the text that will be drawn over the top of the ListView
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.OverlayTransparency">
      <summary>
            Gets or sets the transparency of all the overlays.
            0 is completely transparent, 255 is completely opaque.
            </summary>
      <remarks>
            This is obsolete. Use Transparency on each overlay.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Overlays">
      <summary>
            Gets the list of overlays that will be drawn on top of the ListView
            </summary>
      <remarks>
            You can add new overlays and remove overlays that you have added, but
            don't mess with the overlays that you didn't create.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.PersistentCheckBoxes">
      <summary>
            Gets or sets whether or not primary checkboxes will persistent their values across list rebuild
            and filtering operations.
            </summary>
      <remarks>
        <para>
            If you use CheckStateGetter/Putter, the checkedness of a row will already be persisted
            by those methods. This property is only useful when you don't explicitly set CheckStateGetter/Putter.
            </para>
        <para>This defaults to true for virtual lists (Fast, Tree). If you set it to false on virtual lists,
            you have to install CheckStateGetter/Putters.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckStateMap">
      <summary>
            Gets or sets a dictionary that remembers the check state of model objects
            </summary>
      <remarks>This is used when PersistentCheckBoxes is true and for virtual lists.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.PrimarySortColumn">
      <summary>
            Which column did we last sort by
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.PrimarySortOrder">
      <summary>
            Which direction did we last sort
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.RenderNonEditableCheckboxesAsDisabled">
      <summary>
            Gets or sets if non-editable checkboxes are drawn as disabled.
            </summary>
      <remarks>
        <para>This only has effect in owner drawn mode.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.RowHeight">
      <summary>
            Specify the height of each row in the control in pixels.
            </summary>
      <remarks>
        <para>The row height in a listview is normally determined by the font size and the small image list size.
            This setting allows that calculation to be overridden (within reason: you still cannot set the line height to be
            less than the line height of the font used in the control). </para>
        <para>Setting it to -1 means use the normal calculation method.</para>
        <para>
          <bold>This feature is experiemental!</bold> Strange things may happen to your program,
            your spouse or your pet if you use it.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.RowHeightEffective">
      <summary>
            How many pixels high is each row?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.RowsPerPage">
      <summary>
            How many rows appear on each page of this control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SecondarySortColumn">
      <summary>
            Get/set the column that will be used to resolve comparisons that are equal when sorting.
            </summary>
      <remarks>There is no user interface for this setting. It must be set programmatically.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SecondarySortOrder">
      <summary>
            When the SecondarySortColumn is used, in what order will it compare results?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectAllOnControlA">
      <summary>
            Gets or sets if all rows should be selected when the user presses Ctrl-A
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectColumnsOnRightClick">
      <summary>
            When the user right clicks on the column headers, should a menu be presented which will allow
            them to choose which columns will be shown in the view?
            </summary>
      <remarks>This is just a compatibility wrapper for the SelectColumnsOnRightClickBehaviour
            property.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectColumnsOnRightClickBehaviour">
      <summary>
            Gets or sets how the user will be able to select columns when the header is right clicked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectColumnsMenuStaysOpen">
      <summary>
            When the column select menu is open, should it stay open after an item is selected?
            Staying open allows the user to turn more than one column on or off at a time.
            </summary>
      <remarks>This only works when SelectColumnsOnRightClickBehaviour is set to InlineMenu.
            It has no effect when the behaviour is set to SubMenu.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedColumn">
      <summary>
            Gets or sets the column that is drawn with a slight tint.
            </summary>
      <remarks>
        <para>
            If TintSortColumn is true, the sort column will automatically
            be made the selected column.
            </para>
        <para>
            The colour of the tint is controlled by SelectedColumnTint.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedRowDecoration">
      <summary>
            Gets or sets the decoration that will be drawn on all selected rows
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedColumnTint">
      <summary>
            What color should be used to tint the selected column?
            </summary>
      <remarks>
            The tint color must be alpha-blendable, so if the given color is solid
            (i.e. alpha = 255), it will be changed to have a reasonable alpha value.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedIndex">
      <summary>
            Gets or sets the index of the row that is currently selected. 
            When getting the index, if no row is selected,or more than one is selected, return -1.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedItem">
      <summary>
            Gets or sets the ListViewItem that is currently selected . If no row is selected, or more than one is selected, return null.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedObject">
      <summary>
            Gets the model object from the currently selected row, if there is only one row selected. 
            If no row is selected, or more than one is selected, returns null.
            When setting, this will select the row that is displaying the given model object and focus on it. 
            All other rows are deselected.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectedObjects">
      <summary>
            Get the model objects from the currently selected rows. If no row is selected, the returned List will be empty.
            When setting this value, select the rows that is displaying the given model objects. All other rows are deselected.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowCommandMenuOnRightClick">
      <summary>
            When the user right clicks on the column headers, should a menu be presented which will allow
            them to choose common tasks to perform on the listview?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowFilterMenuOnRightClick">
      <summary>
            Gets or sets whether this ObjectListView will show Excel like filtering
            menus when the header control is right clicked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowGroups">
      <summary>
            Should this list show its items in groups?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowSortIndicators">
      <summary>
            Should the list view show a bitmap in the column header to show the sort direction?
            </summary>
      <remarks>
            The only reason for not wanting to have sort indicators is that, on pre-XP versions of
            Windows, having sort indicators required the ListView to have a small image list, and
            as soon as you give a ListView a SmallImageList, the text of column 0 is bumped 16
            pixels to the right, even if you never used an image.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowImagesOnSubItems">
      <summary>
            Should the list view show images on subitems?
            </summary>
      <remarks>
        <para>Virtual lists have to be owner drawn in order to show images on subitems</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowItemCountOnGroups">
      <summary>
            This property controls whether group labels will be suffixed with a count of items.
            </summary>
      <remarks>
            The format of the suffix is controlled by GroupWithItemCountFormat/GroupWithItemCountSingularFormat properties
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.ShowHeaderInAllViews">
      <summary>
            Gets or sets whether the control will show column headers in all
            views (true), or only in Details view (false)
            </summary>
      <remarks>
        <para>
            This property is not working correctly. JPP 2010/04/06.
            It works fine if it is set before the control is created.
            But if it turned off once the control is created, the control
            loses its checkboxes (weird!)
            </para>
        <para>
            To changed this setting after the control is created, things
            are complicated. If it is off and we want it on, we have
            to change the View and the header will appear. If it is currently
            on and we want to turn it off, we have to both change the view
            AND recreate the handle. Recreating the handle is a problem 
            since it makes our checkbox style disappear. 
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SmallImageList">
      <summary>
            Override the SmallImageList property so we can correctly shadow its operations.
            </summary>
      <remarks>
        <para>If you use the RowHeight property to specify the row height, the SmallImageList
            must be fully initialised before setting/changing the RowHeight. If you add new images to the image
            list after setting the RowHeight, you must assign the imagelist to the control again. Something as simple
            as this will work:
            <code>listView1.SmallImageList = listView1.SmallImageList;</code></para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SmallImageSize">
      <summary>
            Return the size of the images in the small image list or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SortGroupItemsByPrimaryColumn">
      <summary>
            When the listview is grouped, should the items be sorted by the primary column?
            If this is false, the items will be sorted by the same column as they are grouped.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SpaceBetweenGroups">
      <summary>
            When the listview is grouped, how many pixels should exist between the end of one group and the
            beginning of the next?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.TintSortColumn">
      <summary>
            Should the sort column show a slight tinge?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.TriStateCheckBoxes">
      <summary>
            Should each row have a tri-state checkbox?
            </summary>
      <remarks>
            If this is true, the user can choose the third state (normally Indeterminate). Otherwise, user clicks
            alternate between checked and unchecked. CheckStateGetter can still return Indeterminate when this
            setting is false.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.TopItemIndex">
      <summary>
            Get or set the index of the top item of this listview
            </summary>
      <remarks>
        <para>
            This property only works when the listview is in Details view and not showing groups.
            </para>
        <para>
            The reason that it does not work when showing groups is that, when groups are enabled,
            the Windows msg LVM_GETTOPINDEX always returns 0, regardless of the
            scroll position.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UpdateSpaceFillingColumnsWhenDraggingColumnDivider">
      <summary>
            When resizing a column by dragging its divider, should any space filling columns be
            resized at each mouse move? If this is false, the filling columns will be
            updated when the mouse is released.
            </summary>
      <remarks>
        <para>
            If you have a space filling column
            is in the left of the column that is being resized, this will look odd: 
            the right edge of the column will be dragged, but
            its <b>left</b> edge will move since the space filling column is shrinking.
            </para>
        <para>This is logical behaviour -- it just looks wrong.   
            </para>
        <para>
            Given the above behavior is probably best to turn this property off if your space filling
            columns aren't the right-most columns.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UnfocusedHighlightBackgroundColor">
      <summary>
            What color should be used for the background of selected rows when the control doesn't have the focus?
            </summary>
      <remarks>Windows does not give the option of changing the selection background.
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UnfocusedHighlightBackgroundColorOrDefault">
      <summary>
            Return the color should be used for the background of selected rows when the control doesn't have the focus or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UnfocusedHighlightForegroundColor">
      <summary>
            What color should be used for the foreground of selected rows when the control doesn't have the focus?
            </summary>
      <remarks>Windows does not give the option of changing the selection foreground (text color).
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UnfocusedHighlightForegroundColorOrDefault">
      <summary>
            Return the color should be used for the foreground of selected rows when the control doesn't have the focus or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseAlternatingBackColors">
      <summary>
            Should the list give a different background color to every second row?
            </summary>
      <remarks>
        <para>The color of the alternate rows is given by AlternateRowBackColor.</para>
        <para>There is a "feature" in .NET for listviews in non-full-row-select mode, where
            selected rows are not drawn with their correct background color.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseCellFormatEvents">
      <summary>
            Should FormatCell events be called for each cell in the control?
            </summary>
      <remarks>
        <para>In many situations, no cell level formatting is performed. ObjectListView
            can run somewhat faster if it does not trigger a format cell event for every cell
            unless it is required. So, by default, it does not raise an event for each cell.
            </para>
        <para>ObjectListView *does* raise a FormatRow event every time a row is rebuilt.
            Individual rows can decide whether to raise FormatCell
            events for every cell in row.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseCustomSelectionColors">
      <summary>
            Should the selected row be drawn with non-standard foreground and background colors?
            </summary>
      <remarks>
            When this is enabled, the control becomes owner drawn.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseExplorerTheme">
      <summary>
            Gets or sets whether this ObjectListView will use the same hot item and selection 
            mechanism that Vista Explorer does.
            </summary>
      <remarks>This property has many imperfections:
            <list type="bullet"><item><description>This only works on Vista and later</description></item><item><description>It does nothing for owner drawn lists.
            Owner drawn lists are (naturally) controlled by their renderers.</description></item><item><description>It does not work well with AlternateRowBackColors.</description></item><item><description>It does not play well with HotItemStyles.</description></item><item><description>It looks a little bit silly is FullRowSelect is false.</description></item></list>
            But if you absolutely have to look like Vista, this is your property. 
            Do not complain if settings this messes up other things.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseFiltering">
      <summary>
            Gets or sets whether the list should enable filtering
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseFilterIndicator">
      <summary>
            Gets or sets whether the list should put an indicator into a column's header to show that
            it is filtering on that column
            </summary>
      <remarks>If you set this to true, HeaderUsesThemes is automatically set to false, since
            we can only draw a filter indicator when not using a themed header.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseHotItem">
      <summary>
            Should the item under the cursor be formatted in a special way?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseHyperlinks">
      <summary>
            Gets or sets whether this listview should show hyperlinks in the cells.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseOverlays">
      <summary>
            Should this control show overlays
            </summary>
      <remarks>Overlays are enabled by default and would only need to be disabled
            if they were causing problems in your development environment.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseSubItemCheckBoxes">
      <summary>
            Should this control be configured to show check boxes on subitems?
            </summary>
      <remarks>If this is set to True, the control will be given a SmallImageList if it
            doesn't already have one. Also, if it is a virtual list, it will be set to owner
            drawn, since virtual lists can't draw check boxes without being owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseTranslucentSelection">
      <summary>
            Gets or sets if the ObjectListView will use a translucent selection mechanism like Vista.
            </summary>
      <remarks>
        <para>
            Unlike UseExplorerTheme, this Vista-like scheme works on XP and for both
            owner and non-owner drawn lists.
            </para>
        <para>
            This will replace any SelectedRowDecoration that has been installed.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseTranslucentHotItem">
      <summary>
            Gets or sets if the ObjectListView will use a translucent hot row highlighting mechanism like Vista.
            </summary>
      <remarks>Setting this will replace any HotItemStyle that has been </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.View">
      <summary>
            Get/set the style of view that this listview is using
            </summary>
      <remarks>Switching to tile or details view installs the columns appropriate to that view.
            Confusingly, in tile view, every column is shown as a row of information.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.BooleanCheckStateGetter">
      <summary>
            This delegate fetches the checkedness of an object as a boolean only.
            </summary>
      <remarks>Use this if you never want to worry about the
            Indeterminate state (which is fairly common).
            <para>
            This is a convenience wrapper around the CheckStateGetter property.
            </para></remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.BooleanCheckStatePutter">
      <summary>
            This delegate sets the checkedness of an object as a boolean only. It must return
            true or false indicating if the object was checked or not.
            </summary>
      <remarks>Use this if you never want to worry about the
            Indeterminate state (which is fairly common).
            <para>
            This is a convenience wrapper around the CheckStatePutter property.
            </para></remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CanShowGroups">
      <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CanUseApplicationIdle">
      <summary>
            Gets or sets whether ObjectListView can rely on Application.Idle events
            being raised.
            </summary>
      <remarks>In some host environments (e.g. when running as an extension within
            VisualStudio and possibly Office), Application.Idle events are never raised.
            Set this to false when Idle events will not be raised, and ObjectListView will
            raise those events itself.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CellToolTipGetter">
      <summary>
            This delegate is called when the list wants to show a tooltip for a particular cell.
            The delegate should return the text to display, or null to use the default behavior
            (which is to show the full text of truncated cell values).
            </summary>
      <remarks>
            Displaying the full text of truncated cell values only work for FullRowSelect listviews.
            This is MS's behavior, not mine. Don't complain to me :)
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckedAspectName">
      <summary>
            The name of the property (or field) that holds whether or not a model is checked.
            </summary>
      <remarks>
        <para>The property be modifiable. It must have a return type of bool (or of bool? if
            TriStateCheckBoxes is true).</para>
        <para>Setting this property replaces any CheckStateGetter or CheckStatePutter that have been installed.
            Conversely, later setting the CheckStateGetter or CheckStatePutter properties will take precedence
            over the behavior of this property.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckStateGetter">
      <summary>
            This delegate will be called whenever the ObjectListView needs to know the check state
            of the row associated with a given model object.
            </summary>
      <remarks>
        <para>.NET has no support for indeterminate values, but as of v2.0, this class allows
            indeterminate values.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CheckStatePutter">
      <summary>
            This delegate will be called whenever the user tries to change the check state of a row.
            The delegate should return the state that was actually set, which may be different
            to the state given.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.CustomSorter">
      <summary>
            This delegate can be used to sort the table in a custom fasion.
            </summary>
      <remarks>
        <para>
            The delegate must install a ListViewItemSorter on the ObjectListView.
            Installing the ItemSorter does the actual work of sorting the ListViewItems.
            See ColumnComparer in the code for an example of what an ItemSorter has to do.
            </para>
        <para>
            Do not install a CustomSorter on a VirtualObjectListView. Override the SortObjects()
            method of the IVirtualListDataSource instead.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.HeaderToolTipGetter">
      <summary>
            This delegate is called when the list wants to show a tooltip for a particular header.
            The delegate should return the text to display, or null to use the default behavior
            (which is to not show any tooltip).
            </summary>
      <remarks>
            Installing a HeaderToolTipGetter takes precedence over any text in OLVColumn.ToolTipText.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.RowFormatter">
      <summary>
            This delegate can be used to format a OLVListItem before it is added to the control.
            </summary>
      <remarks>
        <para>The model object for the row can be found through the RowObject property of the OLVListItem object.</para>
        <para>All subitems normally have the same style as list item, so setting the forecolor on one
            subitem changes the forecolor of all subitems.
            To allow subitems to have different attributes, do this:
            <code>myListViewItem.UseItemStyleForSubItems = false;</code>.
            </para>
        <para>If UseAlternatingBackColors is true, the backcolor of the listitem will be calculated
            by the control and cannot be controlled by the RowFormatter delegate.
            In general, trying to use a RowFormatter
            when UseAlternatingBackColors is true does not work well.</para>
        <para>As it says in the summary, this is called <b>before</b> the item is added to the control.
            Many properties of the OLVListItem itself are not available at that point, including:
            Index, Selected, Focused, Bounds, Checked, DisplayIndex.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.LowLevelScrollPosition">
      <summary>
            Return a point that represents the current horizontal and vertical scroll positions 
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.UseNotifyPropertyChanged">
      <summary>
            Gets or sets whether or not ObjectListView should subscribe to INotifyPropertyChanged
            events on the model objects that it is given.
            </summary>
      <remarks>
        <para>
            This should be set before calling SetObjects(). If you set this to false,
            ObjectListView will unsubscribe to all current model objects.
            </para>
        <para>If you set this to true on a virtual list, the ObjectListView will 
            walk all the objects in the list trying to subscribe to change notifications.
            If you have 10,000,000 items in your virtual list, this may take some time.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelSortAscending">
      <summary>
            Gets or set the text to be used for the sorting ascending command
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelSortDescending">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelGroupBy">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelLockGroupingOn">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelUnlockGroupingOn">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelTurnOffGroups">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelUnsort">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelColumns">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.MenuLabelSelectColumns">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.Frozen">
      <summary>
            Get or set whether or not the listview is frozen. When the listview is
            frozen, it will not update itself.
            </summary>
      <remarks>
        <para>The Frozen property is similar to the methods Freeze()/Unfreeze()
            except that setting Frozen property to false immediately unfreezes the control
            regardless of the number of Freeze() calls outstanding.</para>
      </remarks>
      <example>objectListView1.Frozen = false; // unfreeze the control now!
            </example>
    </member>
    <member name="P:BrightIdeasSoftware.ObjectListView.SelectionEventsSuspended">
      <summary>
            Returns true if selection events are currently suspended.
            While selection events are suspended, neither SelectedIndexChanged
            or SelectionChanged events will be raised.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.AfterSearching">
      <summary>
            Triggered after a ObjectListView has been searched by the user typing into the list
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.AfterSorting">
      <summary>
            Triggered after a ObjectListView has been sorted
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.BeforeSearching">
      <summary>
            Triggered before a ObjectListView is searched by the user typing into the list
            </summary>
      <remarks>
            Set Cancelled to true to prevent the searching from taking place.
            Changing StringToFind or StartSearchFrom will change the subsequent search.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.BeforeSorting">
      <summary>
            Triggered before a ObjectListView is sorted
            </summary>
      <remarks>
            Set Cancelled to true to prevent the sort from taking place.
            Changing ColumnToSort or SortOrder will change the subsequent sort.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.AfterCreatingGroups">
      <summary>
            Triggered after a ObjectListView has created groups
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.BeforeCreatingGroups">
      <summary>
            Triggered before a ObjectListView begins to create groups
            </summary>
      <remarks>
            Set Groups to prevent the default group creation process
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.AboutToCreateGroups">
      <summary>
            Triggered just before a ObjectListView creates groups
            </summary>
      <remarks>
            You can make changes to the groups, which have been created, before those
            groups are created within the listview.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CanDrop">
      <summary>
            This event is triggered when the user moves a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler.
            </summary>
      <remarks>
            Handlers for this event should set the Effect argument and optionally the
            InfoMsg property. They can also change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellEditFinishing">
      <summary>
            Triggered when a cell is about to finish being edited.
            </summary>
      <remarks>If Cancel is already true, the user is cancelling the edit operation.
            Set Cancel to true to prevent the value from the cell being written into the model.
            You cannot prevent the editing from finishing within this event -- you need
            the CellEditValidating event for that.</remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellEditStarting">
      <summary>
            Triggered when a cell is about to be edited.
            </summary>
      <remarks>Set Cancel to true to prevent the cell being edited.
            You can change the the Control to be something completely different.</remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellEditValidating">
      <summary>
            Triggered when a cell editor needs to be validated
            </summary>
      <remarks>
            If this event is cancelled, focus will remain on the cell editor.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellClick">
      <summary>
            Triggered when a cell is left clicked.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellOver">
      <summary>
            Triggered when the mouse is above a cell.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellRightClick">
      <summary>
            Triggered when a cell is right clicked.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.CellToolTipShowing">
      <summary>
            This event is triggered when a cell needs a tool tip.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.SubItemChecking">
      <summary>
            This event is triggered when a checkbox is checked/unchecked on a subitem
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ColumnRightClick">
      <summary>
            Triggered when a column header is right clicked.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.Dropped">
      <summary>
            This event is triggered when the user releases a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.Filter">
      <summary>
            This event is triggered when the control needs to filter its collection of objects.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.FormatCell">
      <summary>
            This event is triggered when a cell needs to be formatted.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.Freezing">
      <summary>
            This event is triggered when the frozeness of the control changes.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.FormatRow">
      <summary>
            This event is triggered when a row needs to be formatted.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.GroupExpandingCollapsing">
      <summary>
            This event is triggered when a group is about to collapse or expand.
            This can be cancelled to prevent the expansion.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.GroupStateChanged">
      <summary>
            This event is triggered when a group changes state.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.HeaderToolTipShowing">
      <summary>
            This event is triggered when a header needs a tool tip.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.HotItemChanged">
      <summary>
            Triggered when the "hot" item changes
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.HyperlinkClicked">
      <summary>
            Triggered when a hyperlink cell is clicked.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.GroupTaskClicked">
      <summary>
            Triggered when the task text of a group is clicked.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.IsHyperlink">
      <summary>
            Is the value in the given cell a hyperlink.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ItemsAdding">
      <summary>
            Some new objects are about to be added to an ObjectListView.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ItemsChanged">
      <summary>
            The contents of the ObjectListView has changed.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ItemsChanging">
      <summary>
            The contents of the ObjectListView is about to change via a SetObjects call
            </summary>
      <remarks>
        <para>Set Cancelled to true to prevent the contents of the list changing. This does not work with virtual lists.</para>
      </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ItemsRemoving">
      <summary>
            Some objects are about to be removed from an ObjectListView.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ModelCanDrop">
      <summary>
            This event is triggered when the user moves a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler, and when the source control
            for the drag was an ObjectListView.
            </summary>
      <remarks>
            Handlers for this event should set the Effect argument and optionally the
            InfoMsg property. They can also change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.ModelDropped">
      <summary>
            This event is triggered when the user releases a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler and when the source control
            for the drag was an ObjectListView.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.SelectionChanged">
      <summary>
            This event is triggered once per user action that changes the selection state
            of one or more rows.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ObjectListView.Scroll">
      <summary>
            This event is triggered when the contents of the ObjectListView has scrolled.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.VirtualObjectListView">
      <summary>
            A virtual object list view operates in virtual mode, that is, it only gets model objects for
            a row when it is needed. This gives it the ability to handle very large numbers of rows with
            minimal resources.
            </summary>
      <remarks>
        <para>A listview is not a great user interface for a large number of items. But if you've
            ever wanted to have a list with 10 million items, go ahead, knock yourself out.</para>
        <para>Virtual lists can never iterate their contents. That would defeat the whole purpose.</para>
        <para>Animated GIFs should not be used in virtual lists. Animated GIFs require some state
            information to be stored for each animation, but virtual lists specifically do not keep any state information.
            In any case, you really do not want to keep state information for 10 million animations!</para>
        <para>
            Although it isn't documented, .NET virtual lists cannot have checkboxes. This class codes around this limitation,
            but you must use the functions provided by ObjectListView: CheckedObjects, CheckObject(), UncheckObject() and their friends. 
            If you use the normal check box properties (CheckedItems or CheckedIndicies), they will throw an exception, since the
            list is in virtual mode, and .NET "knows" it can't handle checkboxes in virtual mode.
            </para>
        <para>Due to the limits of the underlying Windows control, virtual lists do not trigger ItemCheck/ItemChecked events. 
            Use a CheckStatePutter instead.</para>
        <para>To enable grouping, you must provide an implmentation of IVirtualGroups interface, via the GroupingStrategy property.</para>
        <para>Similarly, to enable filtering on the list, your VirtualListDataSource must also implement the IFilterableDataSource interface.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.#ctor">
      <summary>
            Create a VirtualObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetItemCount">
      <summary>
            Return the number of items in the list
            </summary>
      <returns>the number of items in the list</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetModelObject(System.Int32)">
      <summary>
            Return the model object at the given index
            </summary>
      <param name="index">Index of the model object to be returned</param>
      <returns>A model object</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.IndexOf(System.Object)">
      <summary>
            Find the given model object within the listview and return its index
            </summary>
      <param name="modelObject">The model object to be found</param>
      <returns>The index of the object. -1 means the object was not present</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.ModelToItem(System.Object)">
      <summary>
            Return the OLVListItem that displays the given model object
            </summary>
      <param name="modelObject">The modelObject whose item is to be found</param>
      <returns>The OLVListItem that displays the model, or null</returns>
      <remarks>This method has O(n) performance.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.AddObjects(System.Collections.ICollection)">
      <summary>
            Add the given collection of model objects to this control.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
      <remarks>
        <para>The added objects will appear in their correct sort position, if sorting
            is active. Otherwise, they will appear at the end of the list.</para>
        <para>No check is performed to see if any of the objects are already in the ListView.</para>
        <para>Null objects are silently ignored.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.ClearObjects">
      <summary>
            Remove all items from this list
            </summary>
      <remark>This method can safely be called from background threads.</remark>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.EnsureNthGroupVisible(System.Int32)">
      <summary>
            Scroll the listview so that the given group is at the top.
            </summary>
      <param name="groupIndex">The index of the group to be revealed</param>
      <remarks>
        <para>
            If the group is already visible, the list will still be scrolled to move
            the group to the top, if that is possible.
            </para>
        <para>This only works when the list is showing groups (obviously).</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.RefreshObjects(System.Collections.IList)">
      <summary>
            Update the rows that are showing the given objects
            </summary>
      <remarks>This method does not resort the items.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.RefreshSelectedObjects">
      <summary>
            Update the rows that are selected
            </summary>
      <remarks>This method does not resort or regroup the view.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove all of the given objects from the control
            </summary>
      <param name="modelObjects">Collection of objects to be removed</param>
      <remarks>
        <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
        <para>Due to problems in the underlying ListView, if you remove all the objects from
            the control using this method and the list scroll vertically when you do so,
            then when you subsequenially add more objects to the control,
            the vertical scroll bar will become confused and the control will draw one or more
            blank lines at the top of the list. </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.SelectObject(System.Object,System.Boolean)">
      <summary>
            Select the row that is displaying the given model object. All other rows are deselected.
            </summary>
      <param name="modelObject">Model object to select</param>
      <param name="setFocus">Should the object be focused as well?</param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.SelectObjects(System.Collections.IList)">
      <summary>
            Select the rows that is displaying any of the given model object. All other rows are deselected.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
      <remarks>This method has O(n) performance where n is the number of model objects passed.
            Do not use this to select all the rows in the list -- use SelectAll() for that.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.SetObjects(System.Collections.IEnumerable,System.Boolean)">
      <summary>
            Set the collection of objects that this control will show.
            </summary>
      <param name="collection">
      </param>
      <param name="preserveState">Should the state of the list be preserved as far as is possible.</param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.BuildList(System.Boolean)">
      <summary>
            Rebuild the list with its current contents.
            </summary>
      <remarks>
            Invalidate any cached information when we rebuild the list.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.ClearCachedInfo">
      <summary>
            Clear any cached info this list may have been using
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.CreateGroups(System.Collections.Generic.IEnumerable{BrightIdeasSoftware.OLVGroup})">
      <summary>
            Do the work of creating groups for this control
            </summary>
      <param name="groups">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.DisableVirtualGroups">
      <summary>
            Do the plumbing to disable groups on a virtual list
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.EnableVirtualGroups">
      <summary>
            Do the plumbing to enable groups on a virtual list
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetCheckState(System.Object)">
      <summary>
            Get the checkedness of an object from the model. Returning null means the
            model does know and the value from the control will be used.
            </summary>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetDisplayOrderOfItemIndex(System.Int32)">
      <summary>
            Return the position of the given itemIndex in the list as it currently shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetLastItemInDisplayOrder">
      <summary>
            Return the last item in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetNthItemInDisplayOrder(System.Int32)">
      <summary>
            Return the n'th item (0-based) in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetNextItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Return the ListViewItem that appears immediately after the given item.
            If the given item is null, the first item in the list will be returned.
            Return null if the given item is the last item.
            </summary>
      <param name="itemToFind">The item that is before the item that is returned, or null</param>
      <returns>A OLVListItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.GetPreviousItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Return the ListViewItem that appears immediately before the given item.
            If the given item is null, the last item in the list will be returned.
            Return null if the given item is the first item.
            </summary>
      <param name="itemToFind">The item that is before the item that is returned</param>
      <returns>A ListViewItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.MakeGroups(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Make a list of groups that should be shown according to the given parameters
            </summary>
      <param name="parms">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.MakeListViewItem(System.Int32)">
      <summary>
            Create a OLVListItem for given row index
            </summary>
      <param name="itemIndex">The index of the row that is needed</param>
      <returns>An OLVListItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.PostProcessRows">
      <summary>
            On virtual lists, this cannot work.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Record the change of checkstate for the given object in the model.
            This does not update the UI -- only the model
            </summary>
      <param name="modelObject">
      </param>
      <param name="state">
      </param>
      <returns>The check state that was recorded and that should be used to update
            the control.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.RefreshItem(BrightIdeasSoftware.OLVListItem)">
      <summary>
            Refresh the given item in the list
            </summary>
      <param name="olvi">The item to refresh</param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.SetVirtualListSize(System.Int32)">
      <summary>
            Change the size of the list
            </summary>
      <param name="newSize">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.TakeOwnershipOfObjects">
      <summary>
            Take ownership of the 'objects' collection. This separates our collection from the source.
            </summary>
      <remarks>
        <para>
            This method
            separates the 'objects' instance variable from its source, so that any AddObject/RemoveObject
            calls will modify our collection and not the original colleciton.
            </para>
        <para>
            VirtualObjectListViews always own their collections, so this is a no-op.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.UpdateFiltering">
      <summary>
            Change the state of the control to reflect changes in filtering
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.UpdateVirtualListSize">
      <summary>
            Change the size of the virtual list so that it matches its data source
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.HandleCacheVirtualItems(System.Object,System.Windows.Forms.CacheVirtualItemsEventArgs)">
      <summary>
            Handle the CacheVirtualItems event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.HandleRetrieveVirtualItem(System.Object,System.Windows.Forms.RetrieveVirtualItemEventArgs)">
      <summary>
            Handle a RetrieveVirtualItem
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.HandleSearchForVirtualItem(System.Object,System.Windows.Forms.SearchForVirtualItemEventArgs)">
      <summary>
            Handle the SearchForVirtualList event, which is called when the user types into a virtual list
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualObjectListView.FindMatchInRange(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Find the first row in the given range of rows that prefix matches the string value of the given column.
            </summary>
      <param name="text">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>The index of the matched row, or -1</returns>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.CanShowGroups">
      <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.CheckBoxes">
      <summary>
            Gets or sets whether this ObjectListView will show checkboxes in the primary column
            </summary>
      <remarks>Due to code in the base ListView class, turning off CheckBoxes on a virtual
            list always throws an InvalidOperationException. This implementation codes around
            that limitation.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.CheckedObjects">
      <summary>
            Get or set the collection of model objects that are checked.
            When setting this property, any row whose model object isn't
            in the given collection will be unchecked. Setting to null is
            equivilent to unchecking all.
            </summary>
      <remarks>
        <para>
            This property returns a simple collection. Changes made to the returned
            collection do NOT affect the list. This is different to the behaviour of
            CheckedIndicies collection.
            </para>
        <para>
            When getting CheckedObjects, the performance of this method is O(n) where n is the number of checked objects.
            When setting CheckedObjects, the performance of this method is O(n) where n is the number of checked objects plus
            the number of objects to be checked.
            </para>
        <para>
            If the ListView is not currently showing CheckBoxes, this property does nothing. It does
            not remember any check box settings made.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.FilteredObjects">
      <summary>
            Gets the collection of objects that survive any filtering that may be in place.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.GroupingStrategy">
      <summary>
            Gets or sets the strategy that will be used to create groups
            </summary>
      <remarks>
            This must be provided for a virtual list to show groups.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.IsFiltering">
      <summary>
            Gets whether or not the current list is filtering its contents
            </summary>
      <remarks>
            This is only possible if our underlying data source supports filtering.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.Objects">
      <summary>
            Get/set the collection of objects that this list will show
            </summary>
      <remarks>
        <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
        <para>Setting this property preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code -- performance is O(n) where n is the number of selected rows.</para>
        <para>This method is not thread safe.</para>
        <para>The property DOES work on virtual lists, but if you try to iterate through a list 
            of 10 million objects, it may take some time :)</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.RowGetter">
      <summary>
            This delegate is used to fetch a rowObject, given it's index within the list
            </summary>
      <remarks>Only use this property if you are not using a VirtualListDataSource.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.ShowGroups">
      <summary>
            Should this list show its items in groups?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.VirtualListDataSource">
      <summary>
            Get/set the data source that is behind this virtual list
            </summary>
      <remarks>Setting this will cause the list to redraw.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualObjectListView.VirtualListSize">
      <summary>
            Gets or sets the number of rows in this virtual list.
            </summary>
      <remarks>
            There is an annoying feature/bug in the .NET ListView class. 
            When you change the VirtualListSize property, it always scrolls so
            that the focused item is the top item. This is annoying since it makes
            the virtual list seem to flicker as the control scrolls to show the focused
            item and then scrolls back to where ObjectListView wants it to be.
            </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView">
      <summary>
            A TreeListView combines an expandable tree structure with list view columns.
            </summary>
      <remarks>
        <para>To support tree operations, two delegates must be provided:</para>
        <list type="table">
          <item>
            <term>
            CanExpandGetter
            </term>
            <description>
            This delegate must accept a model object and return a boolean indicating
            if that model should be expandable. 
            </description>
          </item>
          <item>
            <term>
            ChildrenGetter
            </term>
            <description>
            This delegate must accept a model object and return an IEnumerable of model
            objects that will be displayed as children of the parent model. This delegate will only be called
            for a model object if the CanExpandGetter has already returned true for that model.
            </description>
          </item>
        </list>
        <para>
            The top level branches of the tree are set via the Roots property. SetObjects(), AddObjects() 
            and RemoveObjects() are interpreted as operations on this collection of roots.
            </para>
        <para>
            To add new children to an existing branch, make changes to your model objects and then
            call RefreshObject() on the parent.
            </para>
        <para>The tree must be a directed acyclic graph -- no cycles are allowed. Put more mundanely, 
            each model object must appear only once in the tree. If the same model object appears in two
            places in the tree, the control will become confused.</para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.TreeRenderer">
      <summary>
            This class handles drawing the tree structure of the primary column.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.#ctor">
      <summary>
            Create a TreeRenderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            The real work of drawing the tree is done in this method
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.DrawExpansionGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Draw the expansion indicator
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="isExpanded">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.DrawExpansionGlyphStyled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Draw the expansion indicator using styles
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="isExpanded">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.DrawExpansionGlyphManual(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Draw the expansion indicator without using styles
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="isExpanded">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.DrawLines(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Pen,BrightIdeasSoftware.TreeListView.Branch,System.Int32)">
      <summary>
            Draw the lines of the tree
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="p">
      </param>
      <param name="br">
      </param>
      <param name="glyphMidVertical">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.HandleHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Do the hit test
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.TreeRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Calculate the edit rect
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeRenderer.Branch">
      <summary>
            Return the branch that the renderer is currently drawing.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeRenderer.LinePen">
      <summary>
            Return the pen that will be used to draw the lines between branches
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeRenderer.TreeListView">
      <summary>
            Return the TreeListView for which the renderer is being used.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeRenderer.IsShowLines">
      <summary>
            Should the renderer draw lines connecting siblings?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeRenderer.UseStyles">
      <summary>
            Gets whether or not we should render using styles
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.CanExpandGetterDelegate">
      <summary>
            Delegates of this type are use to decide if the given model object can be expanded
            </summary>
      <param name="model">The model under consideration</param>
      <returns>Can the given model be expanded?</returns>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.ChildrenGetterDelegate">
      <summary>
            Delegates of this type are used to fetch the children of the given model object
            </summary>
      <param name="model">The parent whose children should be fetched</param>
      <returns>An enumerable over the children</returns>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.Tree">
      <summary>
            A Tree object represents a tree structure data model that supports both 
            tree and flat list operations as well as fast access to branches.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.#ctor(BrightIdeasSoftware.TreeListView)">
      <summary>
            Create a Tree
            </summary>
      <param name="treeView">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.Collapse(System.Object)">
      <summary>
            Collapse the subtree underneath the given model
            </summary>
      <param name="model">The model to be collapsed. If the model isn't in the tree,
            or if it is already collapsed, the command does nothing.</param>
      <returns>The index of the model in flat list version of the tree</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.CollapseAll">
      <summary>
            Collapse all branches in this tree
            </summary>
      <returns>Return the index of the first root that was not collapsed</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.Expand(System.Object)">
      <summary>
            Expand the subtree underneath the given model object
            </summary>
      <param name="model">The model to be expanded.</param>
      <returns>The index of the model in flat list version of the tree</returns>
      <remarks>
            If the model isn't in the tree,
            if it cannot be expanded or if it is already expanded, the command does nothing.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.ExpandAll">
      <summary>
            Expand all branches in this tree
            </summary>
      <returns>Return the index of the first branch that was expanded</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetBranch(System.Object)">
      <summary>
            Return the Branch object that represents the given model in the tree
            </summary>
      <param name="model">The model whose branches is to be returned</param>
      <returns>The branch that represents the given model, or null if the model
            isn't in the tree.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetVisibleDescendentCount(System.Object)">
      <summary>
            Return the number of visible descendents that are below the given model.
            </summary>
      <param name="model">The model whose descendent count is to be returned</param>
      <returns>The number of visible descendents. 0 if the model doesn't exist or is collapsed</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.RebuildChildren(System.Object)">
      <summary>
            Rebuild the children of the given model, refreshing any cached information held about the given object
            </summary>
      <param name="model">
      </param>
      <returns>The index of the model in flat list version of the tree</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.IsModelExpanded(System.Object)">
      <summary>
            Is the given model expanded?
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.SetModelExpanded(System.Object,System.Boolean)">
      <summary>
            Remember whether or not the given model was expanded
            </summary>
      <param name="model">
      </param>
      <param name="isExpanded">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.InsertChildren(BrightIdeasSoftware.TreeListView.Branch,System.Int32)">
      <summary>
            Insert the children of the given branch into the given position
            </summary>
      <param name="br">The branch whose children should be inserted</param>
      <param name="index">The index where the children should be inserted</param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.RebuildList">
      <summary>
            Rebuild our flat internal list of objects.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.RebuildObjectMap(System.Int32)">
      <summary>
            Rebuild our reverse index that maps an object to its location
            in the filteredObjectList array.
            </summary>
      <param name="startIndex">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.MakeBranch(BrightIdeasSoftware.TreeListView.Branch,System.Object)">
      <summary>
            Create a new branch within this tree
            </summary>
      <param name="parent">
      </param>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetNthObject(System.Int32)">
      <summary>
      </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetObjectCount">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetObjectIndex(System.Object)">
      <summary>
      </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.PrepareCache(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="first">
      </param>
      <param name="last">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.SearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.Sort(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Sort the tree on the given column and in the given order
            </summary>
      <param name="column">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.GetBranchComparer">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.AddObjects(System.Collections.ICollection)">
      <summary>
            Add the given collection of objects to the roots of this tree
            </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove all of the given objects from the roots of the tree.
            Any objects that is not already in the roots collection is ignored.
            </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.SetObjects(System.Collections.IEnumerable)">
      <summary>
            Set the roots of this tree to be the given collection
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.ApplyFilters(BrightIdeasSoftware.IModelFilter,BrightIdeasSoftware.IListFilter)">
      <summary>
      </summary>
      <param name="modelFilter">
      </param>
      <param name="listFilter">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Tree.IncludeModel(System.Object)">
      <summary>
            Should the given model be included in this control?
            </summary>
      <param name="model">The model to consider</param>
      <returns>True if it will be included</returns>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Tree.CanExpandGetter">
      <summary>
            This is the delegate that will be used to decide if a model object can be expanded.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Tree.ChildrenGetter">
      <summary>
            This is the delegate that will be used to fetch the children of a model object
            </summary>
      <remarks>This delegate will only be called if the CanExpand delegate has 
            returned true for the model object.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Tree.RootObjects">
      <summary>
            Get or return the top level model objects in the tree
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Tree.TreeView">
      <summary>
            What tree view is this Tree the model for?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Tree.IsFiltering">
      <summary>
            Is this list currently being filtered?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.Branch">
      <summary>
            A Branch represents a sub-tree within a tree
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.Branch.BranchFlags">
      <summary>
            Indicators for branches
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.#ctor(BrightIdeasSoftware.TreeListView.Branch,BrightIdeasSoftware.TreeListView.Tree,System.Object)">
      <summary>
            Create a Branch
            </summary>
      <param name="parent">
      </param>
      <param name="tree">
      </param>
      <param name="model">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.ClearCachedInfo">
      <summary>
            Clear any cached information that this branch is holding
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.Collapse">
      <summary>
            Collapse this branch
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.Expand">
      <summary>
            Expand this branch
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.ExpandAll">
      <summary>
            Expand this branch recursively
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.FetchChildren">
      <summary>
            Fetch the children of this branch.
            </summary>
      <remarks>This should only be called when CanExpand is true.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.Flatten">
      <summary>
            Collapse the visible descendents of this branch into list of model objects
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.FlattenOnto(System.Collections.IList)">
      <summary>
            Flatten this branch's visible descendents onto the given list.
            </summary>
      <param name="flatList">
      </param>
      <remarks>The branch itself is <b>not</b> included in the list.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.RefreshChildren">
      <summary>
            Force a refresh of all children recursively
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Branch.Sort(BrightIdeasSoftware.TreeListView.BranchComparer)">
      <summary>
            Sort the sub-branches and their descendents so they are ordered according
            to the given comparer.
            </summary>
      <param name="comparer">The comparer that orders the branches</param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Ancestors">
      <summary>
            Get the ancestor branches of this branch, with the 'oldest' ancestor first.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.CanExpand">
      <summary>
            Can this branch be expanded?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.ChildBranches">
      <summary>
            Gets or sets our children
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Children">
      <summary>
            Get/set the model objects that are beneath this branch
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.FilteredChildBranches">
      <summary>
            Gets a list of all the branches that survive filtering
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.IsExpanded">
      <summary>
            Gets or set whether this branch is expanded
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.IsFirstBranch">
      <summary>
            Return true if this branch is the first branch of the entire tree
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.IsLastChild">
      <summary>
            Return true if this branch is the last child of its parent
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.IsOnlyBranch">
      <summary>
            Return true if this branch is the only top level branch
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Level">
      <summary>
            Gets the depth level of this branch
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Model">
      <summary>
            Gets or sets which model is represented by this branch
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.NumberVisibleDescendents">
      <summary>
            Return the number of descendents of this branch that are currently visible
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.ParentBranch">
      <summary>
            Gets or sets our parent branch
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Tree">
      <summary>
            Gets or sets our overall tree
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Branch.Visible">
      <summary>
            Is this branch currently visible? A branch is visible
            if it has no parent (i.e. it's a root), or its parent
            is visible and expanded.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeListView.BranchComparer">
      <summary>
            This class sorts branches according to how their respective model objects are sorted
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.BranchComparer.#ctor(System.Collections.IComparer)">
      <summary>
            Create a BranchComparer
            </summary>
      <param name="actualComparer">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.BranchComparer.Compare(BrightIdeasSoftware.TreeListView.Branch,BrightIdeasSoftware.TreeListView.Branch)">
      <summary>
            Order the two branches
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.OnExpanding(BrightIdeasSoftware.TreeBranchExpandingEventArgs)">
      <summary>
            Trigger the expanding event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.OnCollapsing(BrightIdeasSoftware.TreeBranchCollapsingEventArgs)">
      <summary>
            Trigger the collapsing event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.OnExpanded(BrightIdeasSoftware.TreeBranchExpandedEventArgs)">
      <summary>
            Trigger the expanded event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.OnCollapsed(BrightIdeasSoftware.TreeBranchCollapsedEventArgs)">
      <summary>
            Trigger the collapsed event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.#ctor">
      <summary>
            Make a default TreeListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.EnsureTreeRendererPresent(BrightIdeasSoftware.TreeListView.TreeRenderer)">
      <summary>
            Make sure that at least one column is displaying a tree. 
            If no columns is showing the tree, make column 0 do it.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.IsExpanded(System.Object)">
      <summary>
            Return true if the branch at the given model is expanded
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Collapse(System.Object)">
      <summary>
            Collapse the subtree underneath the given model
            </summary>
      <param name="model">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.CollapseAll">
      <summary>
            Collapse all subtrees within this control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.ClearObjects">
      <summary>
            Remove all items from this list
            </summary>
      <remark>This method can safely be called from background threads.</remark>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.DiscardAllState">
      <summary>
            Collapse all roots and forget everything we know about all models
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.RebuildAll(System.Boolean)">
      <summary>
            Completely rebuild the tree structure
            </summary>
      <param name="preserveState">If true, the control will try to preserve selection and expansion</param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.RebuildAll(System.Collections.IList,System.Collections.IEnumerable,System.Collections.IList)">
      <summary>
            Completely rebuild the tree structure
            </summary>
      <param name="selected">If not null, this list of objects will be selected after the tree is rebuilt</param>
      <param name="expanded">If not null, this collection of objects will be expanded after the tree is rebuilt</param>
      <param name="checkedObjects">If not null, this collection of objects will be checked after the tree is rebuilt</param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.Expand(System.Object)">
      <summary>
            Expand the subtree underneath the given model object
            </summary>
      <param name="model">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.ExpandAll">
      <summary>
            Expand all the branches within this tree recursively.
            </summary>
      <remarks>Be careful: this method could take a long time for large trees.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.RefreshObjects(System.Collections.IList)">
      <summary>
            Update the rows that are showing the given objects
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.ToggleExpansion(System.Object)">
      <summary>
            Toggle the expanded state of the branch at the given model object
            </summary>
      <param name="model">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.CanExpand(System.Object)">
      <summary>
            Return whether or not the given model can expand.
            </summary>
      <param name="model">
      </param>
      <remarks>The given model must have already been seen in the tree</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.GetParent(System.Object)">
      <summary>
            Return the model object that is the parent of the given model object.
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
      <remarks>The given model must have already been seen in the tree.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.GetChildren(System.Object)">
      <summary>
            Return the collection of model objects that are the children of the 
            given model.
            </summary>
      <param name="model">
      </param>
      <remarks>The given model must have already been seen in the tree and
            must be expandable</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.ProcessLButtonDown(BrightIdeasSoftware.OlvListViewHitTestInfo)">
      <summary>
            Handle a left button down event
            </summary>
      <param name="hti">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.MakeListViewItem(System.Int32)">
      <summary>
            Create a OLVListItem for given row index
            </summary>
      <param name="itemIndex">The index of the row that is needed</param>
      <returns>An OLVListItem</returns>
      <remarks>This differs from the base method by also setting up the IndentCount property.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.HandleApplicationIdle(System.Object,System.EventArgs)">
      <summary>
            The application is idle and a SelectionChanged event has been scheduled
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            Decide if the given key event should be handled as a normal key input to the control?
            </summary>
      <param name="keyData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Handle the keyboard input to mimic a TreeView.
            </summary>
      <param name="e">
      </param>
      <returns>Was the key press handled?</returns>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.CanExpandGetter">
      <summary>
            This is the delegate that will be used to decide if a model object can be expanded.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.CanShowGroups">
      <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.ChildrenGetter">
      <summary>
            This is the delegate that will be used to fetch the children of a model object
            </summary>
      <remarks>This delegate will only be called if the CanExpand delegate has 
            returned true for the model object.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.ExpandedObjects">
      <summary>
            Gets or sets the model objects that are expanded.
            </summary>
      <remarks>
        <para>This can be used to expand model objects before they are seen.</para>
        <para>
            Setting this does *not* force the control to rebuild
            its display. You need to call RebuildAll(true).
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.ListFilter">
      <summary>
            Gets or  sets the filter that is applied to our whole list of objects.
            TreeListViews do not currently support whole list filters.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Objects">
      <summary>
            Gets or sets the collection of root objects of the tree
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.ObjectsForClustering">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.RevealAfterExpand">
      <summary>
            After expanding a branch, should the TreeListView attempts to show as much of the 
            revealed descendents as possible.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.Roots">
      <summary>
            The model objects that form the top level branches of the tree.
            </summary>
      <remarks>Setting this does <b>NOT</b> reset the state of the control.
            In particular, it does not collapse branches.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeColumnRenderer">
      <summary>
            Gets or sets the renderer that will be used to draw the tree structure.
            Setting this to null resets the renderer to default.
            </summary>
      <remarks>If a column is currently rendering the tree, the renderer
            for that column will be replaced. If no column is rendering the tree,
            column 0 will be given this renderer.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.UseWaitCursorWhenExpanding">
      <summary>
            Should a wait cursor be shown when a branch is being expanded?
            </summary>
      <remarks>When this is true, the wait cursor will be shown whilst the children of the 
            branch are being fetched. If the children of the branch have already been cached, 
            the cursor will not change.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeListView.TreeModel">
      <summary>
            The model that is used to manage the tree structure
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.TreeListView.Expanding">
      <summary>
            This event is triggered when user input requests the expansion of a list item.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.TreeListView.Collapsing">
      <summary>
            This event is triggered when user input requests the collapse of a list item.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.TreeListView.Expanded">
      <summary>
            This event is triggered after the expansion of a list item due to user input.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.TreeListView.Collapsed">
      <summary>
            This event is triggered after the collapse of a list item due to user input.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IRenderer">
      <summary>
            Renderers are the mechanism used for owner drawing cells. As such, they can also handle
            hit detection and positioning of cell editing rectangles.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render the whole item within an ObjectListView. This is only used in non-Details views.
            </summary>
      <param name="e">The event</param>
      <param name="g">A Graphics for rendering</param>
      <param name="itemBounds">The bounds of the item</param>
      <param name="rowObject">The model object to be drawn</param>
      <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render one cell within an ObjectListView when it is in Details mode.
            </summary>
      <param name="e">The event</param>
      <param name="g">A Graphics for rendering</param>
      <param name="cellBounds">The bounds of the cell</param>
      <param name="rowObject">The model object to be drawn</param>
      <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IRenderer.HitTest(BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            What is under the given point?
            </summary>
      <param name="hti">
      </param>
      <param name="x">x co-ordinate</param>
      <param name="y">y co-ordinate</param>
      <remarks>This method should only alter HitTestLocation and/or UserData.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.IRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            When the value in the given cell is to be edited, where should the edit rectangle be placed?
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractRenderer">
      <summary>
            An AbstractRenderer is a do-nothing implementation of the IRenderer interface.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render the whole item within an ObjectListView. This is only used in non-Details views.
            </summary>
      <param name="e">The event</param>
      <param name="g">A Graphics for rendering</param>
      <param name="itemBounds">The bounds of the item</param>
      <param name="rowObject">The model object to be drawn</param>
      <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render one cell within an ObjectListView when it is in Details mode.
            </summary>
      <param name="e">The event</param>
      <param name="g">A Graphics for rendering</param>
      <param name="cellBounds">The bounds of the cell</param>
      <param name="rowObject">The model object to be drawn</param>
      <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractRenderer.HitTest(BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            What is under the given point?
            </summary>
      <param name="hti">
      </param>
      <param name="x">x co-ordinate</param>
      <param name="y">y co-ordinate</param>
      <remarks>This method should only alter HitTestLocation and/or UserData.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            When the value in the given cell is to be edited, where should the edit rectangle be placed?
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.BaseRenderer">
      <summary>
            A BaseRenderer provides useful base level functionality for any custom renderer.
            </summary>
      <remarks>
        <para>Subclasses will normally override the Render or OptionalRender method, and use the other
            methods as helper functions.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.AlignRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
            Align the second rectangle with the first rectangle,
            according to the alignment of the column
            </summary>
      <param name="outer">The cell's bounds</param>
      <param name="inner">The rectangle to be aligned within the bounds</param>
      <returns>An aligned rectangle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.AlignHorizontally(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
            Calculate the left edge of the rectangle that aligns the outer rectangle with the inner one 
            according to this renderer's horizontal alignement
            </summary>
      <param name="outer">
      </param>
      <param name="inner">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.AlignVertically(System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
            Calculate the top of the rectangle that aligns the outer rectangle with the inner rectangle
            according to this renders vertical alignment
            </summary>
      <param name="outer">
      </param>
      <param name="inner">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.AlignVertically(System.Drawing.Rectangle,System.Int32)">
      <summary>
            Calculate the top of the rectangle that aligns the outer rectangle with a rectangle of the given height
            according to this renderer's vertical alignment
            </summary>
      <param name="outer">
      </param>
      <param name="innerHeight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculateAlignedRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Calculate the space that our rendering will occupy and then align that space
            with the given rectangle, according to the Column alignment
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculateCheckBoxWidth(System.Drawing.Graphics)">
      <summary>
            How much space will the check box for this cell occupy?
            </summary>
      <remarks>Only column 0 can have check boxes. Sub item checkboxes are
            treated as images</remarks>
      <param name="g">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculateImageWidth(System.Drawing.Graphics,System.Object)">
      <summary>
            How much horizontal space will the image of this cell occupy?
            </summary>
      <param name="g">
      </param>
      <param name="imageSelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculateTextWidth(System.Drawing.Graphics,System.String)">
      <summary>
            How much horizontal space will the text of this cell occupy?
            </summary>
      <param name="g">
      </param>
      <param name="txt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetBackgroundColor">
      <summary>
            Return the Color that is the background color for this item's cell
            </summary>
      <returns>The background color of the subitem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetForegroundColor">
      <summary>
            Return the color to be used for text in this cell
            </summary>
      <returns>The text color of the subitem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetImage">
      <summary>
            Return the image that should be drawn against this subitem
            </summary>
      <returns>An Image or null if no image should be drawn.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetImage(System.Object)">
      <summary>
            Return the actual image that should be drawn when keyed by the given image selector.
            An image selector can be: <list type="bullet"><item><description>an int, giving the index into the image list</description></item><item><description>a string, giving the image key into the image list</description></item><item><description>an Image, being the image itself</description></item></list></summary>
      <param name="imageSelector">The value that indicates the image to be used</param>
      <returns>An Image or null</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetImageSelector">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetText">
      <summary>
            Return the string that should be drawn within this
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetTextBackgroundColor">
      <summary>
            Return the Color that is the background color for this item's text
            </summary>
      <returns>The background color of the subitem's text</returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render the whole item in a non-details view.
            </summary>
      <param name="e">
      </param>
      <param name="g">
      </param>
      <param name="itemBounds">
      </param>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Render one cell
            </summary>
      <param name="e">
      </param>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.HitTest(BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Calculate which part of this cell was hit
            </summary>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Calculate the edit rectangle
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.OptionalRender(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
      <remarks>
        <para>Subclasses should override this method.</para>
      </remarks>
      <param name="g">The graphics context that should be used for drawing</param>
      <param name="r">The bounds of the subitem cell</param>
      <returns>Returns whether the renderering has already taken place.
            If this returns false, the default processing will take over.
            </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
      <remarks>
        <para>Subclasses should override this method if they never want
            to fall back on the default processing</para>
      </remarks>
      <param name="g">The graphics context that should be used for drawing</param>
      <param name="r">The bounds of the subitem cell</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.HandleHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Do the actual work of hit testing. Subclasses should override this rather than HitTest()
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Handle a HitTest request after all state information has been initialized
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.StandardRender(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the standard "[checkbox] [image] [text]" cell after the state properties have been initialized.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.ApplyCellPadding(System.Drawing.Rectangle)">
      <summary>
            Change the bounds of the given rectangle to take any cell padding into account
            </summary>
      <param name="r">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.StandardHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Perform normal hit testing relative to the given bounds
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="bounds">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.StandardGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            This method calculates the bounds of the text within a standard layout
            (i.e. optional checkbox, optional image, text)
            </summary>
      <remarks>This method only works correctly if the state of the renderer
            has been fully initialized (see BaseRenderer.GetEditRectangle)</remarks>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculatePaddedAlignedBounds(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawAlignedImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
      <summary>
            Draw the given image aligned horizontally within the column.
            </summary>
      <remarks>
            Over tall images are scaled to fit. Over-wide images are
            truncated. This is by design!
            </remarks>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
      <param name="image">The image to be drawn</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawAlignedImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our subitems image and text
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Fill in the background of this cell
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the check box of this row
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.GetCheckBoxState(System.Windows.Forms.CheckState)">
      <summary>
            Calculate the renderer checkboxstate we need to correctly draw the given state
            </summary>
      <param name="checkState">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.CalculateCheckBoxBounds(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Draw the given text and optional image in the "normal" fashion
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
      <param name="imageSelector">The optional image to be drawn</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our subitems image and text
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawImages(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ICollection)">
      <summary>
            Draw the given collection of image selectors
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="imageSelectors">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Draw the given text and optional image in the "normal" fashion
            </summary>
      <param name="g">Graphics context to use for drawing</param>
      <param name="r">Bounds of the cell</param>
      <param name="txt">The string to be drawn</param>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawTextGdi(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Print the given text in the given rectangle using only GDI routines
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="txt">
      </param>
      <remarks>
            The native list control uses GDI routines to do its drawing, so using them
            here makes the owner drawn mode looks more natural.
            <para>This method doesn't honour the CanWrap setting on the renderer. All
            text is single line</para></remarks>
    </member>
    <member name="M:BrightIdeasSoftware.BaseRenderer.DrawTextGdiPlus(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Print the given text in the given rectangle using normal GDI+ .NET methods
            </summary>
      <remarks>Printing to a printer dc has to be done using this method.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.CanWrap">
      <summary>
            Can the renderer wrap lines that do not fit completely within the cell?
            </summary>
      <remarks>Wrapping text doesn't work with the GDI renderer.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.CellPadding">
      <summary>
            Gets or sets how many pixels will be left blank around this cell
            </summary>
      <remarks>
        <para>
            This setting only takes effect when the control is owner drawn.
            </para>
        <para>
          <see cref="P:BrightIdeasSoftware.ObjectListView.CellPadding" /> for more details.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.CellVerticalAlignment">
      <summary>
            Gets or sets how cells drawn by this renderer will be vertically aligned.
            </summary>
      <remarks>
        <para>
            If this is not set, the value from the column or control itself will be used.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.EffectiveCellPadding">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.EffectiveCellVerticalAlignment">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.ImageList">
      <summary>
            Gets or sets the image list from which keyed images will be fetched
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Spacing">
      <summary>
            When rendering multiple images, how many pixels should be between each image?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.UseGdiTextRendering">
      <summary>
            Should text be rendered using GDI routines? This makes the text look more
            like a native List view control.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Aspect">
      <summary>
            Get or set the aspect of the model object that this renderer should draw
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Bounds">
      <summary>
            What are the bounds of the cell that is being drawn?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Column">
      <summary>
            Get or set the OLVColumn that this renderer will draw
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.DrawItemEvent">
      <summary>
            Get/set the event that caused this renderer to be called
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Event">
      <summary>
            Get/set the event that caused this renderer to be called
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.Font">
      <summary>
            Return the font to be used for text in this cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.ImageListOrDefault">
      <summary>
            Gets the image list from which keyed images will be fetched
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.IsDrawBackground">
      <summary>
            Should this renderer fill in the background before drawing?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.IsItemSelected">
      <summary>
            Cache whether or not our item is selected
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.IsPrinting">
      <summary>
            Is this renderer being used on a printer context?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.ListItem">
      <summary>
            Get or set the listitem that this renderer will be drawing
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.ListView">
      <summary>
            Get/set the listview for which the drawing is to be done
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.OLVSubItem">
      <summary>
            Get the specialized OLVSubItem that this renderer is drawing
            </summary>
      <remarks>This returns null for column 0.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.RowObject">
      <summary>
            Get or set the model object that this renderer should draw
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.SubItem">
      <summary>
            Get or set the list subitem that this renderer will be drawing
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.TextBrush">
      <summary>
            The brush that will be used to paint the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.IsCheckBoxDisabled">
      <summary>
            Should this checkbox be drawn as disabled?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.IsItemHot">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.CellVerticalAlignmentAsTextFormatFlag">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BaseRenderer.StringFormatForGdiPlus">
      <summary>
            Gets the StringFormat needed when drawing text using GDI+
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HighlightTextRenderer">
      <summary>
            This renderer highlights substrings that match a given text filter. 
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.#ctor">
      <summary>
            Create a HighlightTextRenderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.#ctor(BrightIdeasSoftware.TextMatchFilter)">
      <summary>
            Create a HighlightTextRenderer
            </summary>
      <param name="filter">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.#ctor(System.String)">
      <summary>
            Create a HighlightTextRenderer
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Handle a HitTest request after all state information has been initialized
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.DrawTextGdi(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Draw text using GDI
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="txt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.DrawGdiTextHighlighting(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Draw the highlighted text using GDI
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="txt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.DrawSubstringFrame(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Draw an indication around the given frame that shows a text match
            </summary>
      <param name="g">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.DrawTextGdiPlus(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Draw the text using GDI+
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="txt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.DrawGdiPlusTextHighlighting(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Draw the highlighted text using GDI+
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="txt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.GetRoundedRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
      <returns>A round cornered rectagle path</returns>
      <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="diameter">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HighlightTextRenderer.GetRoundedRect(System.Drawing.RectangleF,System.Single)">
      <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
      <param name="rect">The rectangle</param>
      <param name="diameter">The diameter of the corners</param>
      <returns>A round cornered rectagle path</returns>
      <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.CornerRoundness">
      <summary>
            Gets or set how rounded will be the corners of the text match frame
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.FillBrush">
      <summary>
            Gets or set the brush will be used to paint behind the matched substrings.
            Set this to null to not fill the frame.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.Filter">
      <summary>
            Gets or sets the filter that is filtering the ObjectListView and for
            which this renderer should highlight text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.FramePen">
      <summary>
            Gets or set the pen will be used to frame the matched substrings.
            Set this to null to not draw a frame.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.UseRoundedRectangle">
      <summary>
            Gets or sets whether the frame around a text match will have rounded corners
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.TextToHighlight">
      <summary>
            Gets or set the text that will be highlighted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.StringComparison">
      <summary>
            Gets or sets the manner in which substring will be compared.
            </summary>
      <remarks>
            Use this to control if substring matches are case sensitive or insensitive.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HighlightTextRenderer.ShouldDrawHighlighting">
      <summary>
            Gets whether the renderer should actually draw highlighting
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IVirtualListDataSource">
      <summary>
            A VirtualListDataSource is a complete manner to provide functionality to a virtual list.
            An object that implements this interface provides a VirtualObjectListView with all the
            information it needs to be fully functional.
            </summary>
      <remarks>Implementors must provide functioning implementations of at least GetObjectCount()
            and GetNthObject(), otherwise nothing will appear in the list.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.GetNthObject(System.Int32)">
      <summary>
            Return the object that should be displayed at the n'th row.
            </summary>
      <param name="n">The index of the row whose object is to be returned.</param>
      <returns>The model object at the n'th row, or null if the fetching was unsuccessful.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.GetObjectCount">
      <summary>
            Return the number of rows that should be visible in the virtual list
            </summary>
      <returns>The number of rows the list view should have.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.GetObjectIndex(System.Object)">
      <summary>
            Get the index of the row that is showing the given model object
            </summary>
      <param name="model">The model object sought</param>
      <returns>The index of the row showing the model, or -1 if the object could not be found.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.PrepareCache(System.Int32,System.Int32)">
      <summary>
            The ListView is about to request the given range of items. Do
            whatever caching seems appropriate.
            </summary>
      <param name="first">
      </param>
      <param name="last">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.SearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Find the first row that "matches" the given text in the given range.
            </summary>
      <param name="value">The text typed by the user</param>
      <param name="first">Start searching from this index. This may be greater than the 'to' parameter, 
            in which case the search should descend</param>
      <param name="last">Do not search beyond this index. This may be less than the 'from' parameter.</param>
      <param name="column">The column that should be considered when looking for a match.</param>
      <returns>Return the index of row that was matched, or -1 if no match was found</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.Sort(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Sort the model objects in the data source.
            </summary>
      <param name="column">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.AddObjects(System.Collections.ICollection)">
      <summary>
            Add the given collection of model objects to this control.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove all of the given objects from the control
            </summary>
      <param name="modelObjects">Collection of objects to be removed</param>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualListDataSource.SetObjects(System.Collections.IEnumerable)">
      <summary>
            Set the collection of objects that this control will show.
            </summary>
      <param name="collection">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.IFilterableDataSource">
      <summary>
            This extension allow virtual lists to filter their contents
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IFilterableDataSource.ApplyFilters(BrightIdeasSoftware.IModelFilter,BrightIdeasSoftware.IListFilter)">
      <summary>
            All subsequent retrievals on this data source should be filtered
            through the given filters. null means no filtering of that kind.
            </summary>
      <param name="modelFilter">
      </param>
      <param name="listFilter">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.DataTreeListView">
      <summary>
            A DataTreeListView is a TreeListView that calculates its hierarchy based on
            information in the data source.
            </summary>
      <remarks>
        <para>Like a <see cref="T:BrightIdeasSoftware.DataListView" />, a DataTreeListView sources all its information
            from a combination of <see cref="P:BrightIdeasSoftware.DataTreeListView.DataSource" /> and <see cref="P:BrightIdeasSoftware.DataTreeListView.DataMember" />. 
            <see cref="P:BrightIdeasSoftware.DataTreeListView.DataSource" /> can be a DataTable, DataSet,
            or anything that implements <see cref="T:System.Collections.IList" />. 
            </para>
        <para>
            To function properly, the DataTreeListView requires:
            <list type="bullet"><item>the table to have a column which holds a unique for the row. The name of this column must be set in <see cref="P:BrightIdeasSoftware.DataTreeListView.KeyAspectName" />.</item><item>the table to have a column which holds id of the hierarchical parent of the row. The name of this column must be set in <see cref="P:BrightIdeasSoftware.DataTreeListView.ParentKeyAspectName" />.</item><item>a value which identifies which rows are the roots of the tree (<see cref="P:BrightIdeasSoftware.DataTreeListView.RootKeyValue" />).</item></list>
            The hierarchy structure is determined finding all the rows where the parent key is equal to <see cref="P:BrightIdeasSoftware.DataTreeListView.RootKeyValue" />. These  rows
            become the root objects of the hierarchy.
            </para>
        <para>Like a TreeListView, the hierarchy must not contain cycles. Bad things will happen if the data is cyclic.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.DataSource">
      <summary>
            Get or set the DataSource that will be displayed in this list view.
            </summary>
      <remarks>The DataSource should implement either <see cref="T:System.Collections.IList" />, <see cref="T:System.ComponentModel.IBindingList" />,
            or <see cref="T:System.ComponentModel.IListSource" />. Some common examples are the following types of objects:
            <list type="unordered"><item><description><see cref="T:System.Data.DataView" /></description></item><item><description><see cref="T:System.Data.DataTable" /></description></item><item><description><see cref="T:System.Data.DataSet" /></description></item><item><description><see cref="T:System.Data.DataViewManager" /></description></item><item><description><see cref="T:System.Windows.Forms.BindingSource" /></description></item></list><para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource" /> interface, such as <see cref="T:System.Data.DataSet" />)
            you must also set the <see cref="P:BrightIdeasSoftware.DataTreeListView.DataMember" /> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:BrightIdeasSoftware.DataTreeListView.DataMember" /> property even when
            DataSource refers to a list, since <see cref="P:BrightIdeasSoftware.DataTreeListView.DataMember" /> can
            also be used to navigate relations between lists.</para></remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.DataMember">
      <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
      <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.KeyAspectName">
      <summary>
            Gets or sets the name of the property/column that uniquely identifies each row.
            </summary>
      <remarks>
        <para>
            The value contained by this column must be unique across all rows 
            in the data source. Odd and unpredictable things will happen if two
            rows have the same id.
            </para>
        <para>Null cannot be a valid key value.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.ParentKeyAspectName">
      <summary>
            Gets or sets the name of the property/column that contains the key of
            the parent of a row.
            </summary>
      <remarks>
        <para>
            The test condition for deciding if one row is the parent of another is functionally
            equivilent to this:
            <code>
            Object.Equals(candidateParentRow[this.KeyAspectName], row[this.ParentKeyAspectName])
            </code></para>
        <para>Unlike key value, parent keys can be null but a null parent key can only be used
            to identify root objects.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.RootKeyValue">
      <summary>
            Gets or sets the value that identifies a row as a root object.
            When the ParentKey of a row equals the RootKeyValue, that row will
            be treated as root of the TreeListView.
            </summary>
      <remarks>
        <para>
            The test condition for deciding a root object is functionally
            equivilent to this:
            <code>
            Object.Equals(candidateRow[this.ParentKeyAspectName], this.RootKeyValue)
            </code></para>
        <para>The RootKeyValue can be null. Actually, it can be any value that can 
            be compared for equality against a basic type.</para>
        <para>If this is set to the wrong value (i.e. to a value that no row
            has in the parent id column), the list will be empty.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.RootKeyValueString">
      <summary>
            Gets or sets the value that identifies a row as a root object.
            <see cref="P:BrightIdeasSoftware.DataTreeListView.RootKeyValue" />. The RootKeyValue can be of any type,
            but the IDE cannot sensibly represent a value of any type,
            so this is a typed wrapper around that property.
            </summary>
      <remarks>
            If you want the root value to be something other than a string,
            you will have set it yourself.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.ShowKeyColumns">
      <summary>
            Gets or sets whether or not the key columns (id and parent id) should
            be shown to the user.
            </summary>
      <remarks>This must be set before the DataSource is set. It has no effect
            afterwards.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataTreeListView.Adapter">
      <summary>
            Gets or sets the DataSourceAdaptor that does the bulk of the work needed
            for data binding.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVDataObject">
      <summary>
            A data transfer object that knows how to transform a list of model
            objects into a text and HTML representation.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create a data object from the selected objects in the given ObjectListView
            </summary>
      <param name="olv">The source of the data object</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.#ctor(BrightIdeasSoftware.ObjectListView,System.Collections.IList)">
      <summary>
            Create a data object which operates on the given model objects 
            in the given ObjectListView
            </summary>
      <param name="olv">The source of the data object</param>
      <param name="modelObjects">The model objects to be put into the data object</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.CreateTextFormats">
      <summary>
            Put a text and HTML representation of our model objects
            into the data object.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.CreateExporter">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.CreateHtml">
      <summary>
            Make a HTML representation of our model objects
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVDataObject.ConvertToHtmlFragment(System.String)">
      <summary>
            Convert the fragment of HTML into the Clipboards HTML format.
            </summary>
      <remarks>The HTML format is found here http://msdn2.microsoft.com/en-us/library/aa767917.aspx
            </remarks>
      <param name="fragment">The HTML to put onto the clipboard. It must be valid HTML!</param>
      <returns>A string that can be put onto the clipboard and will be recognized as HTML</returns>
    </member>
    <member name="P:BrightIdeasSoftware.OLVDataObject.IncludeHiddenColumns">
      <summary>
            Gets or sets whether hidden columns will also be included in the text
            and HTML representation. If this is false, only visible columns will
            be included.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVDataObject.IncludeColumnHeaders">
      <summary>
            Gets or sets whether column headers will also be included in the text
            and HTML representation.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVDataObject.ListView">
      <summary>
            Gets the ObjectListView that is being used as the source of the data
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVDataObject.ModelObjects">
      <summary>
            Gets the model objects that are to be placed in the data object
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.DateTimePortion">
      <summary>
            This enum is used to indicate various portions of a datetime
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Year">
      <summary>
            Year
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Month">
      <summary>
            Month
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Day">
      <summary>
            Day of the month
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Hour">
      <summary>
            Hour
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Minute">
      <summary>
            Minute
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DateTimePortion.Second">
      <summary>
            Second
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IClusteringStrategy">
      <summary>
            Implementation of this interface control the selecting of cluster keys
            and how those clusters will be presented to the user
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IClusteringStrategy.GetClusterKey(System.Object)">
      <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
      <remarks>If the returned value is an IEnumerable, the given model is considered
            to belong to multiple clusters</remarks>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IClusteringStrategy.CreateCluster(System.Object)">
      <summary>
            Create a cluster to hold the given cluster key
            </summary>
      <param name="clusterKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IClusteringStrategy.GetClusterDisplayLabel(BrightIdeasSoftware.ICluster)">
      <summary>
            Gets the display label that the given cluster should use
            </summary>
      <param name="cluster">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IClusteringStrategy.CreateFilter(System.Collections.IList)">
      <summary>
            Create a filter that will include only model objects that
            match one or more of the given values.
            </summary>
      <param name="valuesChosenForFiltering">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.IClusteringStrategy.Column">
      <summary>
            Gets or sets the column upon which this strategy will operate
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ClusteringStrategy">
      <summary>
            This class provides a useful base implemention of a clustering
            strategy where the clusters are grouped around the value of a given column.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ClusteringStrategy.NULL_LABEL">
      <summary>
            This field is the text that will be shown to the user when a cluster
            key is null. It is exposed so it can be localized.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ClusteringStrategy.EMPTY_LABEL">
      <summary>
            This field is the text that will be shown to the user when a cluster
            key is empty (i.e. a string of zero length). It is exposed so it can be localized.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.#ctor">
      <summary>
            Create a clustering strategy
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.GetClusterKey(System.Object)">
      <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.CreateCluster(System.Object)">
      <summary>
            Create a cluster to hold the given cluster key
            </summary>
      <param name="clusterKey">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.GetClusterDisplayLabel(BrightIdeasSoftware.ICluster)">
      <summary>
            Gets the display label that the given cluster should use
            </summary>
      <param name="cluster">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.CreateFilter(System.Collections.IList)">
      <summary>
            Create a filter that will include only model objects that
            match one or more of the given values.
            </summary>
      <param name="valuesChosenForFiltering">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ClusteringStrategy.ApplyDisplayFormat(BrightIdeasSoftware.ICluster,System.String)">
      <summary>
            Create a label that combines the string representation of the cluster
            key with a format string that holds an "X [N items in cluster]" type layout.
            </summary>
      <param name="cluster">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.ClusteringStrategy.DefaultDisplayLabelFormatSingular">
      <summary>
            Gets or sets the format that will be used by default for clusters that only
            contain 1 item. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster (always 1 in this case)
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ClusteringStrategy.DefaultDisplayLabelFormatPlural">
      <summary>
            Gets or sets the format that will be used by default for clusters that 
            contain 0 or two or more items. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ClusteringStrategy.Column">
      <summary>
            Gets or sets the column upon which this strategy is operating
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ClusteringStrategy.DisplayLabelFormatSingular">
      <summary>
            Gets or sets the format that will be used when the cluster
            contains only 1 item. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster (always 1 in this case)
            </summary>
      <remarks>If this is not set, the value from 
            ClusteringStrategy.DefaultDisplayLabelFormatSingular will be used</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ClusteringStrategy.DisplayLabelFormatPlural">
      <summary>
            Gets or sets the format that will be used when the cluster 
            contains 0 or two or more items. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster
            </summary>
      <remarks>If this is not set, the value from 
            ClusteringStrategy.DefaultDisplayLabelFormatPlural will be used</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.DateTimeClusteringStrategy">
      <summary>
            This class implements a strategy where the model objects are clustered
            according to some portion of the datetime value in the configured column.
            </summary>
      <remarks>To create a strategy that grouped people who were born in
            the same month, you would create a strategy that extracted just
            the month, and formatted it to show just the month's name. Like this:
            </remarks>
      <example>
            someColumn.ClusteringStrategy = new DateTimeClusteringStrategy(DateTimePortion.Month, "MMMM");
            </example>
    </member>
    <member name="M:BrightIdeasSoftware.DateTimeClusteringStrategy.#ctor">
      <summary>
            Create a strategy that clusters by month/year
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DateTimeClusteringStrategy.#ctor(BrightIdeasSoftware.DateTimePortion,System.String)">
      <summary>
            Create a strategy that clusters around the given parts
            </summary>
      <param name="portions">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DateTimeClusteringStrategy.GetClusterKey(System.Object)">
      <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.DateTimeClusteringStrategy.GetClusterDisplayLabel(BrightIdeasSoftware.ICluster)">
      <summary>
            Gets the display label that the given cluster should use
            </summary>
      <param name="cluster">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.DateTimeClusteringStrategy.DateToString(System.DateTime)">
      <summary>
            Convert the given date into a user presentable string
            </summary>
      <param name="dateTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.DateTimeClusteringStrategy.Format">
      <summary>
            Gets or sets the format string will will be used to create a user-presentable
            version of the cluster key.
            </summary>
      <remarks>The format should use the date/time format strings, as documented
            in the Windows SDK. Both standard formats and custom format will work.</remarks>
      <example>"D" - long date pattern</example>
      <example>"MMMM, yyyy" - "January, 1999"</example>
    </member>
    <member name="P:BrightIdeasSoftware.DateTimeClusteringStrategy.Portions">
      <summary>
            Gets or sets the parts of the DateTime that will be extracted when
            determining the clustering key for an object.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FlagClusteringStrategy">
      <summary>
            Instances of this class cluster model objects on the basis of a
            property that holds an xor-ed collection of bit flags.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FlagClusteringStrategy.#ctor(System.Type)">
      <summary>
            Create a clustering strategy that operates on the flags of the given enum
            </summary>
      <param name="enumType">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FlagClusteringStrategy.#ctor(System.Int64[],System.String[])">
      <summary>
            Create a clustering strategy around the given collections of flags and their display labels.
            There must be the same number of elements in both collections.
            </summary>
      <param name="values">The list of flags. </param>
      <param name="labels">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FlagClusteringStrategy.GetClusterKey(System.Object)">
      <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FlagClusteringStrategy.GetClusterDisplayLabel(BrightIdeasSoftware.ICluster)">
      <summary>
            Gets the display label that the given cluster should use
            </summary>
      <param name="cluster">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FlagClusteringStrategy.CreateFilter(System.Collections.IList)">
      <summary>
            Create a filter that will include only model objects that
            match one or more of the given values.
            </summary>
      <param name="valuesChosenForFiltering">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.FlagClusteringStrategy.Values">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FlagClusteringStrategy.Labels">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IModelFilter">
      <summary>
            Interface for model-by-model filtering
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IModelFilter.Filter(System.Object)">
      <summary>
            Should the given model be included when this filter is installed
            </summary>
      <param name="modelObject">The model object to consider</param>
      <returns>Returns true if the model will be included by the filter</returns>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractModelFilter">
      <summary>
            Base class for model-by-model filters
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractModelFilter.Filter(System.Object)">
      <summary>
            Should the given model be included when this filter is installed
            </summary>
      <param name="modelObject">The model object to consider</param>
      <returns>Returns true if the model will be included by the filter</returns>
    </member>
    <member name="T:BrightIdeasSoftware.TextMatchFilter">
      <summary>
            Instances of this class include only those rows of the listview
            that match one or more given strings.
            </summary>
      <remarks>This class can match strings by prefix, regex, or simple containment.
            There are factory methods for each of these matching strategies.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy">
      <summary>
            Base class for the various types of string matching that TextMatchFilter provides
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy.FindAllMatchedRanges(System.String)">
      <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
      <remarks>
        <para>
            This is used by the renderer to decide which bits of
            the string should be highlighted.
            </para>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>A list of character ranges indicating the matched substrings</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy.MatchesText(System.String)">
      <summary>
            Does the given text match the filter
            </summary>
      <remarks>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>Return true if the given cellText matches our strategy</returns>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy.StringComparison">
      <summary>
            Gets how the filter will match text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy.TextFilter">
      <summary>
            Gets the text filter to which this component belongs
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextMatchingStrategy.Text">
      <summary>
            Gets or sets the text that will be matched
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TextMatchFilter.TextContainsMatchingStrategy">
      <summary>
            This component provides text contains matching strategy.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextContainsMatchingStrategy.#ctor(BrightIdeasSoftware.TextMatchFilter,System.String)">
      <summary>
            Create a text contains strategy
            </summary>
      <param name="filter">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextContainsMatchingStrategy.MatchesText(System.String)">
      <summary>
            Does the given text match the filter
            </summary>
      <remarks>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>Return true if the given cellText matches our strategy</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextContainsMatchingStrategy.FindAllMatchedRanges(System.String)">
      <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
      <remarks>
        <para>
            This is used by the renderer to decide which bits of
            the string should be highlighted.
            </para>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>A list of character ranges indicating the matched substrings</returns>
    </member>
    <member name="T:BrightIdeasSoftware.TextMatchFilter.TextBeginsMatchingStrategy">
      <summary>
            This component provides text begins with matching strategy.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextBeginsMatchingStrategy.#ctor(BrightIdeasSoftware.TextMatchFilter,System.String)">
      <summary>
            Create a text begins strategy
            </summary>
      <param name="filter">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextBeginsMatchingStrategy.MatchesText(System.String)">
      <summary>
            Does the given text match the filter
            </summary>
      <remarks>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>Return true if the given cellText matches our strategy</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextBeginsMatchingStrategy.FindAllMatchedRanges(System.String)">
      <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
      <remarks>
        <para>
            This is used by the renderer to decide which bits of
            the string should be highlighted.
            </para>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>A list of character ranges indicating the matched substrings</returns>
    </member>
    <member name="T:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy">
      <summary>
            This component provides regex matching strategy.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.#ctor(BrightIdeasSoftware.TextMatchFilter,System.String)">
      <summary>
            Creates a regex strategy
            </summary>
      <param name="filter">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.MatchesText(System.String)">
      <summary>
            Does the given text match the filter
            </summary>
      <remarks>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>Return true if the given cellText matches our strategy</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.FindAllMatchedRanges(System.String)">
      <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
      <remarks>
        <para>
            This is used by the renderer to decide which bits of
            the string should be highlighted.
            </para>
        <para>this.Text will not be null or empty when this is called.</para>
      </remarks>
      <param name="cellText">The text of the cell we want to search</param>
      <returns>A list of character ranges indicating the matched substrings</returns>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.RegexOptions">
      <summary>
            Gets or sets the options that will be used when compiling the regular expression.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.Regex">
      <summary>
            Gets or sets a compilex regular expression, based on our current Text and RegexOptions.
            </summary>
      <remarks>
            If Text fails to compile as a regular expression, this will return a Regex object
            that will match all strings.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.TextRegexMatchingStrategy.IsRegexInvalid">
      <summary>
            Gets whether or not our current regular expression is a valid regex
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.Regex(BrightIdeasSoftware.ObjectListView,System.String[])">
      <summary>
            Create a text filter that will include rows where any cell matches 
            any of the given regex expressions.
            </summary>
      <param name="olv">
      </param>
      <param name="texts">
      </param>
      <returns>
      </returns>
      <remarks>Any string that is not a valid regex expression will be ignored.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.Prefix(BrightIdeasSoftware.ObjectListView,System.String[])">
      <summary>
            Create a text filter that includes rows where any cell begins with one of the given strings
            </summary>
      <param name="olv">
      </param>
      <param name="texts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.Contains(BrightIdeasSoftware.ObjectListView,System.String[])">
      <summary>
            Create a text filter that includes rows where any cell contains any of the given strings.
            </summary>
      <param name="olv">
      </param>
      <param name="texts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create a TextFilter
            </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.#ctor(BrightIdeasSoftware.ObjectListView,System.String)">
      <summary>
            Create a TextFilter that finds the given string
            </summary>
      <param name="olv">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.#ctor(BrightIdeasSoftware.ObjectListView,System.String,System.StringComparison)">
      <summary>
            Create a TextFilter that finds the given string using the given comparison
            </summary>
      <param name="olv">
      </param>
      <param name="text">
      </param>
      <param name="comparison">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.IterateColumns">
      <summary>
            Loop over the columns that are being considering by the filter
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.Filter(System.Object)">
      <summary>
            Do the actual work of filtering
            </summary>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.FindAllMatchedRanges(System.String)">
      <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
      <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
      <param name="cellText">
      </param>
      <returns>A list of character ranges indicating the matched substrings</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextMatchFilter.IsIncluded(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Is the given column one of the columns being used by this filter?
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.Columns">
      <summary>
            Gets or sets which columns will be used for the comparisons? If this is null, all columns will be used
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.AdditionalColumns">
      <summary>
            Gets or sets additional columns which will be used in the comparison. These will be used
            in addition to either the Columns property or to all columns taken from the control.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.ContainsStrings">
      <summary>
            Gets or sets the collection of strings that will be used for 
            contains matching. Setting this replaces all previous texts
            of any kind.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.HasComponents">
      <summary>
            Gets whether or not this filter has any search criteria
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.ListView">
      <summary>
            Gets or set the ObjectListView upon which this filter will work
            </summary>
      <remarks>
            You cannot really rebase a filter after it is created, so do not change this value.
            It is included so that it can be set in an object initializer.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.PrefixStrings">
      <summary>
            Gets or sets the collection of strings that will be used for 
            prefix matching. Setting this replaces all previous texts
            of any kind.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.RegexOptions">
      <summary>
            Gets or sets the options that will be used when compiling the regular expression.
            </summary>
      <remarks>
            This is only used when doing Regex matching (obviously).
            If this is not set specifically, the appropriate options are chosen to match the
            StringComparison setting (culture invariant, case sensitive).
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.RegexStrings">
      <summary>
            Gets or sets the collection of strings that will be used for 
            regex pattern matching. Setting this replaces all previous texts
            of any kind.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextMatchFilter.StringComparison">
      <summary>
            Gets or  sets how the filter will match text
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AspectGetterDelegate">
      <summary>
            These delegates are used to extract an aspect from a row object
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AspectPutterDelegate">
      <summary>
            These delegates are used to put a changed value back into a model object
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AspectToStringConverterDelegate">
      <summary>
            These delegates can be used to convert an aspect value to a display string,
            instead of using the default ToString()
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellToolTipGetterDelegate">
      <summary>
            These delegates are used to get the tooltip for a cell
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CheckStateGetterDelegate">
      <summary>
            These delegates are used to the state of the checkbox for a row object.
            </summary>
      <remarks>
        <para>
            For reasons known only to someone in Microsoft, we can only set
            a boolean on the ListViewItem to indicate it's "checked-ness", but when
            we receive update events, we have to use a tristate CheckState. So we can
            be told about an indeterminate state, but we can't set it ourselves.
            </para>
        <para>As of version 2.0, we can now return indeterminate state.</para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.BooleanCheckStateGetterDelegate">
      <summary>
            These delegates are used to get the state of the checkbox for a row object.
            </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.CheckStatePutterDelegate">
      <summary>
            These delegates are used to put a changed check state back into a model object
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BooleanCheckStatePutterDelegate">
      <summary>
            These delegates are used to put a changed check state back into a model object
            </summary>
      <param name="rowObject">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.ColumnRightClickEventHandler">
      <summary>
            The callbacks for RightColumnClick events
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HeaderDrawingDelegate">
      <summary>
            This delegate will be used to own draw header column.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupFormatterDelegate">
      <summary>
            This delegate is called when a group has been created but not yet made
            into a real ListViewGroup. The user can take this opportunity to fill
            in lots of other details about the group.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupKeyGetterDelegate">
      <summary>
            These delegates are used to retrieve the object that is the key of the group to which the given row belongs.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupKeyToTitleConverterDelegate">
      <summary>
            These delegates are used to convert a group key into a title for the group
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HeaderToolTipGetterDelegate">
      <summary>
            These delegates are used to get the tooltip for a column header
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ImageGetterDelegate">
      <summary>
            These delegates are used to fetch the image selector that should be used
            to choose an image for this column.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.RenderDelegate">
      <summary>
            These delegates are used to draw a cell
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.RowGetterDelegate">
      <summary>
            These delegates are used to fetch a row object for virtual lists
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.RowFormatterDelegate">
      <summary>
            These delegates are used to format a listviewitem before it is added to the control.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.SortDelegate">
      <summary>
            These delegates are used to sort the listview in some custom fashion
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupingParameters">
      <summary>
            This class contains all the settings used when groups are created
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GroupingParameters.#ctor(BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,System.String,System.String,System.Boolean)">
      <summary>
            Create a GroupingParameters
            </summary>
      <param name="olv">
      </param>
      <param name="groupByColumn">
      </param>
      <param name="groupByOrder">
      </param>
      <param name="column">
      </param>
      <param name="order">
      </param>
      <param name="secondaryColumn">
      </param>
      <param name="secondaryOrder">
      </param>
      <param name="titleFormat">
      </param>
      <param name="titleSingularFormat">
      </param>
      <param name="sortItemsByPrimaryColumn">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.ListView">
      <summary>
            Gets or sets the ObjectListView being grouped
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.GroupByColumn">
      <summary>
            Gets or sets the column used to create groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.GroupByOrder">
      <summary>
            In what order will the groups themselves be sorted?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.GroupComparer">
      <summary>
            If this is set, this comparer will be used to order the groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.ItemComparer">
      <summary>
            If this is set, this comparer will be used to order items within each group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.PrimarySort">
      <summary>
            Gets or sets the column that will be the primary sort
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.PrimarySortOrder">
      <summary>
            Gets or sets the ordering for the primary sort
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.SecondarySort">
      <summary>
            Gets or sets the column used for secondary sorting
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.SecondarySortOrder">
      <summary>
            Gets or sets the ordering for the secondary sort
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.TitleFormat">
      <summary>
            Gets or sets the title format used for groups with zero or more than one element
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.TitleSingularFormat">
      <summary>
            Gets or sets the title format used for groups with only one element
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupingParameters.SortItemsByPrimaryColumn">
      <summary>
            Gets or sets whether the items should be sorted by the primary column
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.NullableDictionary`2">
      <summary>
            A simple-minded implementation of a Dictionary that can handle null as a key.
            </summary>
      <typeparam name="TKey">The type of the dictionary key</typeparam>
      <typeparam name="TValue">The type of the values to be stored</typeparam>
      <remarks>This is not a full implementation and is only meant to handle
            collecting groups by their keys, since groups can have null as a key value.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.OLVListItem">
      <summary>
            OLVListItems are specialized ListViewItems that know which row object they came from,
            and the row index at which they are displayed, even when in group view mode. They
            also know the image they should draw against themselves
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListItem.#ctor(System.Object)">
      <summary>
            Create a OLVListItem for the given row object
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListItem.#ctor(System.Object,System.String,System.Object)">
      <summary>
            Create a OLVListItem for the given row object, represented by the given string and image
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListItem.GetSubItem(System.Int32)">
      <summary>
            Return the sub item at the given index
            </summary>
      <param name="index">Index of the subitem to be returned</param>
      <returns>An OLVListSubItem</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListItem.GetSubItemBounds(System.Int32)">
      <summary>
            Return bounds of the given subitem
            </summary>
      <remarks>This correctly calculates the bounds even for column 0.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.Bounds">
      <summary>
            Gets the bounding rectangle of the item, including all subitems
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.CellPadding">
      <summary>
            Gets or sets how many pixels will be left blank around each cell of this item
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.CellVerticalAlignment">
      <summary>
            Gets or sets how the cells of this item will be vertically aligned
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.Checked">
      <summary>
            Gets or sets the checkedness of this item.
            </summary>
      <remarks>
            Virtual lists don't handle checkboxes well, so we have to intercept attempts to change them
            through the items, and change them into something that will work.
            Unfortuneately, this won't work if this property is set through the base class, since
            the property is not declared as virtual.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.CheckState">
      <summary>
            Enable tri-state checkbox.
            </summary>
      <remarks>.NET's Checked property was not built to handle tri-state checkboxes,
            and will return True for both Checked and Indeterminate states.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.HasDecoration">
      <summary>
            Gets if this item has any decorations set for it.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.Decoration">
      <summary>
            Gets or sets the decoration that will be drawn over this item
            </summary>
      <remarks>Setting this replaces all other decorations</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.Decorations">
      <summary>
            Gets the collection of decorations that will be drawn over this item
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.ImageSelector">
      <summary>
            Get or set the image that should be shown against this item
            </summary>
      <remarks>
        <para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListItem.RowObject">
      <summary>
            Gets or sets the the model object that is source of the data for this list item.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVListSubItem">
      <summary>
            A ListViewSubItem that knows which image should be drawn against it.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.OLVListSubItem.AnimationState">
      <summary>
            Return the state of the animatation of the image on this subitem.
            Null means there is either no image, or it is not an animation
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListSubItem.#ctor">
      <summary>
            Create a OLVListSubItem
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVListSubItem.#ctor(System.Object,System.String,System.Object)">
      <summary>
            Create a OLVListSubItem that shows the given string and image
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.CellPadding">
      <summary>
            Gets or sets how many pixels will be left blank around this cell
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.CellVerticalAlignment">
      <summary>
            Gets or sets how this cell will be vertically aligned
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.ModelValue">
      <summary>
            Gets or sets the model value is being displayed by this subitem.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.HasDecoration">
      <summary>
            Gets if this subitem has any decorations set for it.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.Decoration">
      <summary>
            Gets or sets the decoration that will be drawn over this item
            </summary>
      <remarks>Setting this replaces all other decorations</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.Decorations">
      <summary>
            Gets the collection of decorations that will be drawn over this item
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.ImageSelector">
      <summary>
            Get or set the image that should be shown against this item
            </summary>
      <remarks>
        <para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVListSubItem.Url">
      <summary>
            Gets or sets the url that should be invoked when this subitem is clicked
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HitTestLocation">
      <summary>
            An indication of where a hit was within ObjectListView cell
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.Nothing">
      <summary>
            Nowhere
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.Text">
      <summary>
            On the text
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.Image">
      <summary>
            On the image
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.CheckBox">
      <summary>
            On the checkbox
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.ExpandButton">
      <summary>
            On the expand button (TreeListView)
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.InCell">
      <summary>
            in the cell but not in any more specific location
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.UserDefined">
      <summary>
            UserDefined location1 (used for custom renderers)
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.GroupExpander">
      <summary>
            On the expand/collapse widget of the group
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocation.Group">
      <summary>
            Somewhere on a group
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HitTestLocationEx">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_NOWHERE">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_ONITEMICON">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_ONITEMLABEL">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_ONITEMSTATEICON">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_ONITEM">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_ABOVE">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_BELOW">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_TORIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_TOLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_HEADER">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_FOOTER">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_COLLAPSE">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_BACKGROUND">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_STATEICON">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_SUBSETLINK">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_GROUP_MINUS_FOOTER_AND_BKGRD">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_ONCONTENTS">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.HitTestLocationEx.LVHT_EX_FOOTER">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OlvListViewHitTestInfo">
      <summary>
            Instances of this class encapsulate the information gathered during a OlvHitTest()
            operation.
            </summary>
      <remarks>Custom renderers can use HitTestLocation.UserDefined and the UserData
            object to store more specific locations for use during event handlers.</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.OlvListViewHitTestInfo.HitTestLocation">
      <summary>
            Where is the hit location?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.OlvListViewHitTestInfo.HitTestLocationEx">
      <summary>
            Where is the hit location?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.OlvListViewHitTestInfo.Group">
      <summary>
            Which group was hit?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.OlvListViewHitTestInfo.UserData">
      <summary>
            Custom renderers can use this information to supply more details about the hit location
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OlvListViewHitTestInfo.#ctor(BrightIdeasSoftware.OLVListItem,BrightIdeasSoftware.OLVListSubItem,System.Int32,BrightIdeasSoftware.OLVGroup)">
      <summary>
            Create a OlvListViewHitTestInfo
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OlvListViewHitTestInfo.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.Item">
      <summary>
            Gets the item that was hit
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.SubItem">
      <summary>
            Gets the subitem that was hit
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.Location">
      <summary>
            Gets the part of the subitem that was hit
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.ListView">
      <summary>
            Gets the ObjectListView that was tested
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.RowObject">
      <summary>
            Gets the model object that was hit
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.RowIndex">
      <summary>
            Gets the index of the row under the hit point or -1
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.ColumnIndex">
      <summary>
            Gets the index of the column under the hit point
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvListViewHitTestInfo.Column">
      <summary>
            Gets the column that was hit
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.DataSourceAdapter">
      <summary>
            A helper class that translates DataSource events for an ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Make a DataSourceAdapter
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.Finalize">
      <summary>
            Finalize this object
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.Dispose">
      <summary>
            Release all the resources used by this instance
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.Dispose(System.Boolean)">
      <summary>
            Release all the resources used by this instance
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.BindListView(BrightIdeasSoftware.ObjectListView)">
      <summary>
      </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.UnbindListView(BrightIdeasSoftware.ObjectListView)">
      <summary>
      </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.BindDataSource">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.UnbindDataSource">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.RebindDataSource">
      <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.RebindDataSource(System.Boolean)">
      <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.InitializeDataSource">
      <summary>
            The data source for this control has changed. Reconfigure the control for the new source
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.SetListContents">
      <summary>
            Take the contents of the currently bound list and put them into the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.CreateColumnsFromSource">
      <summary>
            Create columns for the listview based on what properties are available in the data source
            </summary>
      <remarks>
        <para>This method will create columns if there is not already a column displaying that property.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.ShouldCreateColumn(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Decide if a new column should be added to the control to display
            the given property
            </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.ConfigureColumn(BrightIdeasSoftware.OLVColumn,System.ComponentModel.PropertyDescriptor)">
      <summary>
            Configure the given column to show the given property.
            The title and aspect name of the column are already filled in.
            </summary>
      <param name="column">
      </param>
      <param name="property">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.CreateMissingAspectGettersAndPutters">
      <summary>
            Generate aspect getters and putters for any columns that are missing them (and for which we have
            enough information to actually generate a getter)
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.CurrencyManagerListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>
            CurrencyManager ListChanged event handler.
            Deals with fine-grained changes to list items.
            </summary>
      <remarks>
            It's actually difficult to deal with these changes in a fine-grained manner.
            If our listview is grouped, then any change may make a new group appear or
            an old group disappear. It is rarely enough to simply update the affected row.
            </remarks>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedMetadataChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle PropertyDescriptor* events
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedItemMoved(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle ItemMoved event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedItemDeleted(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle the ItemDeleted event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedItemAdded(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle an ItemAdded event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedReset(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle the Reset event
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListChangedItemChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Handle ItemChanged event. This is triggered when a single item
            has changed, so just refresh that one item.
            </summary>
      <param name="e">
      </param>
      <remarks>Even in this simple case, we should probably rebuild the list.
            For example, the change could put the item into its own new group.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleCurrencyManagerMetaDataChanged(System.Object,System.EventArgs)">
      <summary>
            The CurrencyManager calls this if the data source looks
            different. We just reload everything.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <remarks>
            CHECK: Do we need this if we are handle ListChanged metadata events?
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleCurrencyManagerPositionChanged(System.Object,System.EventArgs)">
      <summary>
            Called by the CurrencyManager when the currently selected item
            changes. We update the ListView selection so that we stay in sync
            with any other controls bound to the same source.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.ChangePosition(System.Int32)">
      <summary>
            Change the control's position (which is it's currently selected row)
            to the n'th row in the dataset
            </summary>
      <param name="index">The index of the row to be selected</param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListViewSelectedIndexChanged(System.Object,System.EventArgs)">
      <summary>
            Handle the selection changing in our ListView.
            We need to tell our currency manager about the new position.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListViewFreezing(System.Object,BrightIdeasSoftware.FreezeEventArgs)">
      <summary>
            Handle the frozenness of our ListView changing. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DataSourceAdapter.HandleListViewBindingContextChanged(System.Object,System.EventArgs)">
      <summary>
            Handle a change to the BindingContext of our ListView.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.DataSourceAdapter.AutoGenerateColumns">
      <summary>
            Gets or sets whether or not columns will be automatically generated to show the
            columns when the DataSource is set. 
            </summary>
      <remarks>This must be set before the DataSource is set. It has no effect afterwards.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataSourceAdapter.DataSource">
      <summary>
            Get or set the DataSource that will be displayed in this list view.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DataSourceAdapter.DataMember">
      <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
      <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataSourceAdapter.ListView">
      <summary>
            Gets the ObjectListView upon which this adaptor will operate
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DataSourceAdapter.CurrencyManager">
      <summary>
            Gets or sets the currency manager which is handling our binding context
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeDataSourceAdapter">
      <summary>
            A TreeDataSourceAdapter knows how to build a tree structure from a binding list.
            </summary>
      <remarks>To build a tree</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.#ctor(BrightIdeasSoftware.DataTreeListView)">
      <summary>
            Create a data source adaptor that knows how to build a tree structure
            </summary>
      <param name="tlv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.InitializeDataSource">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.SetListContents">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.ShouldCreateColumn(System.ComponentModel.PropertyDescriptor)">
      <summary>
      </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.HandleListChangedItemChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TreeDataSourceAdapter.ChangePosition(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeDataSourceAdapter.KeyAspectName">
      <summary>
            Gets or sets the name of the property/column that uniquely identifies each row.
            </summary>
      <remarks>
        <para>
            The value contained by this column must be unique across all rows 
            in the data source. Odd and unpredictable things will happen if two
            rows have the same id.
            </para>
        <para>Null cannot be a valid key value.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeDataSourceAdapter.ParentKeyAspectName">
      <summary>
            Gets or sets the name of the property/column that contains the key of
            the parent of a row.
            </summary>
      <remarks>
        <para>
            The test condition for deciding if one row is the parent of another is functionally
            equivilent to this:
            <code>
            Object.Equals(candidateParentRow[this.KeyAspectName], row[this.ParentKeyAspectName])
            </code></para>
        <para>Unlike key value, parent keys can be null but a null parent key can only be used
            to identify root objects.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeDataSourceAdapter.RootKeyValue">
      <summary>
            Gets or sets the value that identifies a row as a root object.
            When the ParentKey of a row equals the RootKeyValue, that row will
            be treated as root of the TreeListView.
            </summary>
      <remarks>
        <para>
            The test condition for deciding a root object is functionally
            equivilent to this:
            <code>
            Object.Equals(candidateRow[this.ParentKeyAspectName], this.RootKeyValue)
            </code></para>
        <para>The RootKeyValue can be null.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeDataSourceAdapter.ShowKeyColumns">
      <summary>
            Gets or sets whether or not the key columns (id and parent id) should
            be shown to the user.
            </summary>
      <remarks>This must be set before the DataSource is set. It has no effect
            afterwards.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TreeDataSourceAdapter.TreeListView">
      <summary>
            Gets the DataTreeListView that is being managed 
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVColumn">
      <summary>
            An OLVColumn knows which aspect of an object it should present.
            </summary>
      <remarks>
            The column knows how to:
            <list type="bullet"><item><description>extract its aspect from the row object</description></item><item><description>convert an aspect to a string</description></item><item><description>calculate the image for the row object</description></item><item><description>extract a group "key" from the row object</description></item><item><description>convert a group "key" into a title for the group</description></item></list><para>For sorting to work correctly, aspects from the same column
            must be of the same type, that is, the same aspect cannot sometimes
            return strings and other times integers.</para></remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.#ctor">
      <summary>
            Create an OLVColumn
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.#ctor(System.String,System.String)">
      <summary>
            Initialize a column to have the given title, and show the given aspect
            </summary>
      <param name="title">The title of the column</param>
      <param name="aspect">The aspect to be shown in the column</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.ConvertGroupKeyToTitle(System.Object)">
      <summary>
            For a given group value, return the string that should be used as the groups title.
            </summary>
      <param name="value">The group key that is being converted to a title</param>
      <returns>string</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetCheckState(System.Object)">
      <summary>
            Get the checkedness of the given object for this column
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <returns>The checkedness of the object</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Put the checkedness of the given object for this column
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <param name="newState">
      </param>
      <returns>The checkedness of the object</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetAspectByName(System.Object)">
      <summary>
            For a given row object, extract the value indicated by the AspectName property of this column.
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <returns>An object, which is the aspect named by AspectName</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetGroupKey(System.Object)">
      <summary>
            For a given row object, return the object that is the key of the group that this row belongs to.
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <returns>Group key object</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetImage(System.Object)">
      <summary>
            For a given row object, return the image selector of the image that should displayed in this column.
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <returns>int or string or Image. int or string will be used as index into image list. null or -1 means no image</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetCheckStateImage(System.Object)">
      <summary>
            Return the image that represents the check box for the given model
            </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetStringValue(System.Object)">
      <summary>
            For a given row object, return the string representation of the value shown in this column.
            </summary>
      <remarks>
            For aspects that are string (e.g. aPerson.Name), the aspect and its string representation are the same.
            For non-strings (e.g. aPerson.DateOfBirth), the string representation is very different.
            </remarks>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.GetValue(System.Object)">
      <summary>
            For a given row object, return the object that is to be displayed in this column.
            </summary>
      <param name="rowObject">The row object that is being displayed</param>
      <returns>An object, which is the aspect to be displayed</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.PutAspectByName(System.Object,System.Object)">
      <summary>
            Update the given model object with the given value using the column's
            AspectName.
            </summary>
      <param name="rowObject">The model object to be updated</param>
      <param name="newValue">The value to be put into the model</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.PutValue(System.Object,System.Object)">
      <summary>
            Update the given model object with the given value
            </summary>
      <param name="rowObject">The model object to be updated</param>
      <param name="newValue">The value to be put into the model</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.ValueToString(System.Object)">
      <summary>
            Convert the aspect object to its string representation.
            </summary>
      <remarks>
            If the column has been given a AspectToStringConverter, that will be used to do
            the conversion, otherwise just use ToString(). 
            The returned value will not be null. Nulls are always converted
            to empty strings.
            </remarks>
      <param name="value">The value of the aspect that should be displayed</param>
      <returns>A string representation of the aspect</returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.DecideDefaultClusteringStrategy">
      <summary>
            Decide the clustering strategy that will be used for this column
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeGroupies(System.Object[],System.String[])">
      <summary>
            Create groupies
            This is an untyped version to help with Generator and OLVColumn attributes
            </summary>
      <param name="values">
      </param>
      <param name="descriptions">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeGroupies``1(``0[],System.String[])">
      <summary>
            Create groupies
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="values">
      </param>
      <param name="descriptions">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[])">
      <summary>
            Create groupies
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="values">
      </param>
      <param name="descriptions">
      </param>
      <param name="images">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[],System.String[])">
      <summary>
            Create groupies
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="values">
      </param>
      <param name="descriptions">
      </param>
      <param name="images">
      </param>
      <param name="subtitles">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[],System.String[],System.String[])">
      <summary>
            Create groupies.
            Install delegates that will group the columns aspects into progressive partitions.
            If an aspect is less than value[n], it will be grouped with description[n].
            If an aspect has a value greater than the last element in "values", it will be grouped
            with the last element in "descriptions".
            </summary>
      <param name="values">Array of values. Values must be able to be
            compared to the aspect (using IComparable)</param>
      <param name="descriptions">The description for the matching value. The last element is the default description.
            If there are n values, there must be n+1 descriptions.</param>
      <example>
            this.salaryColumn.MakeGroupies(
                new UInt32[] { 20000, 100000 },
                new string[] { "Lowly worker",  "Middle management", "Rarified elevation"});
            </example>
      <typeparam name="T">
      </typeparam>
      <param name="images">
      </param>
      <param name="subtitles">
      </param>
      <param name="tasks">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumn.MakeEqualGroupies``1(``0[],System.String[],System.Object[],System.String[],System.String[])">
      <summary>
            Create groupies based on exact value matches.
            </summary>
      <remarks>
            Install delegates that will group rows into partitions based on equality of this columns aspects.
            If an aspect is equal to value[n], it will be grouped with description[n].
            If an aspect is not equal to any value, it will be grouped with "[other]".
            </remarks>
      <param name="values">Array of values. Values must be able to be
            equated to the aspect</param>
      <param name="descriptions">The description for the matching value.</param>
      <example>
            this.marriedColumn.MakeEqualGroupies(
                new MaritalStatus[] { MaritalStatus.Single, MaritalStatus.Married, MaritalStatus.Divorced, MaritalStatus.Partnered },
                new string[] { "Looking",  "Content", "Looking again", "Mostly content" });
            </example>
      <typeparam name="T">
      </typeparam>
      <param name="images">
      </param>
      <param name="subtitles">
      </param>
      <param name="tasks">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectGetter">
      <summary>
            This delegate will be used to extract a value to be displayed in this column.
            </summary>
      <remarks>
            If this is set, AspectName is ignored.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectGetterAutoGenerated">
      <summary>
            Remember if this aspect getter for this column was generated internally, and can therefore
            be regenerated at will
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectName">
      <summary>
            The name of the property or method that should be called to get the value to display in this column.
            This is only used if a ValueGetterDelegate has not been given.
            </summary>
      <remarks>This name can be dotted to chain references to properties or parameter-less methods.</remarks>
      <example>"DateOfBirth"</example>
      <example>"Owner.HomeAddress.Postcode"</example>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectPutter">
      <summary>
            This delegate will be used to put an edited value back into the model object.
            </summary>
      <remarks>
            This does nothing if IsEditable == false.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectToStringConverter">
      <summary>
            The delegate that will be used to translate the aspect to display in this column into a string.
            </summary>
      <remarks>If this value is set, AspectToStringFormat will be ignored.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AspectToStringFormat">
      <summary>
            This format string will be used to convert an aspect to its string representation.
            </summary>
      <remarks>
            This string is passed as the first parameter to the String.Format() method.
            This is only used if AspectToStringConverter has not been set.</remarks>
      <example>"{0:C}" to convert a number to currency</example>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AutoCompleteEditor">
      <summary>
            Gets or sets whether the cell editor should use AutoComplete
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.AutoCompleteEditorMode">
      <summary>
            Gets or sets whether the cell editor should use AutoComplete
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.CanBeHidden">
      <summary>
            Gets whether this column can be hidden by user actions
            </summary>
      <remarks>This take into account both the Hideable property and whether this column
            is the primary column of the listview (column 0).</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.CellPadding">
      <summary>
            Gets or sets how many pixels will be left blank around this cells in this column
            </summary>
      <remarks>This setting only takes effect when the control is owner drawn.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.CellVerticalAlignment">
      <summary>
            Gets or sets how cells in this column will be vertically aligned.
            </summary>
      <remarks>
        <para>
            This setting only takes effect when the control is owner drawn.
            </para>
        <para>
            If this is not set, the value from the control itself will be used.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.CheckBoxes">
      <summary>
            Gets or sets whether this column will show a checkbox.
            </summary>
      <remarks>
            Setting this on column 0 has no effect. Column 0 check box is controlled
            by the CheckBoxes property on the ObjectListView itself.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ClusteringStrategy">
      <summary>
            Gets or sets the clustering strategy used for this column. 
            </summary>
      <remarks>
        <para>
            The clustering strategy is used to build a Filtering menu for this item. 
            If this is null, a useful default will be chosen. 
            </para>
        <para>
            To disable filtering on this colummn, set UseFiltering to false.
            </para>
        <para>
            Cluster strategies belong to a particular column. The same instance
            cannot be shared between multiple columns.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.FillsFreeSpace">
      <summary>
            Should this column resize to fill the free space in the listview?
            </summary>
      <remarks>
        <para>
            If you want two (or more) columns to equally share the available free space, set this property to True.
            If you want this column to have a larger or smaller share of the free space, you must
            set the FreeSpaceProportion property explicitly.
            </para>
        <para>
            Space filling columns are still governed by the MinimumWidth and MaximumWidth properties.
            </para>
            /// </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.FreeSpaceProportion">
      <summary>
            What proportion of the unoccupied horizontal space in the control should be given to this column?
            </summary>
      <remarks>
        <para>
            There are situations where it would be nice if a column (normally the rightmost one) would expand as
            the list view expands, so that as much of the column was visible as possible without having to scroll
            horizontally (you should never, ever make your users have to scroll anything horizontally!).
            </para>
        <para>
            A space filling column is resized to occupy a proportion of the unoccupied width of the listview (the
            unoccupied width is the width left over once all the the non-filling columns have been given their space).
            This property indicates the relative proportion of that unoccupied space that will be given to this column.
            The actual value of this property is not important -- only its value relative to the value in other columns.
            For example:
            <list type="bullet"><item><description>
            If there is only one space filling column, it will be given all the free space, regardless of the value in FreeSpaceProportion.
            </description></item><item><description>
            If there are two or more space filling columns and they all have the same value for FreeSpaceProportion,
            they will share the free space equally.
            </description></item><item><description>
            If there are three space filling columns with values of 3, 2, and 1
            for FreeSpaceProportion, then the first column with occupy half the free space, the second will
            occupy one-third of the free space, and the third column one-sixth of the free space.
            </description></item></list></para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Groupable">
      <summary>
            Gets or sets whether groups will be rebuild on this columns values when this column's header is clicked.
            </summary>
      <remarks>
        <para>This setting is only used when ShowGroups is true.</para>
        <para>
            If this is false, clicking the header will not rebuild groups. It will not provide
            any feedback as to why the list is not being regrouped. It is the programmers responsibility to
            provide appropriate feedback.
            </para>
        <para>When this is false, BeforeCreatingGroups events are still fired, which can be used to allow grouping
            or give feedback, on a case by case basis.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupFormatter">
      <summary>
            This delegate is called when a group has been created but not yet made
            into a real ListViewGroup. The user can take this opportunity to fill
            in lots of other details about the group.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupKeyGetter">
      <summary>
            This delegate is called to get the object that is the key for the group
            to which the given row belongs.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupKeyToTitleConverter">
      <summary>
            This delegate is called to convert a group key into a title for that group.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupWithItemCountFormat">
      <summary>
            When the listview is grouped by this column and group title has an item count,
            how should the lable be formatted?
            </summary>
      <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet"><item><description>{0} - the original group title</description></item><item><description>{1} - the number of items in the group</description></item></list></remarks>
      <example>"{0} [{1} items]"</example>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupWithItemCountFormatOrDefault">
      <summary>
            Gets this.GroupWithItemCountFormat or a reasonable default
            </summary>
      <remarks>
            If GroupWithItemCountFormat is not set, its value will be taken from the ObjectListView if possible.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupWithItemCountSingularFormat">
      <summary>
            When the listview is grouped by this column and a group title has an item count,
            how should the lable be formatted if there is only one item in the group?
            </summary>
      <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet"><item><description>{0} - the original group title</description></item><item><description>{1} - the number of items in the group (always 1)</description></item></list></remarks>
      <example>"{0} [{1} item]"</example>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.GroupWithItemCountSingularFormatOrDefault">
      <summary>
            Get this.GroupWithItemCountSingularFormat or a reasonable default
            </summary>
      <remarks>
        <para>If this value is not set, the values from the list view will be used</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HasFilterIndicator">
      <summary>
            Gets whether this column should be drawn with a filter indicator in the column header.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderDrawing">
      <summary>
            Gets or sets a delegate that will be used to own draw header column.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderFormatStyle">
      <summary>
            Gets or sets the style that will be used to draw the header for this column
            </summary>
      <remarks>This is only uses when the owning ObjectListView has HeaderUsesThemes set to false.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderFont">
      <summary>
            Gets or sets the font in which the header for this column will be drawn
            </summary>
      <remarks>This property will be made obsolete in v2.5. Use HeaderFormatStyle instead</remarks>
      <remarks>This is only uses when HeaderUsesThemes is false.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderForeColor">
      <summary>
            Gets or sets the color in which the text of the header for this column will be drawn
            </summary>
      <remarks>This property will be made obsolete in v2.5. Use HeaderFormatStyle instead</remarks>
      <remarks>This is only uses when HeaderUsesThemes is false.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderImageKey">
      <summary>
            Gets or sets whether the text values in this column will act like hyperlinks
            </summary>
      <remarks>This is only taken into account when HeaderUsesThemes is false.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderTextAlign">
      <summary>
            Gets or sets how the text of the header will be drawn?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HeaderTextAlignAsStringAlignment">
      <summary>
            Gets the header alignment converted to a StringAlignment
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.HasHeaderImage">
      <summary>
            Gets whether or not this column has an image in the header
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Hideable">
      <summary>
            Gets or sets whether this column can be hidden by the user.
            </summary>
      <remarks>
        <para>Column 0 can never be hidden, regardless of this setting.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Hyperlink">
      <summary>
            Gets or sets whether the text values in this column will act like hyperlinks
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ImageAspectName">
      <summary>
            This is the name of property that will be invoked to get the image selector of the
            image that should be shown in this column.
            It can return an int, string, Image or null.
            </summary>
      <remarks>
        <para>This is ignored if ImageGetter is not null.</para>
        <para>The property can use these return value to identify the image:</para>
        <list type="bullet">
          <item>
            <description>null or -1 -- indicates no image</description>
          </item>
          <item>
            <description>an int -- the int value will be used as an index into the image list</description>
          </item>
          <item>
            <description>a String -- the string value will be used as a key into the image list</description>
          </item>
          <item>
            <description>an Image -- the Image will be drawn directly (only in OwnerDrawn mode)</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ImageGetter">
      <summary>
            This delegate is called to get the image selector of the image that should be shown in this column.
            It can return an int, string, Image or null.
            </summary>
      <remarks>
        <para>This delegate can use these return value to identify the image:</para>
        <list type="bullet">
          <item>
            <description>null or -1 -- indicates no image</description>
          </item>
          <item>
            <description>an int -- the int value will be used as an index into the image list</description>
          </item>
          <item>
            <description>a String -- the string value will be used as a key into the image list</description>
          </item>
          <item>
            <description>an Image -- the Image will be drawn directly (only in OwnerDrawn mode)</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.IsEditable">
      <summary>
            Can the values shown in this column be edited?
            </summary>
      <remarks>This defaults to true, since the primary means to control the editability of a listview
            is on the listview itself. Once a listview is editable, all the columns are too, unless the
            programmer explicitly marks them as not editable</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.IsFixedWidth">
      <summary>
            Is this column a fixed width column?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.IsTileViewColumn">
      <summary>
            Get/set whether this column should be used when the view is switched to tile view.
            </summary>
      <remarks>Column 0 is always included in tileview regardless of this setting.
            Tile views do not work well with many "columns" of information. 
            Two or three works best.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.IsHeaderVertical">
      <summary>
            Gets or sets whether the text of this header should be
            rendered vertically.
            </summary>
      <remarks>
        <para>If this is true, it is a good idea to set ToolTipText to the name of the column so it's easy to read.</para>
        <para>Currently (2010-08), vertical headers are text only. They do not draw their image.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.IsVisible">
      <summary>
            Can this column be seen by the user?
            </summary>
      <remarks>After changing this value, you must call RebuildColumns() before the changes will be effected.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.LastDisplayIndex">
      <summary>
            Where was this column last positioned within the Detail view columns
            </summary>
      <remarks>DisplayIndex is volatile. Once a column is removed from the control,
            there is no way to discover where it was in the display order. This property
            guards that information even when the column is not in the listview's active columns.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.MaximumWidth">
      <summary>
            What is the maximum width that the user can give to this column?
            </summary>
      <remarks>-1 means there is no maximum width. Give this the same value as MinimumWidth to make a fixed width column.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.MinimumWidth">
      <summary>
            What is the minimum width that the user can give to this column?
            </summary>
      <remarks>-1 means there is no minimum width. Give this the same value as MaximumWidth to make a fixed width column.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Renderer">
      <summary>
            Get/set the renderer that will be invoked when a cell needs to be redrawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.RendererDelegate">
      <summary>
            This delegate is called when a cell needs to be drawn in OwnerDrawn mode.
            </summary>
      <remarks>This method is kept primarily for backwards compatibility.
            New code should implement an IRenderer, though this property will be maintained.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Searchable">
      <summary>
            Gets or sets whether the text in this column's cell will be used when doing text searching.
            </summary>
      <remarks>
        <para>
            If this is false, text filters will not trying searching this columns cells when looking for matches.
            </para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ShowTextInHeader">
      <summary>
            Gets or sets whether the header for this column will include the column's Text.
            </summary>
      <remarks>
        <para>
            If this is false, the only thing rendered in the column header will be the image from <see cref="P:BrightIdeasSoftware.OLVColumn.HeaderImageKey" />.
            </para>
        <para>This setting is only considered when <see cref="P:BrightIdeasSoftware.ObjectListView.HeaderUsesThemes" /> is false on the owning ObjectListView.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Sortable">
      <summary>
            Gets or sets whether the contents of the list will be resorted when the user clicks the 
            header of this column.
            </summary>
      <remarks>
        <para>
            If this is false, clicking the header will not sort the list, but will not provide
            any feedback as to why the list is not being sorted. It is the programmers responsibility to
            provide appropriate feedback.
            </para>
        <para>When this is false, BeforeSorting events are still fired, which can be used to allow sorting
            or give feedback, on a case by case basis.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.TextAlign">
      <summary>
            Gets or sets the horizontal alignment of the contents of the column.
            </summary>
      <remarks>.NET will not allow column 0 to have any alignment except
            to the left. We can't change the basic behaviour of the listview,
            but when owner drawn, column 0 can now have other alignments.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.TextStringAlign">
      <summary>
            Gets the StringAlignment equivilent of the column text alignment
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ToolTipText">
      <summary>
            What string should be displayed when the mouse is hovered over the header of this column?
            </summary>
      <remarks>If a HeaderToolTipGetter is installed on the owning ObjectListView, this
            value will be ignored.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.TriStateCheckBoxes">
      <summary>
            Should this column have a tri-state checkbox?
            </summary>
      <remarks>
            If this is true, the user can choose the third state (normally Indeterminate).
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.UseInitialLetterForGroup">
      <summary>
            Group objects by the initial letter of the aspect of the column
            </summary>
      <remarks>
            One common pattern is to group column by the initial letter of the value for that group.
            The aspect must be a string (obviously).
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.UseFiltering">
      <summary>
            Gets or sets whether or not this column should be user filterable
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ValueBasedFilter">
      <summary>
            Gets or sets a filter that will only include models where the model's value
            for this column is one of the values in ValuesChosenForFiltering
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.ValuesChosenForFiltering">
      <summary>
            Gets or sets the values that will be used to generate a filter for this
            column. For a model to be included by the generated filter, its value for this column
            must be in this list. If the list is null or empty, this column will
            not be used for filtering.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.Width">
      <summary>
            What is the width of this column?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.WordWrap">
      <summary>
            Gets or set whether the contents of this column's cells should be word wrapped
            </summary>
      <remarks>If this column uses a custom IRenderer (that is, one that is not descended
            from BaseRenderer), then that renderer is responsible for implementing word wrapping.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumn.DataType">
      <summary>
            Gets or sets the type of data shown in this column.
            </summary>
      <remarks>If this is not set, it will try to get the type
            by looking through the rows of the listview.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.Properties.Resources">
      <summary>
              用於查詢當地語系化字串等的強型別資源類別
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.Properties.Resources.ResourceManager">
      <summary>
              傳回這個類別使用的快取的 ResourceManager 執行個體。
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.Properties.Resources.Culture">
      <summary>
              覆寫目前執行緒的 CurrentUICulture 屬性，對象是所有
              使用這個強型別資源類別的資源查閱。
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GraphicAdornment">
      <summary>
            An adorment is the common base for overlays and decorations.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.CalculateAlignedPosition(System.Drawing.Point,System.Drawing.Size,System.Drawing.ContentAlignment)">
      <summary>
            Calculate the location of rectangle of the given size,
            so that it's indicated corner would be at the given point.
            </summary>
      <param name="pt">The point</param>
      <param name="size">
      </param>
      <param name="corner">Which corner will be positioned at the reference point</param>
      <returns>
      </returns>
      <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.TopLeft) -&gt; Point(50, 100)</example>
      <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.MiddleCenter) -&gt; Point(45, 90)</example>
      <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.BottomRight) -&gt; Point(40, 80)</example>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.CreateAlignedRectangle(System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
            Calculate a rectangle that has the given size which is positioned so that
            its alignment point is at the reference location of the given rect.
            </summary>
      <param name="r">
      </param>
      <param name="sz">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.CreateAlignedRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.ContentAlignment,System.Drawing.ContentAlignment,System.Drawing.Size)">
      <summary>
            Create a rectangle of the given size which is positioned so that
            its indicated corner is at the indicated corner of the reference rect.
            </summary>
      <param name="r">
      </param>
      <param name="sz">
      </param>
      <param name="corner">
      </param>
      <param name="referenceCorner">
      </param>
      <param name="offset">
      </param>
      <returns>
      </returns>
      <remarks>
        <para>Creates a rectangle so that its bottom left is at the centre of the reference:
            corner=BottomLeft, referenceCorner=MiddleCenter</para>
        <para>This is a powerful concept that takes some getting used to, but is
            very neat once you understand it.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.CalculateCorner(System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
      <summary>
            Return the point at the indicated corner of the given rectangle (it doesn't
            have to be a corner, but a named location)
            </summary>
      <param name="r">The reference rectangle</param>
      <param name="corner">Which point of the rectangle should be returned?</param>
      <returns>A point</returns>
      <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.TopLeft) -&gt; Point(0, 0)</example>
      <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.MiddleCenter) -&gt; Point(25, 50)</example>
      <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.BottomRight) -&gt; Point(50, 100)</example>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.CalculateItemBounds(BrightIdeasSoftware.OLVListItem,BrightIdeasSoftware.OLVListSubItem)">
      <summary>
            Given the item and the subitem, calculate its bounds.
            </summary>
      <param name="item">
      </param>
      <param name="subItem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.ApplyRotation(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Apply any specified rotation to the Graphic content.
            </summary>
      <param name="g">The Graphics to be transformed</param>
      <param name="r">The rotation will be around the centre of this rect</param>
    </member>
    <member name="M:BrightIdeasSoftware.GraphicAdornment.UnapplyRotation(System.Drawing.Graphics)">
      <summary>
            Reverse the rotation created by ApplyRotation()
            </summary>
      <param name="g">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.AdornmentCorner">
      <summary>
            Gets or sets the corner of the adornment that will be positioned at the reference corner
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.Alignment">
      <summary>
            Gets or sets location within the reference rectange where the adornment will be drawn
            </summary>
      <remarks>This is a simplied interface to ReferenceCorner and AdornmentCorner </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.Offset">
      <summary>
            Gets or sets the offset by which the position of the adornment will be adjusted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.ReferenceCorner">
      <summary>
            Gets or sets the point of the reference rectangle to which the adornment will be aligned.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.Rotation">
      <summary>
            Gets or sets the degree of rotation by which the adornment will be transformed.
            The centre of rotation will be the center point of the adornment.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GraphicAdornment.Transparency">
      <summary>
            Gets or sets the transparency of the overlay. 
            0 is completely transparent, 255 is completely opaque.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ImageAdornment">
      <summary>
            An overlay that will draw an image over the top of the ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the image in its specified location
            </summary>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
      <summary>
            Draw the image in its specified location
            </summary>
      <param name="image">The image to be drawn</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
      <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Drawing.Size,System.Int32)">
      <summary>
            Draw the image in its specified location
            </summary>
      <param name="image">The image to be drawn</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
      <param name="sz">How big should the image be?</param>
      <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageAdornment.DrawScaledImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
      <summary>
            Draw the image in its specified location, scaled so that it is not wider
            than the given rectangle. Height is scaled proportional to the width.
            </summary>
      <param name="image">The image to be drawn</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
      <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageAdornment.DrawTransparentBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
      <summary>
            Utility to draw a bitmap transparenly.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="image">
      </param>
      <param name="transparency">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.ImageAdornment.Image">
      <summary>
            Gets or sets the image that will be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageAdornment.ShrinkToWidth">
      <summary>
            Gets or sets if the image will be shrunk to fit with its horizontal bounds
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TextAdornment">
      <summary>
            An adornment that will draw text
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextAdornment.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our text with our stored configuration in relation to the given
            reference rectangle
            </summary>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The reference rectangle in relation to which the text will be drawn</param>
    </member>
    <member name="M:BrightIdeasSoftware.TextAdornment.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Draw the given text with our stored configuration
            </summary>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The reference rectangle in relation to which the text will be drawn</param>
      <param name="s">The text to draw</param>
      <param name="transparency">How opaque should be text be</param>
    </member>
    <member name="M:BrightIdeasSoftware.TextAdornment.DrawBorderedText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Draw the text with a border
            </summary>
      <param name="g">The Graphics used for drawing</param>
      <param name="textRect">The bounds within which the text should be drawn</param>
      <param name="text">The text to draw</param>
      <param name="transparency">How opaque should be text be</param>
    </member>
    <member name="M:BrightIdeasSoftware.TextAdornment.CalculateTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
      <summary>
            Return the rectangle that will be the precise bounds of the displayed text
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="s">
      </param>
      <returns>The bounds of the text</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TextAdornment.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
      <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
      <param name="rect">The rectangle</param>
      <param name="diameter">The diameter of the corners</param>
      <returns>A round cornered rectagle path</returns>
      <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.BackColor">
      <summary>
            Gets or sets the background color of the text
            Set this to Color.Empty to not draw a background
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.BackgroundBrush">
      <summary>
            Gets the brush that will be used to paint the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.BorderColor">
      <summary>
            Gets or sets the color of the border around the billboard.
            Set this to Color.Empty to remove the border
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.BorderPen">
      <summary>
            Gets the brush that will be used to paint the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.BorderWidth">
      <summary>
            Gets or sets the width of the border around the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.CornerRounding">
      <summary>
            How rounded should the corners of the border be? 0 means no rounding.
            </summary>
      <remarks>If this value is too large, the edges of the border will appear odd.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.Font">
      <summary>
            Gets or sets the font that will be used to draw the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.FontOrDefault">
      <summary>
            Gets the font that will be used to draw the text or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.HasBackground">
      <summary>
            Does this text have a background?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.HasBorder">
      <summary>
            Does this overlay have a border?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.MaximumTextWidth">
      <summary>
            Gets or sets the maximum width of the text. Text longer than this will wrap.
            0 means no maximum.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.StringFormat">
      <summary>
            Gets or sets the formatting that should be used on the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.Text">
      <summary>
            Gets or sets the text that will be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.TextBrush">
      <summary>
            Gets the brush that will be used to paint the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.TextColor">
      <summary>
            Gets or sets the color of the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextAdornment.Wrap">
      <summary>
            Gets or sets whether the text will wrap when it exceeds its bounds
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVColumnAttribute">
      <summary>
            This attribute is used to mark a property of a model
            class that should be noticed by Generator class.
            </summary>
      <remarks>
            All the attributes of this class match their equivilent properties on OLVColumn.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumnAttribute.#ctor">
      <summary>
            Create a new OLVColumnAttribute
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVColumnAttribute.#ctor(System.String)">
      <summary>
            Create a new OLVColumnAttribute with the given title
            </summary>
      <param name="title">The title of the column</param>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.AspectToStringFormat">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.CheckBoxes">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.DisplayIndex">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.FillsFreeSpace">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.FreeSpaceProportion">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.GroupCutoffs">
      <summary>
            An array of IComparables that mark the cutoff points for values when
            grouping on this column. 
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.GroupDescriptions">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.GroupWithItemCountFormat">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.GroupWithItemCountSingularFormat">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.Hyperlink">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.ImageAspectName">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.IsEditable">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.IsVisible">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.IsTileViewColumn">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.MaximumWidth">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.MinimumWidth">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.Name">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.TextAlign">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.Tag">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.Title">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.ToolTipText">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.TriStateCheckBoxes">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.UseInitialLetterForGroup">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVColumnAttribute.Width">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVChildrenAttribute">
      <summary>
            Properties marked with [OLVChildren] will be used as the children source in a TreeListView.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVIgnoreAttribute">
      <summary>
            Properties marked with [OLVIgnore] will not have columns generated for them.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ComboBoxItem">
      <summary>
            These items allow combo boxes to remember a value and its description.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ComboBoxItem.#ctor(System.Object,System.String)">
      <summary>
      </summary>
      <param name="key">
      </param>
      <param name="description">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ComboBoxItem.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.ComboBoxItem.Key">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AutoCompleteCellEditor">
      <summary>
            This editor shows and auto completes values from the given listview column.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AutoCompleteCellEditor.#ctor(BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Create an AutoCompleteCellEditor
            </summary>
      <param name="lv">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.EnumCellEditor">
      <summary>
            This combo box is specialised to allow editing of an enum.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.EnumCellEditor.#ctor(System.Type)">
      <summary>
      </summary>
      <param name="type">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.IntUpDown">
      <summary>
            This editor simply shows and edits integer values.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IntUpDown.#ctor">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IntUpDown.Value">
      <summary>
            Gets or sets the value shown by this editor
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.UintUpDown">
      <summary>
            This editor simply shows and edits unsigned integer values.
            </summary>
      <remarks>This class can't be made public because unsigned int is not a
            CLS-compliant type. If you want to use, just copy the code to this class
            into your project and use it from there.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.BooleanCellEditor">
      <summary>
            This editor simply shows and edits boolean values.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BooleanCellEditor.#ctor">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BooleanCellEditor2">
      <summary>
            This editor simply shows and edits boolean values using a checkbox
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BooleanCellEditor2.Value">
      <summary>
            Gets or sets the value shown by this editor
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BooleanCellEditor2.TextAlign">
      <summary>
            Gets or sets how the checkbox will be aligned
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FloatCellEditor">
      <summary>
            This editor simply shows and edits floating point values.
            </summary>
      <remarks>You can intercept the CellEditStarting event if you want
            to change the characteristics of the editor. For example, by increasing
            the number of decimal places.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.FloatCellEditor.#ctor">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FloatCellEditor.Value">
      <summary>
            Gets or sets the value shown by this editor
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.EditorCreatorDelegate">
      <summary>
            A delegate that creates an editor for the given value
            </summary>
      <param name="model">The model from which that value came</param>
      <param name="column">The column for which the editor is being created</param>
      <param name="value">A representative value of the type to be edited. This value may not be the exact
            value for the column/model combination. It could be simply representative of
            the appropriate type of value.</param>
      <returns>A control which can edit the given value</returns>
    </member>
    <member name="T:BrightIdeasSoftware.EditorRegistry">
      <summary>
            An editor registry gives a way to decide what cell editor should be used to edit
            the value of a cell. Programmers can register non-standard types and the control that 
            should be used to edit instances of that type. 
            </summary>
      <remarks>
        <para>All ObjectListViews share the same editor registry.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.#ctor">
      <summary>
            Create an EditorRegistry
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.Register(System.Type,System.Type)">
      <summary>
            Register that values of 'type' should be edited by instances of 'controlType'.
            </summary>
      <param name="type">The type of value to be edited</param>
      <param name="controlType">The type of the Control that will edit values of 'type'</param>
      <example>
            ObjectListView.EditorRegistry.Register(typeof(Color), typeof(MySpecialColorEditor));
            </example>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.Register(System.Type,BrightIdeasSoftware.EditorCreatorDelegate)">
      <summary>
            Register the given delegate so that it is called to create editors
            for values of the given type
            </summary>
      <param name="type">The type of value to be edited</param>
      <param name="creator">The delegate that will create a control that can edit values of 'type'</param>
      <example>
            ObjectListView.EditorRegistry.Register(typeof(Color), CreateColorEditor);
            ...
            public Control CreateColorEditor(Object model, OLVColumn column, Object value)
            {
                return new MySpecialColorEditor();
            }
            </example>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.RegisterDefault(BrightIdeasSoftware.EditorCreatorDelegate)">
      <summary>
            Register a delegate that will be called to create an editor for values
            that have not been handled.
            </summary>
      <param name="creator">The delegate that will create a editor for all other types</param>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.RegisterFirstChance(BrightIdeasSoftware.EditorCreatorDelegate)">
      <summary>
            Register a delegate that will be given a chance to create a control
            before any other option is considered.
            </summary>
      <param name="creator">The delegate that will create a control</param>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.GetEditor(System.Object,BrightIdeasSoftware.OLVColumn,System.Object)">
      <summary>
            Create and return an editor that is appropriate for the given value.
            Return null if no appropriate editor can be found.
            </summary>
      <param name="model">The model involved</param>
      <param name="column">The column to be edited</param>
      <param name="value">The value to be edited. This value may not be the exact
            value for the column/model combination. It could be simply representative of
            the appropriate type of value.</param>
      <returns>A Control that can edit the given type of values</returns>
    </member>
    <member name="M:BrightIdeasSoftware.EditorRegistry.CreateEnumEditor(System.Type)">
      <summary>
            Create and return an editor that will edit values of the given type
            </summary>
      <param name="type">A enum type</param>
    </member>
    <member name="T:BrightIdeasSoftware.DataListView">
      <summary>
            A DataListView is a ListView that can be bound to a datasource (which would normally be a DataTable or DataView).
            </summary>
      <remarks>
        <para>This listview keeps itself in sync with its source datatable by listening for change events.</para>
        <para>The DataListView will automatically create columns to show all of the data source's columns/properties, if there is not already
            a column showing that property. This allows you to define one or two columns in the designer and then have the others generated automatically.
            If you don't want any column to be auto generated, set <see cref="P:BrightIdeasSoftware.DataListView.AutoGenerateColumns" /> to false.
            These generated columns will be only the simplest view of the world, and would look more interesting with a few delegates installed.</para>
        <para>This listview will also automatically generate missing aspect getters to fetch the values from the data view.</para>
        <para>Changing data sources is possible, but error prone. Before changing data sources, the programmer is responsible for modifying/resetting
            the column collection to be valid for the new data source.</para>
        <para>Internally, a CurrencyManager controls keeping the data source in-sync with other users of the data source (as per normal .NET
            behavior). This means that the model objects in the DataListView are DataRowView objects. If you write your own AspectGetters/Setters,
            they will be given DataRowView objects.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataListView.#ctor">
      <summary>
            Make a DataListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DataListView.AddObjects(System.Collections.ICollection)">
      <summary>
            Add the given collection of model objects to this control.
            </summary>
      <param name="modelObjects">A collection of model objects</param>
      <remarks>This is a no-op for data lists, since the data
            is controlled by the VirtualListDataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataListView.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove the given collection of model objects from this control.
            </summary>
      <remarks>This is a no-op for data lists, since the data
            is controlled by the VirtualListDataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DataListView.OnParentBindingContextChanged(System.EventArgs)">
      <summary>
            Handles parent binding context changes
            </summary>
      <param name="e">Unused EventArgs.</param>
    </member>
    <member name="P:BrightIdeasSoftware.DataListView.AutoGenerateColumns">
      <summary>
            Gets or sets whether or not columns will be automatically generated to show the
            columns when the DataSource is set. 
            </summary>
      <remarks>This must be set before the DataSource is set. It has no effect afterwards.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataListView.DataSource">
      <summary>
            Get or set the DataSource that will be displayed in this list view.
            </summary>
      <remarks>The DataSource should implement either <see cref="T:System.Collections.IList" />, <see cref="T:System.ComponentModel.IBindingList" />,
            or <see cref="T:System.ComponentModel.IListSource" />. Some common examples are the following types of objects:
            <list type="unordered"><item><description><see cref="T:System.Data.DataView" /></description></item><item><description><see cref="T:System.Data.DataTable" /></description></item><item><description><see cref="T:System.Data.DataSet" /></description></item><item><description><see cref="T:System.Data.DataViewManager" /></description></item><item><description><see cref="T:System.Windows.Forms.BindingSource" /></description></item></list><para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource" /> interface, such as <see cref="T:System.Data.DataSet" />)
            you must also set the <see cref="P:BrightIdeasSoftware.DataListView.DataMember" /> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:BrightIdeasSoftware.DataListView.DataMember" /> property even when
            DataSource refers to a list, since <see cref="P:BrightIdeasSoftware.DataListView.DataMember" /> can
            also be used to navigate relations between lists.</para><para>When a DataSource is set, the control will create OLVColumns to show any
            data source columns that are not already shown.</para><para>If the DataSource is changed, you will have to remove any previously
            created columns, since they will be configured for the previous DataSource.
            <see cref="M:BrightIdeasSoftware.ObjectListView.Reset" />.</para></remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataListView.DataMember">
      <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
      <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DataListView.Adapter">
      <summary>
            Gets or sets the DataSourceAdaptor that does the bulk of the work needed
            for data binding.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IOverlay">
      <summary>
            The interface for an object which can draw itself over the top of
            an ObjectListView.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IOverlay.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this overlay
            </summary>
      <param name="olv">The ObjectListView that is being overlaid</param>
      <param name="g">The Graphics onto the given OLV</param>
      <param name="r">The content area of the OLV</param>
    </member>
    <member name="T:BrightIdeasSoftware.IDecoration">
      <summary>
            A decoration is an overlay that draws itself in relation to a given row or cell.
            Decorations scroll when the listview scrolls.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IDecoration.ListItem">
      <summary>
            Gets or sets the row that is to be decorated
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IDecoration.SubItem">
      <summary>
            Gets or sets the subitem that is to be decorated
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractDecoration">
      <summary>
            An AbstractDecoration is a safe do-nothing implementation of the IDecoration interface
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the decoration
            </summary>
      <param name="olv">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractDecoration.ListItem">
      <summary>
            Gets or sets the row that is to be decorated
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractDecoration.SubItem">
      <summary>
            Gets or sets the subitem that is to be decorated
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractDecoration.RowBounds">
      <summary>
            Gets the bounds of the decorations row
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractDecoration.CellBounds">
      <summary>
            Get the bounds of the decorations cell
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TintedColumnDecoration">
      <summary>
            This decoration draws a slight tint over a column of the
            owning listview. If no column is explicitly set, the selected
            column in the listview will be used.
            The selected column is normally the sort column, but does not have to be.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TintedColumnDecoration.#ctor">
      <summary>
            Create a TintedColumnDecoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TintedColumnDecoration.#ctor(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Create a TintedColumnDecoration
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TintedColumnDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw a slight colouring over our tinted column
            </summary>
      <remarks>
            This overlay only works when:
            - the list is in Details view
            - there is at least one row
            - there is a selected column (or a specified tint column)
            </remarks>
      <param name="olv">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TintedColumnDecoration.ColumnToTint">
      <summary>
            Gets or sets the column that will be tinted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TintedColumnDecoration.Tint">
      <summary>
            Gets or sets the color that will be 'tinted' over the selected column
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BorderDecoration">
      <summary>
            This decoration draws an optionally filled border around a rectangle.
            Subclasses must override CalculateBounds().
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.#ctor">
      <summary>
            Create a BorderDecoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.#ctor(System.Drawing.Pen)">
      <summary>
            Create a BorderDecoration
            </summary>
      <param name="borderPen">The pen used to draw the border</param>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
      <summary>
            Create a BorderDecoration
            </summary>
      <param name="borderPen">The pen used to draw the border</param>
      <param name="fill">The brush used to fill the rectangle</param>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw a filled border 
            </summary>
      <param name="olv">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.CalculateBounds">
      <summary>
            Subclasses should override this to say where the border should be drawn
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.DrawFilledBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Do the actual work of drawing the filled border
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BorderDecoration.GetRoundedRect(System.Drawing.RectangleF,System.Single)">
      <summary>
            Create a GraphicsPath that represents a round cornered rectangle.
            </summary>
      <param name="rect">
      </param>
      <param name="diameter">If this is 0 or less, the rectangle will not be rounded.</param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.BorderPen">
      <summary>
            Gets or sets the pen that will be used to draw the border
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.BoundsPadding">
      <summary>
            Gets or sets the padding that will be added to the bounds of the item
            before drawing the border and fill.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.CornerRounding">
      <summary>
            How rounded should the corners of the border be? 0 means no rounding.
            </summary>
      <remarks>If this value is too large, the edges of the border will appear odd.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.FillBrush">
      <summary>
            Gets or sets the brush that will be used to fill the border
            </summary>
      <remarks>This value is ignored when using gradient brush</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.FillGradientFrom">
      <summary>
            Gets or sets the color that will be used as the start of a gradient fill.
            </summary>
      <remarks>This and FillGradientTo must be given value to show a gradient</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.FillGradientTo">
      <summary>
            Gets or sets the color that will be used as the end of a gradient fill.
            </summary>
      <remarks>This and FillGradientFrom must be given value to show a gradient</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BorderDecoration.FillGradientMode">
      <summary>
            Gets or sets the fill mode that will be used for the gradient.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.RowBorderDecoration">
      <summary>
            Instances of this class draw a border around the decorated row
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.RowBorderDecoration.CalculateBounds">
      <summary>
            Calculate the boundaries of the border
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.RowBorderDecoration.LeftColumn">
      <summary>
            Gets or sets the index of the left most column to be used for the border
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.RowBorderDecoration.RightColumn">
      <summary>
            Gets or sets the index of the right most column to be used for the border
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellBorderDecoration">
      <summary>
            Instances of this class draw a border around the decorated subitem.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellBorderDecoration.CalculateBounds">
      <summary>
            Calculate the boundaries of the border
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.EditingCellBorderDecoration">
      <summary>
            This decoration puts a border around the cell being edited and
            optionally "lightboxes" the cell (makes the rest of the control dark).
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.EditingCellBorderDecoration.#ctor">
      <summary>
            Create a EditingCellBorderDecoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.EditingCellBorderDecoration.#ctor(System.Boolean)">
      <summary>
            Create a EditingCellBorderDecoration
            </summary>
      <param name="useLightBox">Should the decoration use a lighbox display style?</param>
    </member>
    <member name="M:BrightIdeasSoftware.EditingCellBorderDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the decoration
            </summary>
      <param name="olv">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.EditingCellBorderDecoration.UseLightbox">
      <summary>
            Gets or set whether the decoration should make the rest of
            the control dark when a cell is being edited
            </summary>
      <remarks>If this is true, FillBrush is used to overpaint
            the control.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.LightBoxDecoration">
      <summary>
            This decoration causes everything *except* the row under the mouse to be overpainted
            with a tint, making the row under the mouse stand out in comparison.
            The darker and more opaque the fill color, the more obvious the
            decorated row becomes.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.LightBoxDecoration.#ctor">
      <summary>
            Create a LightBoxDecoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.LightBoxDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw a tint over everything in the ObjectListView except the 
            row under the mouse.
            </summary>
      <param name="olv">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.ImageDecoration">
      <summary>
            Instances of this class put an Image over the row/cell that it is decorating
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.#ctor">
      <summary>
            Create an image decoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.#ctor(System.Drawing.Image)">
      <summary>
            Create an image decoration
            </summary>
      <param name="image">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.#ctor(System.Drawing.Image,System.Int32)">
      <summary>
            Create an image decoration
            </summary>
      <param name="image">
      </param>
      <param name="transparency">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.#ctor(System.Drawing.Image,System.Drawing.ContentAlignment)">
      <summary>
            Create an image decoration
            </summary>
      <param name="image">
      </param>
      <param name="alignment">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.#ctor(System.Drawing.Image,System.Int32,System.Drawing.ContentAlignment)">
      <summary>
            Create an image decoration
            </summary>
      <param name="image">
      </param>
      <param name="transparency">
      </param>
      <param name="alignment">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this decoration
            </summary>
      <param name="olv">The ObjectListView being decorated</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="P:BrightIdeasSoftware.ImageDecoration.ListItem">
      <summary>
            Gets or sets the item being decorated
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageDecoration.SubItem">
      <summary>
            Gets or sets the sub item being decorated
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TextDecoration">
      <summary>
            Instances of this class draw some text over the row/cell that they are decorating
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.#ctor">
      <summary>
            Create a TextDecoration
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.#ctor(System.String)">
      <summary>
            Create a TextDecoration
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.#ctor(System.String,System.Int32)">
      <summary>
            Create a TextDecoration
            </summary>
      <param name="text">
      </param>
      <param name="transparency">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.#ctor(System.String,System.Drawing.ContentAlignment)">
      <summary>
            Create a TextDecoration
            </summary>
      <param name="text">
      </param>
      <param name="alignment">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.#ctor(System.String,System.Int32,System.Drawing.ContentAlignment)">
      <summary>
            Create a TextDecoration
            </summary>
      <param name="text">
      </param>
      <param name="transparency">
      </param>
      <param name="alignment">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TextDecoration.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this decoration
            </summary>
      <param name="olv">The ObjectListView being decorated</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="P:BrightIdeasSoftware.TextDecoration.ListItem">
      <summary>
            Gets or sets the item being decorated
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextDecoration.SubItem">
      <summary>
            Gets or sets the sub item being decorated
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IDragSource">
      <summary>
            An IDragSource controls how drag out from the ObjectListView will behave
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IDragSource.StartDrag(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.MouseButtons,BrightIdeasSoftware.OLVListItem)">
      <summary>
            A drag operation is beginning. Return the data object that will be used 
            for data transfer. Return null to prevent the drag from starting. The data
            object will normally include all the selected objects.
            </summary>
      <remarks>
            The returned object is later passed to the GetAllowedEffect() and EndDrag()
            methods.
            </remarks>
      <param name="olv">What ObjectListView is being dragged from.</param>
      <param name="button">Which mouse button is down?</param>
      <param name="item">What item was directly dragged by the user? There may be more than just this 
            item selected.</param>
      <returns>The data object that will be used for data transfer. This will often be a subclass
            of DataObject, but does not need to be.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IDragSource.GetAllowedEffects(System.Object)">
      <summary>
            What operations are possible for this drag? This controls the icon shown during the drag
            </summary>
      <param name="dragObject">The data object returned by StartDrag()</param>
      <returns>A combination of DragDropEffects flags</returns>
    </member>
    <member name="M:BrightIdeasSoftware.IDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
      <summary>
            The drag operation is complete. Do whatever is necessary to complete the action.
            </summary>
      <param name="dragObject">The data object returned by StartDrag()</param>
      <param name="effect">The value returned from GetAllowedEffects()</param>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractDragSource">
      <summary>
            A do-nothing implementation of IDragSource that can be safely subclassed.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDragSource.StartDrag(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.MouseButtons,BrightIdeasSoftware.OLVListItem)">
      <summary>
            See IDragSource documentation
            </summary>
      <param name="olv">
      </param>
      <param name="button">
      </param>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDragSource.GetAllowedEffects(System.Object)">
      <summary>
            See IDragSource documentation
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
      <summary>
            See IDragSource documentation
            </summary>
      <param name="dragObject">
      </param>
      <param name="effect">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.SimpleDragSource">
      <summary>
            A reasonable implementation of IDragSource that provides normal
            drag source functionality. It creates a data object that supports
            inter-application dragging of text and HTML representation of 
            the dragged rows. It can optionally force a refresh of all dragged
            rows when the drag is complete.
            </summary>
      <remarks>Subclasses can override GetDataObject() to add new
            data formats to the data transfer object.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.#ctor">
      <summary>
            Construct a SimpleDragSource
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.#ctor(System.Boolean)">
      <summary>
            Construct a SimpleDragSource that refreshes the dragged rows when
            the drag is complete
            </summary>
      <param name="refreshAfterDrop">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.StartDrag(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.MouseButtons,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Create a DataObject when the user does a left mouse drag operation.
            See IDragSource for further information.
            </summary>
      <param name="olv">
      </param>
      <param name="button">
      </param>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.GetAllowedEffects(System.Object)">
      <summary>
            Which operations are allowed in the operation? By default, all operations are supported.
            </summary>
      <param name="data">
      </param>
      <returns>All opertions are supported</returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
      <summary>
            The drag operation is finished. Refreshe the dragged rows if so configured.
            </summary>
      <param name="dragObject">
      </param>
      <param name="effect">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDragSource.CreateDataObject(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create a data object that will be used to as the data object
            for the drag operation.
            </summary>
      <remarks>
            Subclasses can override this method add new formats to the data object.
            </remarks>
      <param name="olv">The ObjectListView that is the source of the drag</param>
      <returns>A data object for the drag</returns>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDragSource.RefreshAfterDrop">
      <summary>
            Gets or sets whether the dragged rows should be refreshed when the 
            drag operation is complete.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IDropSink">
      <summary>
            Objects that implement this interface can acts as the receiver for drop
            operation for an ObjectListView.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
      <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
      <param name="g">A Graphic for drawing</param>
      <param name="bounds">The contents bounds of the ListView (not including any header)</param>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.Drop(System.Windows.Forms.DragEventArgs)">
      <summary>
            The user has released the drop over this control
            </summary>
      <remarks>
            Implementators should set args.Effect to the appropriate DragDropEffects. This value is returned
            to the originator of the drag.
            </remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.Enter(System.Windows.Forms.DragEventArgs)">
      <summary>
            A drag has entered this control.
            </summary>
      <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.GiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
            Change the cursor to reflect the current drag operation.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.Leave">
      <summary>
            The drag has left the bounds of this control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.Over(System.Windows.Forms.DragEventArgs)">
      <summary>
            The drag is moving over this control.
            </summary>
      <remarks>This is where any drop target should be calculated.
            Implementators should set args.Effect to the appropriate DragDropEffects.
            </remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IDropSink.QueryContinue(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>
            Should the drag be allowed to continue?
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.IDropSink.ListView">
      <summary>
            Gets or sets the ObjectListView that is the drop sink
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractDropSink">
      <summary>
            This is a do-nothing implementation of IDropSink that is a useful
            base class for more sophisticated implementations.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
      <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
      <param name="g">A Graphic for drawing</param>
      <param name="bounds">The contents bounds of the ListView (not including any header)</param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.Drop(System.Windows.Forms.DragEventArgs)">
      <summary>
            The user has released the drop over this control
            </summary>
      <remarks>
            Implementators should set args.Effect to the appropriate DragDropEffects. This value is returned
            to the originator of the drag.
            </remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.Enter(System.Windows.Forms.DragEventArgs)">
      <summary>
            A drag has entered this control.
            </summary>
      <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.Leave">
      <summary>
            The drag has left the bounds of this control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.Over(System.Windows.Forms.DragEventArgs)">
      <summary>
            The drag is moving over this control.
            </summary>
      <remarks>This is where any drop target should be calculated.
            Implementators should set args.Effect to the appropriate DragDropEffects.
            </remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.GiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
            Change the cursor to reflect the current drag operation.
            </summary>
      <remarks>You only need to override this if you want non-standard cursors.
            The standard cursors are supplied automatically.</remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.QueryContinue(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>
            Should the drag be allowed to continue?
            </summary>
      <remarks>
            You only need to override this if you want the user to be able
            to end the drop in some non-standard way, e.g. dragging to a
            certain point even without releasing the mouse, or going outside
            the bounds of the application. 
            </remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractDropSink.Cleanup">
      <summary>
            This is called when the mouse leaves the drop region and after the
            drop has completed.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractDropSink.ListView">
      <summary>
            Gets or sets the ObjectListView that is the drop sink
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.DropTargetLocation">
      <summary>
            The enum indicates which target has been found for a drop operation
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.None">
      <summary>
            No applicable target has been found
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.Background">
      <summary>
            The list itself is the target of the drop
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.Item">
      <summary>
            An item is the target
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.BetweenItems">
      <summary>
            Between two items (or above the top item or below the bottom item)
            can be the target. This is not actually ever a target, only a value indicate
            that it is valid to drop between items
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.AboveItem">
      <summary>
            Above an item is the target
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.BelowItem">
      <summary>
            Below an item is the target
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.SubItem">
      <summary>
            A subitem is the target of the drop
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.RightOfItem">
      <summary>
            On the right of an item is the target (not currently used)
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.DropTargetLocation.LeftOfItem">
      <summary>
            On the left of an item is the target (not currently used)
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.SimpleDropSink">
      <summary>
            This class represents a simple implementation of a drop sink.
            </summary>
      <remarks>
            Actually, it's far from simple and can do quite a lot in its own right.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.#ctor">
      <summary>
            Make a new drop sink
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.Cleanup">
      <summary>
            Cleanup the drop sink when the mouse has left the control or 
            the drag has finished.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
      <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
      <param name="g">A Graphic for drawing</param>
      <param name="bounds">The contents bounds of the ListView (not including any header)</param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.Drop(System.Windows.Forms.DragEventArgs)">
      <summary>
            The user has released the drop over this control
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.Enter(System.Windows.Forms.DragEventArgs)">
      <summary>
            A drag has entered this control.
            </summary>
      <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.GiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
            Change the cursor to reflect the current drag operation.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.Over(System.Windows.Forms.DragEventArgs)">
      <summary>
            The drag is moving over this control.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.TriggerDroppedEvent(System.Windows.Forms.DragEventArgs)">
      <summary>
            Trigger the Dropped events
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.OnCanDrop(BrightIdeasSoftware.OlvDropEventArgs)">
      <summary>
            Trigger CanDrop
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.OnDropped(BrightIdeasSoftware.OlvDropEventArgs)">
      <summary>
            Trigger Dropped
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.OnModelCanDrop(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
            Trigger ModelCanDrop
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.OnModelDropped(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
            Trigger ModelDropped
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.HandleTimerTick">
      <summary>
            Handle the timer tick event, which is sent when the listview should
            scroll
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.CalculateDropTarget(BrightIdeasSoftware.OlvDropEventArgs,System.Drawing.Point)">
      <summary>
            When the mouse is at the given point, what should the target of the drop be?
            </summary>
      <remarks>This method should update the DropTarget* members of the given arg block</remarks>
      <param name="args">
      </param>
      <param name="pt">The mouse point, in client co-ordinates</param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.CalculateDropAction(System.Windows.Forms.DragEventArgs,System.Drawing.Point)">
      <summary>
            What sort of action is possible when the mouse is at the given point?
            </summary>
      <remarks>
      </remarks>
      <param name="args">
      </param>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.CalculateStandardDropActionFromKeys">
      <summary>
            Based solely on the state of the modifier keys, what drop operation should
            be used?
            </summary>
      <returns>The drop operation that matches the state of the keys</returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.CheckScrolling(System.Drawing.Point)">
      <summary>
            Should the listview be made to scroll when the mouse is at the given point?
            </summary>
      <param name="pt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.UpdateAfterCanDropEvent(BrightIdeasSoftware.OlvDropEventArgs)">
      <summary>
            Update the state of our sink to reflect the information that 
            may have been written into the drop event args.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawFeedbackBackgroundTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the feedback that shows that the background is the target
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawFeedbackItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the feedback that shows that an item (or a subitem) is the target
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
      <remarks>
            DropTargetItem and DropTargetSubItemIndex tells what is the target
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawFeedbackAboveItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the feedback that shows the drop will occur before target
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawFeedbackBelowItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the feedback that shows the drop will occur after target
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
      <summary>
            Return a GraphicPath that is round corner rectangle.
            </summary>
      <param name="rect">
      </param>
      <param name="diameter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.CalculateDropTargetRectangle(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Calculate the target rectangle when the given item (and possible subitem)
            is the target of the drop.
            </summary>
      <param name="item">
      </param>
      <param name="subItem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleDropSink.DrawBetweenLine(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draw a "between items" line at the given co-ordinates
            </summary>
      <param name="g">
      </param>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.AcceptableLocations">
      <summary>
            Get or set the locations where a drop is allowed to occur (OR-ed together)
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.AcceptExternal">
      <summary>
            Gets or sets whether this sink allows model objects to be dragged from other lists
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.AutoScroll">
      <summary>
            Gets or sets whether the ObjectListView should scroll when the user drags
            something near to the top or bottom rows.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.Billboard">
      <summary>
            Gets the billboard overlay that will be used to display feedback
            messages during a drag operation. 
            </summary>
      <remarks>Set this to null to stop the feedback.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.CanDropBetween">
      <summary>
            Get or set whether a drop can occur between items of the list
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.CanDropOnBackground">
      <summary>
            Get or set whether a drop can occur on the listview itself
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.CanDropOnItem">
      <summary>
            Get or set whether a drop can occur on items in the list
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.CanDropOnSubItem">
      <summary>
            Get or set whether a drop can occur on a subitem in the list
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.DropTargetIndex">
      <summary>
            Get or set the index of the item that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.DropTargetItem">
      <summary>
            Get the item that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.DropTargetLocation">
      <summary>
            Get or set the location of the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.DropTargetSubItemIndex">
      <summary>
            Get or set the index of the subitem that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.FeedbackColor">
      <summary>
            Get or set the color that will be used to provide drop feedback
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsAltDown">
      <summary>
            Get whether the alt key was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsAnyModifierDown">
      <summary>
            Get whether any modifier key was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsControlDown">
      <summary>
            Get whether the control key was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsLeftMouseButtonDown">
      <summary>
            Get whether the left mouse button was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsMiddleMouseButtonDown">
      <summary>
            Get whether the right mouse button was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsRightMouseButtonDown">
      <summary>
            Get whether the right mouse button was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.IsShiftDown">
      <summary>
            Get whether the shift key was down during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.KeyState">
      <summary>
            Get or set the state of the keys during this drop event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleDropSink.UseDefaultCursors">
      <summary>
            Gets or sets whether the drop sink will automatically use cursors
            based on the drop effect. By default, this is true. If this is
            set to false, you must set the Cursor yourself.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.SimpleDropSink.CanDrop">
      <summary>
            Triggered when the sink needs to know if a drop can occur.
            </summary>
      <remarks>
            Handlers should set Effect to indicate what is possible.
            Handlers can change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.SimpleDropSink.Dropped">
      <summary>
            Triggered when the drop is made.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.SimpleDropSink.ModelCanDrop">
      <summary>
            Triggered when the sink needs to know if a drop can occur
            AND the source is an ObjectListView
            </summary>
      <remarks>
            Handlers should set Effect to indicate what is possible.
            Handlers can change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
    </member>
    <member name="E:BrightIdeasSoftware.SimpleDropSink.ModelDropped">
      <summary>
            Triggered when the drop is made.
            AND the source is an ObjectListView
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.RearrangingDropSink">
      <summary>
            This drop sink allows items within the same list to be rearranged,
            as well as allowing items to be dropped from other lists.
            </summary>
      <remarks>
        <para>
            This class can only be used on plain ObjectListViews and FastObjectListViews.
            The other flavours have no way to implement the insert operation that is required.
            </para>
        <para>
            This class does not work with grouping.
            </para>
        <para>
            This class works when the OLV is sorted, but it is up to the programmer
            to decide what rearranging such lists "means". Example: if the control is sorting
            students by academic grade, and the user drags a "Fail" grade student up amonst the "A+"
            students, it is the responsibility of the programmer to makes the appropriate changes
            to the model and redraw/rebuild the control so that the users action makes sense.
            </para>
        <para>
            Users of this class should listen for the CanDrop event to decide
            if models from another OLV can be moved to OLV under this sink.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.RearrangingDropSink.#ctor">
      <summary>
            Create a RearrangingDropSink
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.RearrangingDropSink.#ctor(System.Boolean)">
      <summary>
            Create a RearrangingDropSink
            </summary>
      <param name="acceptDropsFromOtherLists">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.RearrangingDropSink.OnModelCanDrop(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
            Trigger OnModelCanDrop
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.RearrangingDropSink.OnModelDropped(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
            Trigger OnModelDropped
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.RearrangingDropSink.RearrangeModels(BrightIdeasSoftware.ModelDropEventArgs)">
      <summary>
            Do the work of processing the dropped items
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.OlvDropEventArgs">
      <summary>
            When a drop sink needs to know if something can be dropped, or
            to notify that a drop has occured, it uses an instance of this class.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OlvDropEventArgs.#ctor">
      <summary>
            Create a OlvDropEventArgs
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DragEventArgs">
      <summary>
            Get the original drag-drop event args
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DataObject">
      <summary>
            Get the data object that is being dragged
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DropSink">
      <summary>
            Get the drop sink that originated this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DropTargetIndex">
      <summary>
            Get or set the index of the item that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DropTargetLocation">
      <summary>
            Get or set the location of the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DropTargetSubItemIndex">
      <summary>
            Get or set the index of the subitem that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.DropTargetItem">
      <summary>
            Get the item that is the target of the drop
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.Effect">
      <summary>
            Get or set the drag effect that should be used for this operation
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.Handled">
      <summary>
            Get or set if this event was handled. No further processing will be done for a handled event.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.InfoMessage">
      <summary>
            Get or set the feedback message for this operation
            </summary>
      <remarks>
            If this is not null, it will be displayed as a feedback message
            during the drag.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.ListView">
      <summary>
            Get the ObjectListView that is being dropped on
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.MouseLocation">
      <summary>
            Get the location of the mouse (in target ListView co-ords)
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OlvDropEventArgs.StandardDropActionFromKeys">
      <summary>
            Get the drop action indicated solely by the state of the modifier keys
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ModelDropEventArgs">
      <summary>
            These events are triggered when the drag source is an ObjectListView.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ModelDropEventArgs.#ctor">
      <summary>
            Create a ModelDropEventArgs
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ModelDropEventArgs.RefreshObjects">
      <summary>
            Refresh all the objects involved in the operation
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ModelDropEventArgs.SourceModels">
      <summary>
            Gets the model objects that are being dragged.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ModelDropEventArgs.SourceListView">
      <summary>
            Gets the ObjectListView that is the source of the dragged objects.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ModelDropEventArgs.TargetModel">
      <summary>
            Get the model object that is being dropped upon.
            </summary>
      <remarks>This is only value for TargetLocation == Item</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.CellEditEventHandler">
      <summary>
            The callbacks for CellEditing events
            </summary>
      <remarks> this 
            We could replace this with EventHandler&lt;CellEditEventArgs&gt; but that would break all
            cell editing event code from v1.x.
            </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.CellEditEventArgs">
      <summary>
            Let the world know that a cell edit operation is beginning or ending
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditEventArgs.Cancel">
      <summary>
            Change this to true to cancel the cell editing operation.
            </summary>
      <remarks>
        <para>During the CellEditStarting event, setting this to true will prevent the cell from being edited.</para>
        <para>During the CellEditFinishing event, if this value is already true, this indicates that the user has
            cancelled the edit operation and that the handler should perform cleanup only. Setting this to true,
            will prevent the ObjectListView from trying to write the new value into the model object.</para>
      </remarks>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditEventArgs.Control">
      <summary>
            During the CellEditStarting event, this can be modified to be the control that you want
            to edit the value. You must fully configure the control before returning from the event,
            including its bounds and the value it is showing.
            During the CellEditFinishing event, you can use this to get the value that the user
            entered and commit that value to the model. Changing the control during the finishing
            event has no effect.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditEventArgs.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.Control,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Create an event args
            </summary>
      <param name="column">
      </param>
      <param name="control">
      </param>
      <param name="r">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.Column">
      <summary>
            The column of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.RowObject">
      <summary>
            The model object of the row of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.ListViewItem">
      <summary>
            The listview item of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.NewValue">
      <summary>
            The data value of the cell as it stands in the control.
            </summary>
      <remarks>Only validate during Validating and Finishing events.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.SubItemIndex">
      <summary>
            The index of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.Value">
      <summary>
            The data value of the cell before the edit operation began.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditEventArgs.CellBounds">
      <summary>
            The bounds of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CancellableEventArgs">
      <summary>
            Event blocks for events that can be cancelled
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CancellableEventArgs.Canceled">
      <summary>
            Has this event been cancelled by the event handler?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BeforeSortingEventArgs">
      <summary>
            BeforeSorting
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.Handled">
      <summary>
            Did the event handler already do the sorting for us?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.ColumnToGroupBy">
      <summary>
            What column will be used for grouping
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.GroupByOrder">
      <summary>
            How will groups be ordered
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.ColumnToSort">
      <summary>
            What column will be used for sorting
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.SortOrder">
      <summary>
            What order will be used for sorting. None means no sorting.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.SecondaryColumnToSort">
      <summary>
            What column will be used for secondary sorting?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSortingEventArgs.SecondarySortOrder">
      <summary>
            What order will be used for secondary sorting?
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BeforeSortingEventArgs.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create BeforeSortingEventArgs
            </summary>
      <param name="column">
      </param>
      <param name="order">
      </param>
      <param name="column2">
      </param>
      <param name="order2">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BeforeSortingEventArgs.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create BeforeSortingEventArgs
            </summary>
      <param name="groupColumn">
      </param>
      <param name="groupOrder">
      </param>
      <param name="column">
      </param>
      <param name="order">
      </param>
      <param name="column2">
      </param>
      <param name="order2">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.AfterSortingEventArgs">
      <summary>
            Sorting has just occurred.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AfterSortingEventArgs.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create a AfterSortingEventArgs
            </summary>
      <param name="groupColumn">
      </param>
      <param name="groupOrder">
      </param>
      <param name="column">
      </param>
      <param name="order">
      </param>
      <param name="column2">
      </param>
      <param name="order2">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AfterSortingEventArgs.#ctor(BrightIdeasSoftware.BeforeSortingEventArgs)">
      <summary>
            Create a AfterSortingEventArgs
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.ColumnToGroupBy">
      <summary>
            What column was used for grouping?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.GroupByOrder">
      <summary>
            What ordering was used for grouping?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.ColumnToSort">
      <summary>
            What column was used for sorting?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.SortOrder">
      <summary>
            What ordering was used for sorting?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.SecondaryColumnToSort">
      <summary>
            What column was used for secondary sorting?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSortingEventArgs.SecondarySortOrder">
      <summary>
            What order was used for secondary sorting?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FilterEventArgs">
      <summary>
            This event is triggered when the contents of a list have changed
            and we want the world to have a chance to filter the list.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterEventArgs.Objects">
      <summary>
            Gets or sets what objects are being filtered
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterEventArgs.FilteredObjects">
      <summary>
            Gets or sets what objects survived the filtering
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FilterEventArgs.#ctor(System.Collections.IEnumerable)">
      <summary>
            Create a FilterEventArgs
            </summary>
      <param name="objects">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.ItemsChangedEventArgs">
      <summary>
            This event is triggered after the items in the list have been changed,
            either through SetObjects, AddObjects or RemoveObjects.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ItemsChangedEventArgs.#ctor">
      <summary>
            Create a ItemsChangedEventArgs
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ItemsChangedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor for this event when used by a virtual list
            </summary>
      <param name="oldObjectCount">
      </param>
      <param name="newObjectCount">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.ItemsChangedEventArgs.OldObjectCount">
      <summary>
            Gets how many items were in the list before it changed
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ItemsChangedEventArgs.NewObjectCount">
      <summary>
            Gets how many objects are in the list after the change.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ItemsAddingEventArgs">
      <summary>
            This event is triggered by AddObjects before any change has been made to the list.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ItemsAddingEventArgs.ObjectsToAdd">
      <summary>
            Gets or sets the objects to be added to the list
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ItemsAddingEventArgs.#ctor(System.Collections.ICollection)">
      <summary>
            Create an ItemsAddingEventArgs
            </summary>
      <param name="objectsToAdd">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.ItemsChangingEventArgs">
      <summary>
            This event is triggered by SetObjects before any change has been made to the list.
            </summary>
      <remarks>
            When used with a virtual list, OldObjects will always be null.
            </remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ItemsChangingEventArgs.NewObjects">
      <summary>
            Gets or sets the objects that will be in the list after it changes.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ItemsChangingEventArgs.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>
            Create ItemsChangingEventArgs
            </summary>
      <param name="oldObjects">
      </param>
      <param name="newObjects">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.ItemsChangingEventArgs.OldObjects">
      <summary>
            Gets the objects that were in the list before it change.
            For virtual lists, this will always be null.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ItemsRemovingEventArgs">
      <summary>
            This event is triggered by RemoveObjects before any change has been made to the list.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ItemsRemovingEventArgs.ObjectsToRemove">
      <summary>
            Gets or sets the objects that will be removed
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ItemsRemovingEventArgs.#ctor(System.Collections.ICollection)">
      <summary>
            Create an ItemsRemovingEventArgs
            </summary>
      <param name="objectsToRemove">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.AfterSearchingEventArgs">
      <summary>
            Triggered after the user types into a list
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.AfterSearchingEventArgs.Handled">
      <summary>
            Gets or sets whether an the event handler already handled this event
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AfterSearchingEventArgs.#ctor(System.String,System.Int32)">
      <summary>
            Create an AfterSearchingEventArgs
            </summary>
      <param name="stringToFind">
      </param>
      <param name="indexSelected">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSearchingEventArgs.StringToFind">
      <summary>
            Gets the string that was actually searched for
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.AfterSearchingEventArgs.IndexSelected">
      <summary>
            Gets the index of the row that was selected by the search.
            -1 means that no row was matched
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BeforeSearchingEventArgs">
      <summary>
            Triggered when the user types into a list
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSearchingEventArgs.StringToFind">
      <summary>
            Gets or sets the string that will be found by the search routine
            </summary>
      <remarks>Modifying this value does not modify the memory of what the user has typed. 
            When the user next presses a character, the search string will revert to what 
            the user has actually typed.</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.BeforeSearchingEventArgs.StartSearchFrom">
      <summary>
            Gets or sets the index of the first row that will be considered to matching.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BeforeSearchingEventArgs.#ctor(System.String,System.Int32)">
      <summary>
            Create BeforeSearchingEventArgs
            </summary>
      <param name="stringToFind">
      </param>
      <param name="startSearchFrom">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.CellEventArgs">
      <summary>
            The parameter block when telling the world about a cell based event
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEventArgs.Handled">
      <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.ListView">
      <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.Model">
      <summary>
            Gets the model object under the cell
            </summary>
      <remarks>This is null for events triggered by the header.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.RowIndex">
      <summary>
            Gets the row index of the cell
            </summary>
      <remarks>This is -1 for events triggered by the header.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.ColumnIndex">
      <summary>
            Gets the column index of the cell
            </summary>
      <remarks>This is -1 when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.Column">
      <summary>
            Gets the column of the cell 
            </summary>
      <remarks>This is null when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.Location">
      <summary>
            Gets the location of the mouse at the time of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.ModifierKeys">
      <summary>
            Gets the state of the modifier keys at the time of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.Item">
      <summary>
            Gets the item of the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.SubItem">
      <summary>
            Gets the subitem of the cell
            </summary>
      <remarks>This is null when the view is not in details view and 
            for event triggered by the header</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.CellEventArgs.HitTest">
      <summary>
            Gets the HitTest object that determined which cell was hit
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellClickEventArgs">
      <summary>
            Tells the world that a cell was clicked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellClickEventArgs.ClickCount">
      <summary>
            Gets or sets the number of clicks associated with this event
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellRightClickEventArgs">
      <summary>
            Tells the world that a cell was right clicked
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellRightClickEventArgs.MenuStrip">
      <summary>
            Gets or sets the menu that should be displayed as a result of this event.
            </summary>
      <remarks>The menu will be positioned at Location, so changing that property changes
            where the menu will be displayed.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.CellOverEventArgs">
      <summary>
            Tell the world that the mouse is over a given cell
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FreezeEventArgs">
      <summary>
            Tells the world that the frozen-ness of the ObjectListView has changed.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FreezeEventArgs.#ctor(System.Int32)">
      <summary>
            Make a FreezeEventArgs
            </summary>
      <param name="freeze">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.FreezeEventArgs.FreezeLevel">
      <summary>
            How frozen is the control? 0 means that the control is unfrozen, 
            more than 0 indicates froze.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ToolTipShowingEventArgs">
      <summary>
            The parameter block when telling the world that a tool tip is about to be shown.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.Text">
      <summary>
            Gets or sets the text should be shown on the tooltip for this event
            </summary>
      <remarks>Setting this to empty or null prevents any tooltip from showing</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.RightToLeft">
      <summary>
            In what direction should the text for this tooltip be drawn?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.IsBalloon">
      <summary>
            Should the tooltip for this event been shown in bubble style?
            </summary>
      <remarks>This doesn't work reliable under Vista</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.BackColor">
      <summary>
            What color should be used for the background of the tooltip
            </summary>
      <remarks>Setting this does nothing under Vista</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.ForeColor">
      <summary>
            What color should be used for the foreground of the tooltip
            </summary>
      <remarks>Setting this does nothing under Vista</remarks>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.Title">
      <summary>
            What string should be used as the title for the tooltip for this event?
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.StandardIcon">
      <summary>
            Which standard icon should be used for the tooltip for this event
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.AutoPopDelay">
      <summary>
            How many milliseconds should the tooltip remain before it automatically
            disappears.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipShowingEventArgs.Font">
      <summary>
            What font should be used to draw the text of the tooltip?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipShowingEventArgs.ToolTipControl">
      <summary>
            Gets the tooltip control that is triggering the tooltip event
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HyperlinkEventArgs">
      <summary>
            Common information to all hyperlink events
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.ListView">
      <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.Model">
      <summary>
            Gets the model object under the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.RowIndex">
      <summary>
            Gets the row index of the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.ColumnIndex">
      <summary>
            Gets the column index of the cell
            </summary>
      <remarks>This is -1 when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.Column">
      <summary>
            Gets the column of the cell 
            </summary>
      <remarks>This is null when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.Item">
      <summary>
            Gets the item of the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.SubItem">
      <summary>
            Gets the subitem of the cell
            </summary>
      <remarks>This is null when the view is not in details view</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.Url">
      <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkEventArgs.Handled">
      <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IsHyperlinkEventArgs">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.IsHyperlinkEventArgs.Url">
      <summary>
            Gets or sets the url that should be invoked when this cell is clicked.
            </summary>
      <remarks>Setting this to None or String.Empty means that this cell is not a hyperlink</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.IsHyperlinkEventArgs.ListView">
      <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IsHyperlinkEventArgs.Model">
      <summary>
            Gets the model object under the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IsHyperlinkEventArgs.Column">
      <summary>
            Gets the column of the cell 
            </summary>
      <remarks>This is null when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.IsHyperlinkEventArgs.Text">
      <summary>
            Gets the text of the cell 
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FormatRowEventArgs">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.ListView">
      <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.Item">
      <summary>
            Gets the item of the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.Model">
      <summary>
            Gets the model object under the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.RowIndex">
      <summary>
            Gets the row index of the cell
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.DisplayIndex">
      <summary>
            Gets the display index of the row
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatRowEventArgs.UseCellFormatEvents">
      <summary>
            Should events be triggered for each cell in this row?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FormatCellEventArgs">
      <summary>
            Parameter block for FormatCellEvent
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FormatCellEventArgs.ColumnIndex">
      <summary>
            Gets the column index of the cell
            </summary>
      <remarks>This is -1 when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FormatCellEventArgs.Column">
      <summary>
            Gets the column of the cell 
            </summary>
      <remarks>This is null when the view is not in details view.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FormatCellEventArgs.SubItem">
      <summary>
            Gets the subitem of the cell
            </summary>
      <remarks>This is null when the view is not in details view</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FormatCellEventArgs.CellValue">
      <summary>
            Gets the model value that is being displayed by the cell.
            </summary>
      <remarks>This is null when the view is not in details view</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.HyperlinkClickedEventArgs">
      <summary>
            The event args when a hyperlink is clicked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkClickedEventArgs.Url">
      <summary>
            Gets the url that was associated with this cell.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HotItemChangedEventArgs">
      <summary>
            The event args when the hot item changed
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HotItemChangedEventArgs.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.Handled">
      <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.HotCellHitLocation">
      <summary>
            Gets the part of the cell that the mouse is over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.HotCellHitLocationEx">
      <summary>
            Gets an extended indication of the part of item/subitem/group that the mouse is currently over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.HotColumnIndex">
      <summary>
            Gets the index of the column that the mouse is over
            </summary>
      <remarks>In non-details view, this will always be 0.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.HotRowIndex">
      <summary>
            Gets the index of the row that the mouse is over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.HotGroup">
      <summary>
            Gets the group that the mouse is over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.OldHotCellHitLocation">
      <summary>
            Gets the part of the cell that the mouse used to be over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.OldHotCellHitLocationEx">
      <summary>
            Gets an extended indication of the part of item/subitem/group that the mouse used to be over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.OldHotColumnIndex">
      <summary>
            Gets the index of the column that the mouse used to be over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.OldHotRowIndex">
      <summary>
            Gets the index of the row that the mouse used to be over
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemChangedEventArgs.OldHotGroup">
      <summary>
            Gets the group that the mouse used to be over
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.SubItemCheckingEventArgs">
      <summary>
            Let the world know that a checkbox on a subitem is changing
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.SubItemCheckingEventArgs.#ctor(BrightIdeasSoftware.OLVColumn,BrightIdeasSoftware.OLVListItem,System.Int32,System.Windows.Forms.CheckState,System.Windows.Forms.CheckState)">
      <summary>
            Create a new event block
            </summary>
      <param name="column">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="currentValue">
      </param>
      <param name="newValue">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.Column">
      <summary>
            The column of the cell that is having its checkbox changed.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.RowObject">
      <summary>
            The model object of the row of the cell that is having its checkbox changed.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.ListViewItem">
      <summary>
            The listview item of the cell that is having its checkbox changed.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.CurrentValue">
      <summary>
            The current check state of the cell.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.NewValue">
      <summary>
            The proposed new check state of the cell.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.SubItemCheckingEventArgs.SubItemIndex">
      <summary>
            The index of the cell that is going to be or has been edited.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CreateGroupsEventArgs">
      <summary>
            This event argument block is used when groups are created for a list.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CreateGroupsEventArgs.#ctor(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Create a CreateGroupsEventArgs
            </summary>
      <param name="parms">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.CreateGroupsEventArgs.Parameters">
      <summary>
            Gets the settings that control the creation of groups
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CreateGroupsEventArgs.Groups">
      <summary>
            Gets or sets the groups that should be used
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CreateGroupsEventArgs.Canceled">
      <summary>
            Has this event been cancelled by the event handler?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupTaskClickedEventArgs">
      <summary>
            This event argument block is used when the text of a group task is clicked
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GroupTaskClickedEventArgs.#ctor(BrightIdeasSoftware.OLVGroup)">
      <summary>
            Create a GroupTaskClickedEventArgs
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GroupTaskClickedEventArgs.Group">
      <summary>
            Gets which group was clicked
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupExpandingCollapsingEventArgs">
      <summary>
            This event argument block is used when a group is about to expand or collapse
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GroupExpandingCollapsingEventArgs.#ctor(BrightIdeasSoftware.OLVGroup)">
      <summary>
            Create a GroupExpandingCollapsingEventArgs
            </summary>
      <param name="group">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GroupExpandingCollapsingEventArgs.Group">
      <summary>
            Gets which group is expanding/collapsing
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupExpandingCollapsingEventArgs.IsExpanding">
      <summary>
            Gets whether this event is going to expand the group.
            If this is false, the group must be collapsing.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupStateChangedEventArgs">
      <summary>
            This event argument block is used when the state of group has changed (collapsed, selected)
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GroupStateChangedEventArgs.#ctor(BrightIdeasSoftware.OLVGroup,BrightIdeasSoftware.GroupState,BrightIdeasSoftware.GroupState)">
      <summary>
            Create a GroupStateChangedEventArgs
            </summary>
      <param name="group">
      </param>
      <param name="oldState">
      </param>
      <param name="newState">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Collapsed">
      <summary>
            Gets whether the group was collapsed by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Focused">
      <summary>
            Gets whether the group was focused by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Selected">
      <summary>
            Gets whether the group was selected by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Uncollapsed">
      <summary>
            Gets whether the group was uncollapsed by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Unfocused">
      <summary>
            Gets whether the group was unfocused by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Unselected">
      <summary>
            Gets whether the group was unselected by this event
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.Group">
      <summary>
            Gets which group had its state changed
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.OldState">
      <summary>
            Gets the previous state of the group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.GroupStateChangedEventArgs.NewState">
      <summary>
            Gets the new state of the group
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeBranchExpandingEventArgs">
      <summary>
            This event argument block is used when a branch of a tree is about to be expanded
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeBranchExpandingEventArgs.#ctor(System.Object,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Create a new event args
            </summary>
      <param name="model">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchExpandingEventArgs.Model">
      <summary>
            Gets the model that is about to expand
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchExpandingEventArgs.Item">
      <summary>
            Gets the OLVListItem that is about to be expanded
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeBranchExpandedEventArgs">
      <summary>
            This event argument block is used when a branch of a tree has just been expanded
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeBranchExpandedEventArgs.#ctor(System.Object,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Create a new event args
            </summary>
      <param name="model">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchExpandedEventArgs.Model">
      <summary>
            Gets the model that is was expanded
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchExpandedEventArgs.Item">
      <summary>
            Gets the OLVListItem that was expanded
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeBranchCollapsingEventArgs">
      <summary>
            This event argument block is used when a branch of a tree is about to be collapsed
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeBranchCollapsingEventArgs.#ctor(System.Object,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Create a new event args
            </summary>
      <param name="model">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchCollapsingEventArgs.Model">
      <summary>
            Gets the model that is about to collapse
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchCollapsingEventArgs.Item">
      <summary>
            Gets the OLVListItem that is about to be collapsed
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TreeBranchCollapsedEventArgs">
      <summary>
            This event argument block is used when a branch of a tree has just been collapsed
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TreeBranchCollapsedEventArgs.#ctor(System.Object,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Create a new event args
            </summary>
      <param name="model">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchCollapsedEventArgs.Model">
      <summary>
            Gets the model that is was collapsed
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TreeBranchCollapsedEventArgs.Item">
      <summary>
            Gets the OLVListItem that was collapsed
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FastObjectListView">
      <summary>
            A FastObjectListView trades function for speed.
            </summary>
      <remarks>
        <para>On my mid-range laptop, this view builds a list of 10,000 objects in 0.1 seconds,
            as opposed to a normal ObjectListView which takes 10-15 seconds. Lists of up to 50,000 items should be
            able to be handled with sub-second response times even on low end machines.</para>
        <para>
            A FastObjectListView is implemented as a virtual list with many of the virtual modes limits (e.g. no sorting)
            fixed through coding. There are some functions that simply cannot be provided. Specifically, a FastObjectListView cannot:
            <list type="bullet"><item><description>use Tile view</description></item><item><description>show groups on XP</description></item></list></para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListView.#ctor">
      <summary>
            Make a FastObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListView.Unsort">
      <summary>
            Remove any sorting and revert to the given order of the model objects
            </summary>
      <remarks>To be really honest, Unsort() doesn't work on FastObjectListViews since
            the original ordering of model objects is lost when Sort() is called. So this method
            effectively just turns off sorting.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FastObjectListView.FilteredObjects">
      <summary>
            Gets the collection of objects that survive any filtering that may be in place.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FastObjectListView.Objects">
      <summary>
            Get/set the collection of objects that this list will show
            </summary>
      <remarks>
        <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
        <para>This method preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code and performance is O(n) where n is the number of selected rows.</para>
        <para>This method is not thread safe.</para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.FastDataListView">
      <summary>
            A FastDataListView virtualizes the display of data from a DataSource. It operates on
            DataSets and DataTables in the same way as a DataListView, but does so much more efficiently.
            </summary>
      <remarks>
        <para>
            A FastDataListView still has to load all its data from the DataSource. If you have SQL statement
            that returns 1 million rows, all 1 million rows will still need to read from the database.
            However, once the rows are loaded, the FastDataListView will only build rows as they are displayed.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.FastDataListView.CreateDataSourceAdapter">
      <summary>
            Create the DataSourceAdapter that this control will use.
            </summary>
      <returns>A DataSourceAdapter configured for this list</returns>
      <remarks>Subclasses should overrride this to create their
            own specialized adapters</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FastDataListView.DataSource">
      <summary>
            Get or set the VirtualListDataSource that will be displayed in this list view.
            </summary>
      <remarks>The VirtualListDataSource should implement either <see cref="T:System.Collections.IList" />, <see cref="T:System.ComponentModel.IBindingList" />,
            or <see cref="T:System.ComponentModel.IListSource" />. Some common examples are the following types of objects:
            <list type="unordered"><item><description><see cref="T:System.Data.DataView" /></description></item><item><description><see cref="T:System.Data.DataTable" /></description></item><item><description><see cref="T:System.Data.DataSet" /></description></item><item><description><see cref="T:System.Data.DataViewManager" /></description></item><item><description><see cref="T:System.Windows.Forms.BindingSource" /></description></item></list><para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource" /> interface, such as <see cref="T:System.Data.DataSet" />)
            you must also set the <see cref="P:BrightIdeasSoftware.FastDataListView.DataMember" /> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:BrightIdeasSoftware.FastDataListView.DataMember" /> property even when
            VirtualListDataSource refers to a list, since <see cref="P:BrightIdeasSoftware.FastDataListView.DataMember" /> can
            also be used to navigate relations between lists.</para></remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FastDataListView.DataMember">
      <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
      <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.FastDataListView.Adapter">
      <summary>
            Gets or sets the DataSourceAdaptor that does the bulk of the work needed
            for data binding.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ICluster">
      <summary>
            A cluster is a like collection of objects that can be usefully filtered
            as whole using the filtering UI provided by the ObjectListView.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ICluster.Count">
      <summary>
            Gets or sets how many items belong to this cluster
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ICluster.DisplayLabel">
      <summary>
            Gets or sets the label that will be shown to the user to represent
            this cluster
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ICluster.ClusterKey">
      <summary>
            Gets or sets the actual data object that all members of this cluster
            have commonly returned.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.Cluster">
      <summary>
            Concrete implementation of the ICluster interface.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.Cluster.#ctor(System.Object)">
      <summary>
            Create a cluster
            </summary>
      <param name="key">The key for the cluster</param>
    </member>
    <member name="M:BrightIdeasSoftware.Cluster.ToString">
      <summary>
            Return a string representation of this cluster
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Cluster.CompareTo(System.Object)">
      <summary>
            Return an indication of the ordering between this object and the given one
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.Cluster.Count">
      <summary>
            Gets or sets how many items belong to this cluster
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.Cluster.DisplayLabel">
      <summary>
            Gets or sets the label that will be shown to the user to represent
            this cluster
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.Cluster.ClusterKey">
      <summary>
            Gets or sets the actual data object that all members of this cluster
            have commonly returned.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ClustersFromGroupsStrategy">
      <summary>
            This class calculates clusters from the groups that the column uses.
            </summary>
      <remarks>
        <para>
            This is the default strategy for all non-date, filterable columns.
            </para>
        <para>
            This class does not strictly mimic the groups created by the given column.
            In particular, if the programmer changes the default grouping technique
            by listening for grouping events, this class will not mimic that behaviour.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ClustersFromGroupsStrategy.GetClusterKey(System.Object)">
      <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ClustersFromGroupsStrategy.GetClusterDisplayLabel(BrightIdeasSoftware.ICluster)">
      <summary>
            Gets the display label that the given cluster should use
            </summary>
      <param name="cluster">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractVirtualListDataSource">
      <summary>
            A do-nothing implementation of the VirtualListDataSource interface.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.AbstractVirtualListDataSource.listView">
      <summary>
            The list view that this data source is giving information to.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.#ctor(BrightIdeasSoftware.VirtualObjectListView)">
      <summary>
            Creates an AbstractVirtualListDataSource
            </summary>
      <param name="listView">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.GetNthObject(System.Int32)">
      <summary>
      </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.GetObjectCount">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.GetObjectIndex(System.Object)">
      <summary>
      </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.PrepareCache(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.SearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.Sort(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
      </summary>
      <param name="column">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.AddObjects(System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.RemoveObjects(System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.SetObjects(System.Collections.IEnumerable)">
      <summary>
      </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.DefaultSearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn,BrightIdeasSoftware.IVirtualListDataSource)">
      <summary>
            This is a useful default implementation of SearchText method, intended to be called
            by implementors of IVirtualListDataSource.
            </summary>
      <param name="value">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualListDataSource.ApplyFilters(BrightIdeasSoftware.IModelFilter,BrightIdeasSoftware.IListFilter)">
      <summary>
      </summary>
      <param name="modelFilter">
      </param>
      <param name="listFilter">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.FastObjectListDataSource">
      <summary>
            Provide a data source for a FastObjectListView
            </summary>
      <remarks>
            This class isn't intended to be used directly, but it is left as a public
            class just in case someone wants to subclass it.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.#ctor(BrightIdeasSoftware.FastObjectListView)">
      <summary>
            Create a FastObjectListDataSource
            </summary>
      <param name="listView">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.GetNthObject(System.Int32)">
      <summary>
            Get n'th object
            </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.GetObjectCount">
      <summary>
            How many items are in the data source
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.GetObjectIndex(System.Object)">
      <summary>
            Get the index of the given model
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.SearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
      </summary>
      <param name="text">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.Sort(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
      </summary>
      <param name="column">
      </param>
      <param name="sortOrder">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.AddObjects(System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.RemoveObjects(System.Collections.ICollection)">
      <summary>
            Remove the given collection of models from this source.
            </summary>
      <param name="modelObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.SetObjects(System.Collections.IEnumerable)">
      <summary>
      </summary>
      <param name="collection">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.ApplyFilters(BrightIdeasSoftware.IModelFilter,BrightIdeasSoftware.IListFilter)">
      <summary>
            Apply the given filters to this data source. One or both may be null.
            </summary>
      <param name="iModelFilter">
      </param>
      <param name="iListFilter">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.RebuildIndexMap">
      <summary>
            Rebuild the map that remembers which model object is displayed at which line
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FastObjectListDataSource.FilterObjects">
      <summary>
            Build our filtered list from our full list.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FastObjectListDataSource.ObjectList">
      <summary>
            Gets the full list of objects being used for this fast list. 
            This list is unfiltered.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FastObjectListDataSource.FilteredObjectList">
      <summary>
            Gets the list of objects from ObjectList which survive any installed filters.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FilterMenuBuilder">
      <summary>
            Instances of this class know how to build a Filter menu.
            It is responsible for clustering the values in the target column,
            build a menu that shows those clusters, and then constructing
            a filter that will enact the users choices.
            </summary>
      <remarks>
            Almost all of the methods in this class are declared as "virtual protected"
            so that subclasses can provide alternative behaviours.
            </remarks>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.APPLY_LABEL">
      <summary>
            Gets or sets the string that labels the Apply button.
            Exposed so it can be localized.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.CLEAR_ALL_FILTERS_LABEL">
      <summary>
            Gets or sets the string that labels the Clear All menu item.
            Exposed so it can be localized.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.FILTERING_LABEL">
      <summary>
            Gets or sets the string that labels the Filtering menu as a whole..
            Exposed so it can be localized.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.SELECT_ALL_LABEL">
      <summary>
            Gets or sets the string that represents Select All values.
            If this is set to null or empty, no Select All option will be included.
            Exposed so it can be localized.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.ClearFilteringImage">
      <summary>
            Gets or sets the image that will be placed next to the Clear Filtering menu item
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.FilterMenuBuilder.FilteringImage">
      <summary>
            Gets or sets the image that will be placed next to all "Apply" menu items on the filtering menu
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.MakeFilterMenu(System.Windows.Forms.ToolStripDropDown,BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Create a Filter menu on the given tool tip for the given column in the given ObjectListView.
            </summary>
      <remarks>This is the main entry point into this class.</remarks>
      <param name="strip">
      </param>
      <param name="listView">
      </param>
      <param name="column">
      </param>
      <returns>The strip that should be shown to the user</returns>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.Cluster(BrightIdeasSoftware.IClusteringStrategy,BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Create a collection of clusters that should be presented to the user
            </summary>
      <param name="strategy">
      </param>
      <param name="listView">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.SortClusters(BrightIdeasSoftware.IClusteringStrategy,System.Collections.Generic.List{BrightIdeasSoftware.ICluster})">
      <summary>
            Order the given list of clusters in the manner in which they should be presented to the user.
            </summary>
      <param name="strategy">
      </param>
      <param name="clusters">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.CreateFilteringMenuItem(BrightIdeasSoftware.OLVColumn,System.Collections.Generic.List{BrightIdeasSoftware.ICluster})">
      <summary>
            Do the work of making a menu that shows the clusters to the users
            </summary>
      <param name="column">
      </param>
      <param name="clusters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.HandleItemCheckedWrapped(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
      <summary>
            Wrap a protected section around the real HandleItemChecked method, so that if
            that method tries to change a "checkedness" of an item, we don't get a recursive 
            stack error. Effectively, this ensure that HandleItemChecked is only called
            in response to a user action.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.HandleItemChecked(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
      <summary>
            Handle a user-generated ItemCheck event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.HandleSelectAllItem(System.Windows.Forms.ItemCheckEventArgs,BrightIdeasSoftware.ToolStripCheckedListBox,System.Int32)">
      <summary>
            Handle any checking/unchecking of the Select All option, and keep
            its checkedness in sync with everything else that is checked.
            </summary>
      <param name="e">
      </param>
      <param name="checkedList">
      </param>
      <param name="selectAllIndex">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.ClearAllFilters(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Clear all the filters that are applied to the given column
            </summary>
      <param name="column">The column from which filters are to be removed</param>
    </member>
    <member name="M:BrightIdeasSoftware.FilterMenuBuilder.EnactFilter(BrightIdeasSoftware.ToolStripCheckedListBox,BrightIdeasSoftware.OLVColumn)">
      <summary>
            Apply the selected values from the given list as a filter on the given column
            </summary>
      <param name="checkedList">A list in which the checked items should be used as filters</param>
      <param name="column">The column for which a filter should be generated</param>
    </member>
    <member name="P:BrightIdeasSoftware.FilterMenuBuilder.TreatNullAsDataValue">
      <summary>
            Gets or sets whether null should be considered as a valid data value.
            If this is true (the default), then a cluster will null as a key will be allow.
            If this is false, object that return a cluster key of null will ignored.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.FilterMenuBuilder.MaxObjectsToConsider">
      <summary>
            Gets or sets the maximum number of objects that the clustering strategy
            will consider. This should be large enough to collect all unique clusters,
            but small enough to finish in a reasonable time.
            </summary>
      <remarks>The default value is 10,000. This should be perfectly
            acceptable for almost all lists.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.IListFilter">
      <summary>
            Interface for whole list filtering
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IListFilter.Filter(System.Collections.IEnumerable)">
      <summary>
            Return a subset of the given list of model objects as the new
            contents of the ObjectListView
            </summary>
      <param name="modelObjects">The collection of model objects that the list will possibly display</param>
      <returns>The filtered collection that holds the model objects that will be displayed.</returns>
    </member>
    <member name="T:BrightIdeasSoftware.ModelFilter">
      <summary>
            This filter calls a given Predicate to decide if a model object should be included
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ModelFilter.#ctor(System.Predicate{System.Object})">
      <summary>
            Create a filter based on the given predicate
            </summary>
      <param name="predicate">The function that will filter objects</param>
    </member>
    <member name="M:BrightIdeasSoftware.ModelFilter.Filter(System.Object)">
      <summary>
            Should the given model object be included?
            </summary>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.ModelFilter.Predicate">
      <summary>
            Gets or sets the predicate used to filter model objects
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CompositeFilter">
      <summary>
            A CompositeFilter joins several other filters together.
            If there are no filters, all model objects are included
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeFilter.#ctor">
      <summary>
            Create an empty filter
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeFilter.#ctor(System.Collections.Generic.IEnumerable{BrightIdeasSoftware.IModelFilter})">
      <summary>
            Create a composite filter from the given list of filters
            </summary>
      <param name="filters">A list of filters</param>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeFilter.Filter(System.Object)">
      <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
      <param name="modelObject">
      </param>
      <returns>True if the object is included by the filter</returns>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeFilter.FilterObject(System.Object)">
      <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
      <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
      <param name="modelObject">The model object under consideration</param>
      <returns>True if the object is included by the filter</returns>
    </member>
    <member name="P:BrightIdeasSoftware.CompositeFilter.Filters">
      <summary>
            Gets or sets the filters used by this composite
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CompositeAllFilter">
      <summary>
            A CompositeAllFilter joins several other filters together.
            A model object must satisfy all filters to be included.
            If there are no filters, all model objects are included
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeAllFilter.#ctor(System.Collections.Generic.List{BrightIdeasSoftware.IModelFilter})">
      <summary>
            Create a filter
            </summary>
      <param name="filters">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeAllFilter.FilterObject(System.Object)">
      <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
      <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
      <param name="modelObject">The model object under consideration</param>
      <returns>True if the object is included by the filter</returns>
    </member>
    <member name="T:BrightIdeasSoftware.CompositeAnyFilter">
      <summary>
            A CompositeAllFilter joins several other filters together.
            A model object must only satisfy one of the filters to be included.
            If there are no filters, all model objects are included
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeAnyFilter.#ctor(System.Collections.Generic.List{BrightIdeasSoftware.IModelFilter})">
      <summary>
            Create a filter from the given filters
            </summary>
      <param name="filters">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CompositeAnyFilter.FilterObject(System.Object)">
      <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
      <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
      <param name="modelObject">The model object under consideration</param>
      <returns>True if the object is included by the filter</returns>
    </member>
    <member name="T:BrightIdeasSoftware.OneOfFilter">
      <summary>
            Instances of this class extract a value from the model object
            and compare that value to a list of fixed values. The model
            object is included if the extracted value is in the list
            </summary>
      <remarks>If there is no delegate installed or there are
            no values to match, no model objects will be matched</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OneOfFilter.#ctor(BrightIdeasSoftware.AspectGetterDelegate)">
      <summary>
            Create a filter that will use the given delegate to extract values
            </summary>
      <param name="valueGetter">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OneOfFilter.#ctor(BrightIdeasSoftware.AspectGetterDelegate,System.Collections.ICollection)">
      <summary>
            Create a filter that will extract values using the given delegate
            and compare them to the values in the given list.
            </summary>
      <param name="valueGetter">
      </param>
      <param name="possibleValues">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OneOfFilter.Filter(System.Object)">
      <summary>
            Should the given model object be included?
            </summary>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OneOfFilter.DoesValueMatch(System.Object)">
      <summary>
            Decides if the given property is a match for the values in the PossibleValues collection
            </summary>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.OneOfFilter.ValueGetter">
      <summary>
            Gets or sets the delegate that will be used to extract values
            from model objects
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OneOfFilter.PossibleValues">
      <summary>
            Gets or sets the list of values that the value extracted from
            the model object must match in order to be included.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FlagBitSetFilter">
      <summary>
            Instances of this class match a property of a model objects against
            a list of bit flags. The property should be an xor-ed collection
            of bits flags.
            </summary>
      <remarks>Both the property compared and the list of possible values 
            must be convertible to ulongs.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.FlagBitSetFilter.#ctor(BrightIdeasSoftware.AspectGetterDelegate,System.Collections.ICollection)">
      <summary>
            Create an instance
            </summary>
      <param name="valueGetter">
      </param>
      <param name="possibleValues">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FlagBitSetFilter.DoesValueMatch(System.Object)">
      <summary>
            Decides if the given property is a match for the values in the PossibleValues collection
            </summary>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.FlagBitSetFilter.PossibleValues">
      <summary>
            Gets or sets the collection of values that will be matched.
            These must be ulongs (or convertible to ulongs).
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractListFilter">
      <summary>
            Base class for whole list filters
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractListFilter.Filter(System.Collections.IEnumerable)">
      <summary>
            Return a subset of the given list of model objects as the new
            contents of the ObjectListView
            </summary>
      <param name="modelObjects">The collection of model objects that the list will possibly display</param>
      <returns>The filtered collection that holds the model objects that will be displayed.</returns>
    </member>
    <member name="T:BrightIdeasSoftware.ListFilter">
      <summary>
            Instance of this class implement delegate based whole list filtering
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ListFilter.ListFilterDelegate">
      <summary>
            A delegate that filters on a whole list
            </summary>
      <param name="rowObjects">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ListFilter.#ctor(BrightIdeasSoftware.ListFilter.ListFilterDelegate)">
      <summary>
            Create a ListFilter
            </summary>
      <param name="function">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ListFilter.Filter(System.Collections.IEnumerable)">
      <summary>
            Do the actual work of filtering
            </summary>
      <param name="modelObjects">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.ListFilter.Function">
      <summary>
            Gets or sets the delegate that will filter the list
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TailFilter">
      <summary>
            Filter the list so only the last N entries are displayed
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TailFilter.#ctor">
      <summary>
            Create a no-op tail filter
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TailFilter.#ctor(System.Int32)">
      <summary>
            Create a filter that includes on the last N model objects
            </summary>
      <param name="numberOfObjects">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TailFilter.Filter(System.Collections.IEnumerable)">
      <summary>
            Return the last N subset of the model objects
            </summary>
      <param name="modelObjects">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.TailFilter.Count">
      <summary>
            Gets or sets the number of model objects that will be 
            returned from the tail of the list
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ToolStripCheckedListBox">
      <summary>
            Instances of this class put a CheckedListBox into a tool strip menu item.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.#ctor">
      <summary>
            Create a ToolStripCheckedListBox
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.AddItem(System.Object,System.Boolean)">
      <summary>
            Add a possibly checked item to the control
            </summary>
      <param name="item">
      </param>
      <param name="isChecked">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.AddItem(System.Object,System.Windows.Forms.CheckState)">
      <summary>
            Add an item with the given state to the control
            </summary>
      <param name="item">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.GetItemCheckState(System.Int32)">
      <summary>
            Gets the checkedness of the i'th item
            </summary>
      <param name="i">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.SetItemState(System.Int32,System.Windows.Forms.CheckState)">
      <summary>
            Set the checkedness of the i'th item
            </summary>
      <param name="i">
      </param>
      <param name="checkState">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.CheckAll">
      <summary>
            Check all the items in the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.UncheckAll">
      <summary>
            Unchecked all the items in the control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.OnSubscribeControlEvents(System.Windows.Forms.Control)">
      <summary>
            Listen for events on the underlying control
            </summary>
      <param name="c">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
      <summary>
            Stop listening for events on the underlying control
            </summary>
      <param name="c">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolStripCheckedListBox.OnItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
      <summary>
            Trigger the ItemCheck event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.ToolStripCheckedListBox.CheckedListBoxControl">
      <summary>
            Gets the control embedded in the menu
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolStripCheckedListBox.Items">
      <summary>
            Gets the items shown in the checkedlistbox
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolStripCheckedListBox.CheckedOnClick">
      <summary>
            Gets or sets whether an item should be checked when it is clicked
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolStripCheckedListBox.CheckedItems">
      <summary>
            Gets a collection of the checked items
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ToolStripCheckedListBox.ItemCheck">
      <summary>
            Tell the world that an item was checked
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ColumnSelectionForm">
      <summary>
            This form is an example of how an application could allows the user to select which columns 
            an ObjectListView will display, as well as select which order the columns are displayed in.
            </summary>
      <remarks>
        <para>In Tile view, ColumnHeader.DisplayIndex does nothing. To reorder the columns you have
            to change the order of objects in the Columns property.</para>
        <para>Remember that the first column is special!
            It has to remain the first column.</para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.ColumnSelectionForm.SortByDisplayOrder">
      <summary>
            A Comparer that will sort a list of columns so that visible ones come before hidden ones,
            and that are ordered by their display order.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ColumnSelectionForm.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.#ctor">
      <summary>
            Make a new ColumnSelectionForm
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.OpenOn(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Open this form so it will edit the columns that are available in the listview's current view
            </summary>
      <param name="olv">The ObjectListView whose columns are to be altered</param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.OpenOn(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.View)">
      <summary>
            Open this form so it will edit the columns that are available in the given listview
            when the listview is showing the given type of view.
            </summary>
      <param name="olv">The ObjectListView whose columns are to be altered</param>
      <param name="view">The view that is to be altered. Must be View.Details or View.Tile</param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.InitializeForm(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.View)">
      <summary>
            Initialize the form to show the columns of the given view
            </summary>
      <param name="olv">
      </param>
      <param name="view">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.Apply(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.View)">
      <summary>
            The user has pressed OK. Do what's requied.
            </summary>
      <param name="olv">
      </param>
      <param name="view">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.EnableControls">
      <summary>
            Enable the controls on the dialog to match the current state
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnSelectionForm.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IGenerator">
      <summary>
            An object that implements the IGenerator interface provides the ability 
            to dynamically create columns
            for an ObjectListView based on the characteristics of a given collection
            of model objects.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IGenerator.GenerateAndReplaceColumns(BrightIdeasSoftware.ObjectListView,System.Type,System.Boolean)">
      <summary>
            Generate columns into the given ObjectListView that come from the given 
            model object type. 
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="type">The model type whose attributes will be considered.</param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
    </member>
    <member name="M:BrightIdeasSoftware.IGenerator.GenerateColumns(System.Type,System.Boolean)">
      <summary>
            Generate a list of OLVColumns based on the attributes of the given type
            If allProperties to true, all public properties will have a matching column generated.
            If allProperties is false, only properties that have a OLVColumn attribute will have a column generated.
            </summary>
      <param name="type">
      </param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
      <returns>A collection of OLVColumns matching the attributes of Type that have OLVColumnAttributes.</returns>
    </member>
    <member name="T:BrightIdeasSoftware.Generator">
      <summary>
            The Generator class provides methods to dynamically create columns
            for an ObjectListView based on the characteristics of a given collection
            of model objects.
            </summary>
      <remarks>
        <para>For a given type, a Generator can create columns to match the public properties
            of that type. The generator can consider all public properties or only those public properties marked with
            [OLVColumn] attribute.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(BrightIdeasSoftware.ObjectListView,System.Collections.IEnumerable)">
      <summary>
            Replace all columns of the given ObjectListView with columns generated
            from the first member of the given enumerable. If the enumerable is 
            empty or null, the ObjectListView will be cleared.
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="enumerable">The collection whose first element will be used to generate columns.</param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(BrightIdeasSoftware.ObjectListView,System.Collections.IEnumerable,System.Boolean)">
      <summary>
            Replace all columns of the given ObjectListView with columns generated
            from the first member of the given enumerable. If the enumerable is 
            empty or null, the ObjectListView will be cleared.
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="enumerable">The collection whose first element will be used to generate columns.</param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(BrightIdeasSoftware.ObjectListView,System.Type)">
      <summary>
            Generate columns into the given ObjectListView that come from the public properties of the given 
            model object type. 
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="type">The model type whose attributes will be considered.</param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(BrightIdeasSoftware.ObjectListView,System.Type,System.Boolean)">
      <summary>
            Generate columns into the given ObjectListView that come from the public properties of the given 
            model object type. 
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="type">The model type whose attributes will be considered.</param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(System.Type)">
      <summary>
            Generate a list of OLVColumns based on the public properties of the given type
            that have a OLVColumn attribute.
            </summary>
      <param name="type">
      </param>
      <returns>A collection of OLVColumns matching the attributes of Type that have OLVColumnAttributes.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateAndReplaceColumns(BrightIdeasSoftware.ObjectListView,System.Type,System.Boolean)">
      <summary>
            Generate columns into the given ObjectListView that come from the given 
            model object type. 
            </summary>
      <param name="olv">The ObjectListView to modify</param>
      <param name="type">The model type whose attributes will be considered.</param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateColumns(System.Type,System.Boolean)">
      <summary>
            Generate a list of OLVColumns based on the attributes of the given type
            If allProperties to true, all public properties will have a matching column generated.
            If allProperties is false, only properties that have a OLVColumn attribute will have a column generated.
            </summary>
      <param name="type">
      </param>
      <param name="allProperties">Will columns be generated for properties that are not marked with [OLVColumn].</param>
      <returns>A collection of OLVColumns matching the attributes of Type that have OLVColumnAttributes.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.ReplaceColumns(BrightIdeasSoftware.ObjectListView,System.Collections.Generic.IList{BrightIdeasSoftware.OLVColumn})">
      <summary>
            Replace all the columns in the given listview with the given list of columns.
            </summary>
      <param name="olv">
      </param>
      <param name="columns">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.PostCreateColumns(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Post process columns after creating them and adding them to the AllColumns collection.
            </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.MakeColumnFromAttribute(System.Reflection.PropertyInfo,BrightIdeasSoftware.OLVColumnAttribute)">
      <summary>
            Create a column from the given PropertyInfo and OLVColumn attribute
            </summary>
      <param name="pinfo">
      </param>
      <param name="attr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.MakeColumnFromPropertyInfo(System.Reflection.PropertyInfo)">
      <summary>
            Make a column from the given PropertyInfo
            </summary>
      <param name="pinfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.MakeColumnFromPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Make a column from the given PropertyDescriptor
            </summary>
      <param name="pd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.MakeColumn(System.String,System.String,System.Boolean,System.Type,BrightIdeasSoftware.OLVColumnAttribute)">
      <summary>
      </summary>
      <param name="aspectName">
      </param>
      <param name="title">
      </param>
      <param name="editable">
      </param>
      <param name="propertyType">
      </param>
      <param name="attr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.MakeColumn(System.String,System.String,BrightIdeasSoftware.OLVColumnAttribute)">
      <summary>
            Create a column.
            </summary>
      <param name="aspectName">
      </param>
      <param name="title">
      </param>
      <param name="attr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.DisplayNameToColumnTitle(System.String)">
      <summary>
            Convert a property name to a displayable title.
            </summary>
      <param name="displayName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.ConfigurePossibleBooleanColumn(BrightIdeasSoftware.OLVColumn,System.Type)">
      <summary>
            Configure the given column to show a checkbox if appropriate
            </summary>
      <param name="column">
      </param>
      <param name="propertyType">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.TryGenerateChildrenDelegates(BrightIdeasSoftware.TreeListView,System.Type)">
      <summary>
            If this given type has an property marked with [OLVChildren], make delegates that will
            traverse that property as the children of an instance of the model
            </summary>
      <param name="tlv">
      </param>
      <param name="type">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Generator.GenerateChildrenDelegates(BrightIdeasSoftware.TreeListView,System.Reflection.PropertyInfo)">
      <summary>
            Generate CanExpand and ChildrenGetter delegates from the given property.
            </summary>
      <param name="tlv">
      </param>
      <param name="pinfo">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.Generator.Instance">
      <summary>
            Gets or sets the actual generator used by the static convinence methods.
            </summary>
      <remarks>If you subclass the standard generator or implement IGenerator yourself, 
            you should install an instance of your subclass/implementation here.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.GlassPanelForm">
      <summary>
            A GlassPanelForm sits transparently over an ObjectListView to show overlays.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Bind(BrightIdeasSoftware.ObjectListView,BrightIdeasSoftware.IOverlay)">
      <summary>
            Attach this form to the given ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.HideGlass">
      <summary>
            Made the overlay panel invisible
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.ShowGlass">
      <summary>
            Show the overlay panel in its correctly location
            </summary>
      <remarks>
            If the panel is always shown, this method does nothing.
            If the panel is being resized, this method also does nothing.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Unbind">
      <summary>
            Detach this glass panel from its previous ObjectListView
            </summary>
      <remarks>
            You should unbind the overlay panel before making any changes to the 
            widget hierarchy.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Owner_ResizeBegin(System.Object,System.EventArgs)">
      <summary>
            Handle when the form that owns the ObjectListView begins to be resized
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Owner_ResizeEnd(System.Object,System.EventArgs)">
      <summary>
            Handle when the form that owns the ObjectListView finished to be resized
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Owner_LocationChanged(System.Object,System.EventArgs)">
      <summary>
            The owning form has moved. Move the overlay panel too.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.Owner_SizeChanged(System.Object,System.EventArgs)">
      <summary>
            The owning form is resizing. Hide our overlay panel until the resizing stops
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.objectListView_LocationChanged(System.Object,System.EventArgs)">
      <summary>
            Handle when the bound OLV changes its location. The overlay panel must 
            be moved too, IFF it is currently visible.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.objectListView_SizeChanged(System.Object,System.EventArgs)">
      <summary>
            Handle when the bound OLV changes size. The overlay panel must 
            resize too, IFF it is currently visible.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.tabControl_Selected(System.Object,System.Windows.Forms.TabControlEventArgs)">
      <summary>
            Handle when the bound OLV is part of a TabControl and that
            TabControl changes tabs. The overlay panel is hidden. The
            first time the bound OLV is redrawn, the overlay panel will
            be shown again.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.objectListView_ParentChanged(System.Object,System.EventArgs)">
      <summary>
            Somewhere the parent of the bound OLV has changed. Update
            our events.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.GlassPanelForm.objectListView_VisibleChanged(System.Object,System.EventArgs)">
      <summary>
            Handle when the bound OLV changes its visibility.
            The overlay panel should match the OLV's visibility.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.GlassPanelForm.CreateParams">
      <summary>
            Get the low-level windows flag that will be given to CreateWindow.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupState">
      <summary>
            These values indicate what is the state of the group. These values
            are taken directly from the SDK and many are not used by ObjectListView.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_NORMAL">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_COLLAPSED">
      <summary>
            Collapsed
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_HIDDEN">
      <summary>
            Hidden
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_NOHEADER">
      <summary>
            NoHeader
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_COLLAPSIBLE">
      <summary>
            Can be collapsed
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_FOCUSED">
      <summary>
            Has focus
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_SELECTED">
      <summary>
            Is Selected
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_SUBSETED">
      <summary>
            Is subsetted
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_SUBSETLINKFOCUSED">
      <summary>
            Subset link has focus
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupState.LVGS_ALL">
      <summary>
            All styles
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupMask">
      <summary>
            This mask indicates which members of a LVGROUP have valid data. These values
            are taken directly from the SDK and many are not used by ObjectListView.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_NONE">
      <summary>
            No mask
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_HEADER">
      <summary>
            Group has header
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_FOOTER">
      <summary>
            Group has footer
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_STATE">
      <summary>
            Group has state
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_ALIGN">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_GROUPID">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_SUBTITLE">
      <summary>
            pszSubtitle is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_TASK">
      <summary>
            pszTask is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_DESCRIPTIONTOP">
      <summary>
            pszDescriptionTop is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_DESCRIPTIONBOTTOM">
      <summary>
            pszDescriptionBottom is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_TITLEIMAGE">
      <summary>
            iTitleImage is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_EXTENDEDIMAGE">
      <summary>
            iExtendedImage is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_ITEMS">
      <summary>
            iFirstItem and cItems are valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_SUBSET">
      <summary>
            pszSubsetTitle is valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMask.LVGF_SUBSETITEMS">
      <summary>
            readonly, cItems holds count of items in visible subset, iFirstItem is valid
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.GroupMetricsMask">
      <summary>
            This mask indicates which members of a GROUPMETRICS structure are valid
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMetricsMask.LVGMF_NONE">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMetricsMask.LVGMF_BORDERSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMetricsMask.LVGMF_BORDERCOLOR">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.GroupMetricsMask.LVGMF_TEXTCOLOR">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVGroup">
      <summary>
            Instances of this class enhance the capabilities of a normal ListViewGroup,
            enabling the functionality that was released in v6 of the common controls.
            </summary>
      <remarks>
        <para>
            In this implementation (2009-09), these objects are essentially passive.
            Setting properties does not automatically change the associated group in
            the listview. Collapsed and Collapsible are two exceptions to this and 
            give immediate results.
            </para>
        <para>
            This really should be a subclass of ListViewGroup, but that class is 
            sealed (why is that?). So this class provides the same interface as a
            ListViewGroup, plus many other new properties.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.#ctor">
      <summary>
            Create an OLVGroup
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.#ctor(System.String)">
      <summary>
            Create a group with the given title
            </summary>
      <param name="header">Title of the group</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.GetImageIndex(System.Object)">
      <summary>
            Calculate the index into the group image list of the given image selector
            </summary>
      <param name="imageSelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.ToString">
      <summary>
            Convert this object to a string representation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.InsertGroupNewStyle(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Insert a native group into the underlying Windows control,
            *without* using a ListViewGroup
            </summary>
      <param name="olv">
      </param>
      <remarks>This is used when creating virtual groups</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.InsertGroupOldStyle(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Insert a native group into the underlying control via a ListViewGroup
            </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.SetItemsOldStyle">
      <summary>
            Change the members of the group to match the current contents of Items,
            using a ListViewGroup
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.AsNativeGroup(System.Boolean)">
      <summary>
            Create a native LVGROUP structure that matches this group
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.GetState">
      <summary>
            Get the current state of this group from the underlying control
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroup.SetState(BrightIdeasSoftware.GroupState,BrightIdeasSoftware.GroupState)">
      <summary>
            Get the current state of this group from the underlying control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.BottomDescription">
      <summary>
            Gets or sets the bottom description of the group
            </summary>
      <remarks>
            Descriptions only appear when group is centered and there is a title image
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Collapsed">
      <summary>
            Gets or sets whether or not this group is collapsed
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Collapsible">
      <summary>
            Gets or sets whether or not this group can be collapsed
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Contents">
      <summary>
            Gets or sets some representation of the contents of this group
            </summary>
      <remarks>This is user defined (like Tag)</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Created">
      <summary>
            Gets whether this group has been created.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.ExtendedImage">
      <summary>
            Gets or sets the int or string that will select the extended image to be shown against the title
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Footer">
      <summary>
            Gets or sets the footer of the group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.GroupId">
      <summary>
            Gets the internal id of our associated ListViewGroup.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Header">
      <summary>
            Gets or sets the header of the group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.HeaderAlignment">
      <summary>
            Gets or sets the horizontal alignment of the group header
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Id">
      <summary>
            Gets or sets the internally created id of the group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Items">
      <summary>
            Gets or sets ListViewItems that are members of this group
            </summary>
      <remarks>Listener of the BeforeCreatingGroups event can populate this collection.
            It is only used on non-virtual lists.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Key">
      <summary>
            Gets or sets the key that was used to partition objects into this group
            </summary>
      <remarks>This is user defined (like Tag)</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.ListView">
      <summary>
            Gets the ObjectListView that this group belongs to
            </summary>
      <remarks>If this is null, the group has not yet been created.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Name">
      <summary>
            Gets or sets the name of the group
            </summary>
      <remarks>As of 2009-09-01, this property is not used.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Focused">
      <summary>
            Gets or sets whether this group is focused
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Selected">
      <summary>
            Gets or sets whether this group is selected
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.SubsetTitle">
      <summary>
            Gets or sets the text that will show that this group is subsetted
            </summary>
      <remarks>
            As of WinSDK v7.0, subsetting of group is officially unimplemented.
            We can get around this using undocumented interfaces and may do so.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Subtitle">
      <summary>
            Gets or set the subtitleof the task
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.SortValue">
      <summary>
            Gets or sets the value by which this group will be sorted.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.State">
      <summary>
            Gets or sets the state of the group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.StateMask">
      <summary>
            Gets or sets which bits of State are valid
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Subseted">
      <summary>
            Gets or sets whether this group is showing only a subset of its elements
            </summary>
      <remarks>
            As of WinSDK v7.0, this property officially does nothing.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Tag">
      <summary>
            Gets or sets the user-defined data attached to this group
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.Task">
      <summary>
            Gets or sets the task of this group
            </summary>
      <remarks>This task is the clickable text that appears on the right margin
            of the group header.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.TitleImage">
      <summary>
            Gets or sets the int or string that will select the image to be shown against the title
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.TopDescription">
      <summary>
            Gets or sets the top description of the group
            </summary>
      <remarks>
            Descriptions only appear when group is centered and there is a title image
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.VirtualItemCount">
      <summary>
            Gets or sets the number of items that are within this group.
            </summary>
      <remarks>This should only be used for virtual groups.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVGroup.ListViewGroup">
      <summary>
            Gets or sets the ListViewGroup that is shadowed by this group.
            </summary>
      <remarks>For virtual groups, this will always be null.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.HeaderControl">
      <summary>
            Class used to capture window messages for the header of the list view
            control.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create a header control for the given ObjectListView.
            </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.CalculateHeight(System.Drawing.Graphics)">
      <summary>
            Calculate how height the header needs to be
            </summary>
      <returns>Height in pixels</returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HasSortIndicator(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Should the given column show a sort indicator?
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HasFilterIndicator(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Should the given column be drawn with a filter indicator against it?
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HasNonThemedSortIndicator(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Should the given column show a non-themed sort indicator?
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.GetItemRect(System.Int32)">
      <summary>
            Return the bounds of the item with the given index
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.Invalidate">
      <summary>
            Force the header to redraw by invalidating it
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.CreateToolTip">
      <summary>
            Create a native tool tip control for this listview
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Override the basic message pump
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleSetCursor(System.Windows.Forms.Message@)">
      <summary>
            Handle the SetCursor windows message
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleMouseMove(System.Windows.Forms.Message@)">
      <summary>
            Handle the MouseMove windows message
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleNotify(System.Windows.Forms.Message@)">
      <summary>
            Handle the Notify windows message
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleHeaderCustomDraw(System.Windows.Forms.Message@)">
      <summary>
            Handle the CustomDraw windows message
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleLayout(System.Windows.Forms.Message@)">
      <summary>
            The message divides a ListView's space between the header and the rows of the listview.
            The WINDOWPOS structure controls the headers bounds, the RECT controls the listview bounds.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.HandleDestroy(System.Windows.Forms.Message@)">
      <summary>
            Handle when the underlying header control is destroyed
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.NeedsCustomDraw">
      <summary>
            Does this header need to be custom drawn?
            </summary>
      <remarks>Word wrapping and colored text require custom drawning. Funnily enough, we
            can change the font natively.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.CustomDrawHeaderCell(System.Drawing.Graphics,System.Int32,System.Int32)">
      <summary>
            Draw one cell of the header
            </summary>
      <param name="g">
      </param>
      <param name="columnIndex">
      </param>
      <param name="itemState">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawUnthemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean,BrightIdeasSoftware.HeaderStateStyle)">
      <summary>
            Draw a background for the header, without using Themes.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="columnIndex">
      </param>
      <param name="isSelected">
      </param>
      <param name="stateStyle">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawThemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean)">
      <summary>
            Draw a more-or-less pure themed header background.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="columnIndex">
      </param>
      <param name="isSelected">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawThemedSortIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw a sort indicator using themes
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawUnthemedSortIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw a sort indicator without using themes
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawFilterIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw an indication that this column has a filter applied to it
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.DrawHeaderImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVColumn,BrightIdeasSoftware.HeaderStateStyle)">
      <summary>
            Draw the header's image and text
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="column">
      </param>
      <param name="stateStyle">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.CalculateStyle(BrightIdeasSoftware.OLVColumn,System.Boolean,System.Boolean)">
      <summary>
            What style should be applied to the header?
            </summary>
      <param name="column">
      </param>
      <param name="isHot">
      </param>
      <param name="isPressed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderControl.CalculateFont(BrightIdeasSoftware.OLVColumn,System.Boolean,System.Boolean)">
      <summary>
            What font should be used to draw the header text?
            </summary>
      <param name="column">
      </param>
      <param name="isHot">
      </param>
      <param name="isPressed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.ColumnIndexUnderCursor">
      <summary>
            Return the index of the column under the current cursor position,
            or -1 if the cursor is not over a column
            </summary>
      <returns>Index of the column under the cursor, or -1</returns>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.Handle">
      <summary>
            Return the Windows handle behind this control
            </summary>
      <remarks>
            When an ObjectListView is initialized as part of a UserControl, the
            GetHeaderControl() method returns 0 until the UserControl is
            completely initialized. So the AssignHandle() call in the constructor
            doesn't work. So we override the Handle property so value is always
            current.
            </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.HotFontStyle">
      <summary>
            Gets or sets a style that should be applied to the font of the
            column's header text when the mouse is over that column
            </summary>
      <remarks>THIS IS EXPERIMENTAL. USE AT OWN RISK. August 2009</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.IsCursorOverLockedDivider">
      <summary>
            Gets whether the cursor is over a "locked" divider, i.e.
            one that cannot be dragged by the user.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.ListView">
      <summary>
            Gets or sets the listview that this header belongs to
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.MaximumHeight">
      <summary>
            Gets the maximum height of the header. -1 means no maximum.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.ToolTip">
      <summary>
            Get or set the ToolTip that shows tips for the header
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.WordWrap">
      <summary>
            Gets or sets whether the text in column headers should be word
            wrapped when it is too long to fit within the column
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderControl.TextFormatFlags">
      <summary>
            What flags will be used when drawing text
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellEditAtEdgeBehaviour">
      <summary>
            Indicates the behavior of a key when a cell "on the edge" is being edited.
            and the normal behavior of that key would exceed the edge. For example,
            for a key that normally moves one column to the left, the "edge" would be 
            the left most column, since the normal action of the key cannot be taken
            (since there are no more columns to the left).
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditAtEdgeBehaviour.Ignore">
      <summary>
            The key press will be ignored
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditAtEdgeBehaviour.Wrap">
      <summary>
            The key press will result in the cell editing wrapping to the 
            cell on the opposite edge.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditAtEdgeBehaviour.ChangeColumn">
      <summary>
            The key press will wrap, but the column will be changed to the 
            appropiate adjacent column. This only makes sense for keys where
            the normal action is ChangeRow.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditAtEdgeBehaviour.ChangeRow">
      <summary>
            The key press will wrap, but the row will be changed to the 
            appropiate adjacent row. This only makes sense for keys where
            the normal action is ChangeColumn.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditAtEdgeBehaviour.EndEdit">
      <summary>
            The key will result in the current edit operation being ended.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellEditCharacterBehaviour">
      <summary>
            Indicates the normal behaviour of a key when used during a cell edit
            operation.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.Ignore">
      <summary>
            The key press will be ignored
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.ChangeColumnLeft">
      <summary>
            The key press will end the current edit and begin an edit
            operation on the next editable cell to the left.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.ChangeColumnRight">
      <summary>
            The key press will end the current edit and begin an edit
            operation on the next editable cell to the right.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.ChangeRowUp">
      <summary>
            The key press will end the current edit and begin an edit
            operation on the row above.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.ChangeRowDown">
      <summary>
            The key press will end the current edit and begin an edit
            operation on the row below
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CancelEdit">
      <summary>
            The key press will cancel the current edit
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.EndEdit">
      <summary>
            The key press will finish the current edit operation
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb1">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb2">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb3">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb4">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb5">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb6">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb7">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb8">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb9">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.CellEditCharacterBehaviour.CustomVerb10">
      <summary>
            Custom verb that can be used for specialized actions.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.CellEditKeyEngine">
      <summary>
            Instances of this class handle key presses during a cell edit operation.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.SetKeyBehaviour(System.Windows.Forms.Keys,BrightIdeasSoftware.CellEditCharacterBehaviour,BrightIdeasSoftware.CellEditAtEdgeBehaviour)">
      <summary>
            Sets the behaviour of a given key
            </summary>
      <param name="key">
      </param>
      <param name="normalBehaviour">
      </param>
      <param name="atEdgeBehaviour">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleKey(BrightIdeasSoftware.ObjectListView,System.Windows.Forms.Keys)">
      <summary>
            Handle a key press
            </summary>
      <param name="olv">
      </param>
      <param name="keyData">
      </param>
      <returns>True if the key was completely handled.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.InitializeCellEditKeyMaps">
      <summary>
            Setup the default key mapping
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleEndEdit">
      <summary>
            Handle the end edit command
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleCancelEdit">
      <summary>
            Handle the cancel edit command
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleCustomVerb(System.Windows.Forms.Keys,BrightIdeasSoftware.CellEditCharacterBehaviour)">
      <summary>
            Placeholder that subclasses can override to handle any custom verbs
            </summary>
      <param name="keyData">
      </param>
      <param name="behaviour">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleRowChange(System.Windows.Forms.Keys,BrightIdeasSoftware.CellEditCharacterBehaviour)">
      <summary>
            Handle a change row command
            </summary>
      <param name="keyData">
      </param>
      <param name="behaviour">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.HandleColumnChange(System.Windows.Forms.Keys,BrightIdeasSoftware.CellEditCharacterBehaviour)">
      <summary>
            Handle a change column command
            </summary>
      <param name="keyData">
      </param>
      <param name="behaviour">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.StartCellEditIfDifferent(BrightIdeasSoftware.OLVListItem,System.Int32)">
      <summary>
            Start editing the indicated cell if that cell is not already being edited
            </summary>
      <param name="olvi">The row to edit</param>
      <param name="subItemIndex">The cell within that row to edit</param>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.GetAdjacentItemOrNull(BrightIdeasSoftware.OLVListItem,System.Boolean)">
      <summary>
            Gets the adjacent item to the given item in the given direction
            </summary>
      <param name="olvi">The row whose neighbour is sought</param>
      <param name="up">The direction of the adjacentness</param>
      <returns>An OLVListView adjacent to the given item, or null if there are no more items in that direction.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.CellEditKeyEngine.GetAdjacentItem(BrightIdeasSoftware.OLVListItem,System.Boolean)">
      <summary>
            Gets the adjacent item to the given item in the given direction, wrapping if needed.
            </summary>
      <param name="olvi">The row whose neighbour is sought</param>
      <param name="up">The direction of the adjacentness</param>
      <returns>An OLVListView adjacent to the given item, or null if there are no more items in that direction.</returns>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.ListView">
      <summary>
            Gets or sets the ObjectListView on which the current key is being handled.
            This cannot be null.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.ItemBeingEdited">
      <summary>
            Gets the row of the cell that is currently being edited
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.SubItemIndexBeingEdited">
      <summary>
            Gets the index of the column of the cell that is being edited
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.CellEditKeyMap">
      <summary>
            Gets or sets the map that remembers the normal behaviour of keys
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.CellEditKeyAtEdgeBehaviourMap">
      <summary>
            Gets or sets the map that remembers the desired behaviour of keys 
            on edge cases.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellEditKeyEngine.EditableColumnsInDisplayOrder">
      <summary>
            Gets a collection of columns that are editable in the order they are shown to the user
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.Munger">
      <summary>
            An instance of Munger gets a value from or puts a value into a target object. The property
            to be peeked (or poked) is determined from a string. The peeking or poking is done using reflection.
            </summary>
      <remarks>
            Name of the aspect to be peeked can be a field, property or parameterless method. The name of an
            aspect to poke can be a field, writable property or single parameter method.
            <para>
            Aspect names can be dotted to chain a series of references. 
            </para><example>Order.Customer.HomeAddress.State</example></remarks>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.#ctor">
      <summary>
            Create a do nothing Munger
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.#ctor(System.String)">
      <summary>
            Create a Munger that works on the given aspect name
            </summary>
      <param name="aspectName">The name of the </param>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.PutProperty(System.Object,System.String,System.Object)">
      <summary>
            A helper method to put the given value into the given aspect of the given object.
            </summary>
      <remarks>This method catches and silently ignores any errors that occur
            while modifying the target object</remarks>
      <param name="target">The object to be modified</param>
      <param name="propertyName">The name of the property/field to be modified</param>
      <param name="value">The value to be assigned</param>
      <returns>Did the modification work?</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.GetValue(System.Object)">
      <summary>
            Extract the value indicated by our AspectName from the given target.
            </summary>
      <remarks>If the aspect name is null or empty, this will return null.</remarks>
      <param name="target">The object that will be peeked</param>
      <returns>The value read from the target</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.GetValueEx(System.Object)">
      <summary>
            Extract the value indicated by our AspectName from the given target, raising exceptions
            if the munger fails.
            </summary>
      <remarks>If the aspect name is null or empty, this will return null.</remarks>
      <param name="target">The object that will be peeked</param>
      <returns>The value read from the target</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.PutValue(System.Object,System.Object)">
      <summary>
            Poke the given value into the given target indicated by our AspectName.
            </summary>
      <remarks>
        <para>
            If the AspectName is a dotted path, all the selectors bar the last
            are used to find the object that should be updated, and the last
            selector is used as the property to update on that object.
            </para>
        <para>
            So, if 'target' is a Person and the AspectName is "HomeAddress.Postcode",
            this method will first fetch "HomeAddress" property, and then try to set the
            "Postcode" property on the home address object.
            </para>
      </remarks>
      <param name="target">The object that will be poked</param>
      <param name="value">The value that will be poked into the target</param>
      <returns>bool indicating whether the put worked</returns>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.BuildParts(System.String)">
      <summary>
            Convert a possibly dotted AspectName into a list of SimpleMungers
            </summary>
      <param name="aspect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Munger.EvaluateParts(System.Object,System.Collections.Generic.IList{BrightIdeasSoftware.SimpleMunger})">
      <summary>
            Evaluate the given chain of SimpleMungers against an initial target.
            </summary>
      <param name="target">
      </param>
      <param name="parts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.Munger.IgnoreMissingAspects">
      <summary>
            Gets or sets whether Mungers will silently ignore missing aspect errors.
            </summary>
      <remarks>
        <para>
            By default, if a Munger is asked to fetch a field/property/method
            that does not exist from a model, it returns an error message, since that 
            condition is normally a programming error. There are some use cases where
            this is not an error, and the munger should simply keep quiet.
            </para>
        <para>By default this is true during release builds.</para>
      </remarks>
    </member>
    <member name="P:BrightIdeasSoftware.Munger.AspectName">
      <summary>
            The name of the aspect that is to be peeked or poked.
            </summary>
      <remarks>
        <para>
            This name can be a field, property or parameter-less method.
            </para>
        <para>
            The name can be dotted, which chains references. If any link in the chain returns
            null, the entire chain is considered to return null.
            </para>
      </remarks>
      <example>"DateOfBirth"</example>
      <example>"Owner.HomeAddress.Postcode"</example>
    </member>
    <member name="P:BrightIdeasSoftware.Munger.Parts">
      <summary>
            Gets the list of SimpleMungers that match our AspectName
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.SimpleMunger">
      <summary>
            A SimpleMunger deals with a single property/field/method on its target.
            </summary>
      <remarks>
            Munger uses a chain of these resolve a dotted aspect name.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleMunger.#ctor(System.String)">
      <summary>
            Create a SimpleMunger
            </summary>
      <param name="aspectName">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleMunger.GetValue(System.Object)">
      <summary>
            Get a value from the given target
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.SimpleMunger.PutValue(System.Object,System.Object)">
      <summary>
            Poke the given value into the given target indicated by our AspectName.
            </summary>
      <param name="target">The object that will be poked</param>
      <param name="value">The value that will be poked into the target</param>
      <returns>bool indicating if the put worked</returns>
    </member>
    <member name="P:BrightIdeasSoftware.SimpleMunger.AspectName">
      <summary>
            The name of the aspect that is to be peeked or poked.
            </summary>
      <remarks>
        <para>
            This name can be a field, property or method. 
            When using a method to get a value, the method must be parameter-less.
            When using a method to set a value, the method must accept 1 parameter.
            </para>
        <para>
            It cannot be a dotted name.
            </para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.MungerException">
      <summary>
            These exceptions are raised when a munger finds something it cannot process
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.MungerException.#ctor(BrightIdeasSoftware.SimpleMunger,System.Object,System.Exception)">
      <summary>
            Create a MungerException
            </summary>
      <param name="munger">
      </param>
      <param name="target">
      </param>
      <param name="ex">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.MungerException.Munger">
      <summary>
            Get the munger that raised the exception
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.MungerException.Target">
      <summary>
            Gets the target that threw the exception
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.NativeMethods">
      <summary>
            Wrapper for all native method calls on ListView controls
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetBackgroundImage(System.Windows.Forms.ListView,System.Drawing.Image,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Put an image under the ListView.
            </summary>
      <remarks>
        <para>
            The ListView must have its handle created before calling this.
            </para>
        <para>
            This doesn't work very well. Specifically, it doesn't play well with owner drawn, 
            and grid lines are drawn over it.
            </para>
      </remarks>
      <param name="lv">
      </param>
      <param name="image">The image to be used as the background. If this is null, any existing background image will be cleared.</param>
      <param name="isWatermark">If this is true, the image is pinned to the bottom right and does not scroll. The other parameters are ignored</param>
      <param name="isTiled">If this is true, the image will be tiled to fill the whole control background. The offset parameters will be ignored.</param>
      <param name="xOffset">If both watermark and tiled are false, this indicates the horizontal percentage where the image will be placed. 0 is absolute left, 100 is absolute right.</param>
      <param name="yOffset">If both watermark and tiled are false, this indicates the vertical percentage where the image will be placed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.ForceSubItemImagesExStyle(System.Windows.Forms.ListView)">
      <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
      <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
      <param name="list">The listview to send a m to</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetItemCount(System.Windows.Forms.ListView,System.Int32)">
      <summary>
            Change the virtual list size of the given ListView (which must be in virtual mode)
            </summary>
      <remarks>This will not change the scroll position</remarks>
      <param name="list">The listview to send a message to</param>
      <param name="count">How many rows should the list have?</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetExtendedStyle(System.Windows.Forms.ListView,System.Int32,System.Int32)">
      <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
      <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
      <param name="list">The listview to send a m to</param>
      <param name="style">
      </param>
      <param name="styleMask">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetCountPerPage(System.Windows.Forms.ListView)">
      <summary>
            Calculates the number of items that can fit vertically in the visible area of a list-view (which
            must be in details or list view.
            </summary>
      <param name="list">The listView</param>
      <returns>Number of visible items per page</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetSubItemImage(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
      <summary>
            For the given item and subitem, make it display the given image
            </summary>
      <param name="list">The listview to send a m to</param>
      <param name="itemIndex">row number (0 based)</param>
      <param name="subItemIndex">subitem (0 is the item itself)</param>
      <param name="imageIndex">index into the image list</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetColumnImage(System.Windows.Forms.ListView,System.Int32,System.Windows.Forms.SortOrder,System.Int32)">
      <summary>
            Setup the given column of the listview to show the given image to the right of the text.
            If the image index is -1, any previous image is cleared
            </summary>
      <param name="list">The listview to send a m to</param>
      <param name="columnIndex">Index of the column to modifiy</param>
      <param name="order">
      </param>
      <param name="imageIndex">Index into the small image list</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.HasBuiltinSortIndicators">
      <summary>
            Does this version of the operating system have builtin sort indicators?
            </summary>
      <returns>Are there builtin sort indicators</returns>
      <remarks>XP and later have these</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetUpdateRect(System.Windows.Forms.Control)">
      <summary>
            Return the bounds of the update region on the given control.
            </summary>
      <remarks>The BeginPaint() system call validates the update region, effectively wiping out this information.
            So this call has to be made before the BeginPaint() call.</remarks>
      <param name="cntl">The control whose update region is be calculated</param>
      <returns>A rectangle</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.ValidateRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
      <summary>
            Validate an area of the given control. A validated area will not be repainted at the next redraw.
            </summary>
      <param name="cntl">The control to be validated</param>
      <param name="r">The area of the control to be validated</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SelectAllItems(System.Windows.Forms.ListView)">
      <summary>
            Select all rows on the given listview
            </summary>
      <param name="list">The listview whose items are to be selected</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.DeselectAllItems(System.Windows.Forms.ListView)">
      <summary>
            Deselect all rows on the given listview
            </summary>
      <param name="list">The listview whose items are to be deselected</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetItemState(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
      <summary>
            Set the item state on the given item
            </summary>
      <param name="list">The listview whose item's state is to be changed</param>
      <param name="itemIndex">The index of the item to be changed</param>
      <param name="mask">Which bits of the value are to be set?</param>
      <param name="value">The value to be set</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.Scroll(System.Windows.Forms.ListView,System.Int32,System.Int32)">
      <summary>
            Scroll the given listview by the given deltas
            </summary>
      <param name="list">
      </param>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
      <returns>true if the scroll succeeded</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetHeaderControl(System.Windows.Forms.ListView)">
      <summary>
            Return the handle to the header control on the given list
            </summary>
      <param name="list">The listview whose header control is to be returned</param>
      <returns>The handle to the header control</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetColumnSides(BrightIdeasSoftware.ObjectListView,System.Int32)">
      <summary>
            Return the edges of the given column.
            </summary>
      <param name="lv">
      </param>
      <param name="columnIndex">
      </param>
      <returns>A Point holding the left and right co-ords of the column.
            -1 means that the sides could not be retrieved.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetScrolledColumnSides(System.Windows.Forms.ListView,System.Int32)">
      <summary>
            Return the edges of the given column.
            </summary>
      <param name="lv">
      </param>
      <param name="columnIndex">
      </param>
      <returns>A Point holding the left and right co-ords of the column.
            -1 means that the sides could not be retrieved.</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetColumnUnderPoint(System.IntPtr,System.Drawing.Point)">
      <summary>
            Return the index of the column of the header that is under the given point.
            Return -1 if no column is under the pt
            </summary>
      <param name="handle">The list we are interested in</param>
      <param name="pt">The client co-ords</param>
      <returns>The index of the column under the point, or -1 if no column header is under that point</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetDividerUnderPoint(System.IntPtr,System.Drawing.Point)">
      <summary>
            Return the index of the divider under the given point. Return -1 if no divider is under the pt
            </summary>
      <param name="handle">The list we are interested in</param>
      <param name="pt">The client co-ords</param>
      <returns>The index of the divider under the point, or -1 if no divider is under that point</returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.GetScrollPosition(System.Windows.Forms.ListView,System.Boolean)">
      <summary>
            Get the scroll position of the given scroll bar
            </summary>
      <param name="lv">
      </param>
      <param name="horizontalBar">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.ChangeZOrder(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window)">
      <summary>
            Change the z-order to the window 'toBeMoved' so it appear directly on top of 'reference'
            </summary>
      <param name="toBeMoved">
      </param>
      <param name="reference">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.MakeTopMost(System.Windows.Forms.IWin32Window)">
      <summary>
            Make the given control/window a topmost window
            </summary>
      <param name="toBeMoved">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.ShowWithoutActivate(System.Windows.Forms.IWin32Window)">
      <summary>
            Show the given window without activating it
            </summary>
      <param name="win">The window to show</param>
    </member>
    <member name="M:BrightIdeasSoftware.NativeMethods.SetSelectedColumn(System.Windows.Forms.ListView,System.Windows.Forms.ColumnHeader)">
      <summary>
            Mark the given column as being selected.
            </summary>
      <param name="objectListView">
      </param>
      <param name="value">The OLVColumn or null to clear</param>
      <remarks>
            This method works, but it prevents subitems in the given column from having
            back colors. 
            </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.ColumnComparer">
      <summary>
            ColumnComparer is the workhorse for all comparison between two values of a particular column.
            If the column has a specific comparer, use that to compare the values. Otherwise, do
            a case insensitive string compare of the string representations of the values.
            </summary>
      <remarks>
        <para>This class inherits from both IComparer and its generic counterpart
            so that it can be used on untyped and typed collections.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnComparer.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create a ColumnComparer that will order the rows in a list view according
            to the values in a given column
            </summary>
      <param name="col">The column whose values will be compared</param>
      <param name="order">The ordering for column values</param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnComparer.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create a ColumnComparer that will order the rows in a list view according
            to the values in a given column, and by a secondary column if the primary
            column is equal.
            </summary>
      <param name="col">The column whose values will be compared</param>
      <param name="order">The ordering for column values</param>
      <param name="col2">The column whose values will be compared for secondary sorting</param>
      <param name="order2">The ordering for secondary column values</param>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnComparer.Compare(System.Object,System.Object)">
      <summary>
            Compare two rows
            </summary>
      <param name="x">row1</param>
      <param name="y">row2</param>
      <returns>An ordering indication: -1, 0, 1</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnComparer.Compare(BrightIdeasSoftware.OLVListItem,BrightIdeasSoftware.OLVListItem)">
      <summary>
            Compare two rows
            </summary>
      <param name="x">row1</param>
      <param name="y">row2</param>
      <returns>An ordering indication: -1, 0, 1</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ColumnComparer.CompareValues(System.Object,System.Object)">
      <summary>
            Compare the actual values to be used for sorting
            </summary>
      <param name="x">The aspect extracted from the first row</param>
      <param name="y">The aspect extracted from the second row</param>
      <returns>An ordering indication: -1, 0, 1</returns>
    </member>
    <member name="T:BrightIdeasSoftware.OLVGroupComparer">
      <summary>
            This comparer sort list view groups. OLVGroups have a "SortValue" property,
            which is used if present. Otherwise, the titles of the groups will be compared.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroupComparer.#ctor(System.Windows.Forms.SortOrder)">
      <summary>
            Create a group comparer
            </summary>
      <param name="order">The ordering for column values</param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVGroupComparer.Compare(BrightIdeasSoftware.OLVGroup,BrightIdeasSoftware.OLVGroup)">
      <summary>
            Compare the two groups. OLVGroups have a "SortValue" property,
            which is used if present. Otherwise, the titles of the groups will be compared.
            </summary>
      <param name="x">group1</param>
      <param name="y">group2</param>
      <returns>An ordering indication: -1, 0, 1</returns>
    </member>
    <member name="T:BrightIdeasSoftware.ModelObjectComparer">
      <summary>
            This comparer can be used to sort a collection of model objects by a given column
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ModelObjectComparer.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create a model object comparer
            </summary>
      <param name="col">
      </param>
      <param name="order">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ModelObjectComparer.#ctor(BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder,BrightIdeasSoftware.OLVColumn,System.Windows.Forms.SortOrder)">
      <summary>
            Create a model object comparer with a secondary sorting column
            </summary>
      <param name="col">
      </param>
      <param name="order">
      </param>
      <param name="col2">
      </param>
      <param name="order2">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ModelObjectComparer.Compare(System.Object,System.Object)">
      <summary>
            Compare the two model objects
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.ModelObjectComparer.CompareValues(System.Object,System.Object)">
      <summary>
            Compare the actual values
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.Design.ObjectListViewDesigner">
      <summary>
            Designer for <see cref="T:BrightIdeasSoftware.ObjectListView" /> and its subclasses.
            </summary>
      <remarks>
        <para>
            This designer removes properties and events that are available on ListView but that are not
            useful on ObjectListView.
            </para>
        <para>
            We can't inherit from System.Windows.Forms.Design.ListViewDesigner, since it is marked internal.
            So, this class uses reflection to create a ListViewDesigner and then forwards messages to that designer.
            </para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.Design.ObjectListViewDesigner.ListViewActionListAdapter">
      <summary>
            This class modifies a ListViewActionList, by removing the "Edit Items" and "Edit Groups" actions.
            </summary>
      <remarks>
        <para>
            That class is internal, so we cannot simply subclass it, which would be simplier.
            </para>
        <para>
            Action lists use reflection to determine if that action can be executed, so we not
            only have to modify the returned collection of actions, but we have to implement
            the properties and commands that the returned actions use. </para>
      </remarks>
    </member>
    <member name="F:BrightIdeasSoftware.Design.ObjectListViewDesigner.listViewDesigner">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.Design.ObjectListViewDesigner.designerFilter">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.Design.ObjectListViewDesigner.listViewDesignGetHitTest">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.Design.ObjectListViewDesigner.listViewDesignWndProc">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
      </summary>
      <param name="component">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>
      </summary>
      <param name="defaultValues">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.RemoveDuplicateDockingActionList">
      <summary>
            Removes the duplicate DockingActionList added by this designer to the <see cref="T:System.ComponentModel.Design.DesignerActionService" />.
            </summary>
      <remarks>
        <see cref="M:System.Windows.Forms.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)" /> adds an internal DockingActionList : 'Dock/Undock in Parent Container'.
            But the default designer has already added that action list. So we need to remove one.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
      </summary>
      <param name="properties">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>
      </summary>
      <param name="events">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>
      </summary>
      <param name="attributes">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>
      </summary>
      <param name="events">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.GetHitTest(System.Drawing.Point)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Design.ObjectListViewDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.Design.ObjectListViewDesigner.ActionLists">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.Design.ObjectListViewDesigner.AssociatedComponents">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.Design.OLVColumnCollectionEditor">
      <summary>
            This class works in conjunction with the OLVColumns property to allow OLVColumns
            to be added to the ObjectListView.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.Design.OLVColumnCollectionEditor.#ctor(System.Type)">
      <summary>
            Create a OLVColumnCollectionEditor
            </summary>
      <param name="t">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.Design.OLVColumnCollectionEditor.CreateCollectionItemType">
      <summary>
            What type of object does this editor create?
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Design.OLVColumnCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edit a given value
            </summary>
      <param name="context">
      </param>
      <param name="provider">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.Design.OLVColumnCollectionEditor.GetDisplayText(System.Object)">
      <summary>
            What text should be shown in the list for the given object?
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.Design.OverlayConverter">
      <summary>
            Control how the overlay is presented in the IDE
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ITransparentOverlay">
      <summary>
            An interface for an overlay that supports variable levels of transparency
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ITransparentOverlay.Transparency">
      <summary>
            Gets or sets the transparency of the overlay. 
            0 is completely transparent, 255 is completely opaque.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractOverlay">
      <summary>
            A null implementation of the IOverlay interface
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractOverlay.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this overlay
            </summary>
      <param name="olv">The ObjectListView that is being overlaid</param>
      <param name="g">The Graphics onto the given OLV</param>
      <param name="r">The content area of the OLV</param>
    </member>
    <member name="P:BrightIdeasSoftware.AbstractOverlay.Transparency">
      <summary>
            How transparent should this overlay be?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ImageOverlay">
      <summary>
            An overlay that will draw an image over the top of the ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageOverlay.#ctor">
      <summary>
            Create an ImageOverlay
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageOverlay.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this overlay
            </summary>
      <param name="olv">The ObjectListView being decorated</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="P:BrightIdeasSoftware.ImageOverlay.InsetX">
      <summary>
            Gets or sets the horizontal inset by which the position of the overlay will be adjusted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageOverlay.InsetY">
      <summary>
            Gets or sets the vertical inset by which the position of the overlay will be adjusted
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TextOverlay">
      <summary>
            An overlay that will draw text over the top of the ObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextOverlay.#ctor">
      <summary>
            Create a TextOverlay
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.TextOverlay.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this overlay
            </summary>
      <param name="olv">The ObjectListView being decorated</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="P:BrightIdeasSoftware.TextOverlay.InsetX">
      <summary>
            Gets or sets the horizontal inset by which the position of the overlay will be adjusted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextOverlay.InsetY">
      <summary>
            Gets or sets the vertical inset by which the position of the overlay will be adjusted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TextOverlay.RoundCorneredBorder">
      <summary>
            Gets or sets whether the border will be drawn with rounded corners
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BillboardOverlay">
      <summary>
            A Billboard overlay is a TextOverlay positioned at an absolute point
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BillboardOverlay.#ctor">
      <summary>
            Create a BillboardOverlay
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BillboardOverlay.Draw(BrightIdeasSoftware.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw this overlay
            </summary>
      <param name="olv">The ObjectListView being decorated</param>
      <param name="g">The Graphics used for drawing</param>
      <param name="r">The bounds of the rendering</param>
    </member>
    <member name="P:BrightIdeasSoftware.BillboardOverlay.Location">
      <summary>
            Gets or sets where should the top left of the billboard be placed
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.Version1Renderer">
      <summary>
            This class provides compatibility for v1 RendererDelegates
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.Version1Renderer.RenderDelegate">
      <summary>
            The renderer delegate that this renderer wraps
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.MappedImageRenderer">
      <summary>
            This class maps a data value to an image that should be drawn for that value.
            </summary>
      <remarks>
        <para>It is useful for drawing data that is represented as an enum or boolean.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.Boolean(System.Object,System.Object)">
      <summary>
            Return a renderer that draw boolean values using the given images
            </summary>
      <param name="trueImage">Draw this when our data value is true</param>
      <param name="falseImage">Draw this when our data value is false</param>
      <returns>A Renderer</returns>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.TriState(System.Object,System.Object,System.Object)">
      <summary>
            Return a renderer that draw tristate boolean values using the given images
            </summary>
      <param name="trueImage">Draw this when our data value is true</param>
      <param name="falseImage">Draw this when our data value is false</param>
      <param name="nullImage">Draw this when our data value is null</param>
      <returns>A Renderer</returns>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.#ctor">
      <summary>
            Make a new empty renderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.#ctor(System.Object,System.Object)">
      <summary>
            Make a new renderer that will show the given image when the given key is the aspect value
            </summary>
      <param name="key">The data value to be matched</param>
      <param name="image">The image to be shown when the key is matched</param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.#ctor(System.Object,System.Object,System.Object,System.Object)">
      <summary>
            Make a new renderer that will show the given images when it receives the given keys
            </summary>
      <param name="key1">
      </param>
      <param name="image1">
      </param>
      <param name="key2">
      </param>
      <param name="image2">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.#ctor(System.Object[])">
      <summary>
            Build a renderer from the given array of keys and their matching images
            </summary>
      <param name="keysAndImages">An array of key/image pairs</param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.Add(System.Object,System.Object)">
      <summary>
            Register the image that should be drawn when our Aspect has the data value.
            </summary>
      <param name="value">Value that the Aspect must match</param>
      <param name="image">An ImageSelector -- an int, string or image</param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Render our value
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.RenderCollection(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ICollection)">
      <summary>
            Draw a collection of images
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="imageSelectors">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.MappedImageRenderer.RenderOne(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
      <summary>
            Draw one image
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="selector">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.CheckStateRenderer">
      <summary>
            This renderer draws just a checkbox to match the check state of our model object.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.CheckStateRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our cell
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.CheckStateRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Handle the GetEditRectangle request
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.CheckStateRenderer.HandleHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Handle the HitTest request
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.ImageRenderer">
      <summary>
            Render an image that comes from our data source.
            </summary>
      <remarks>The image can be sourced from:
            <list type="bullet"><item><description>a byte-array (normally when the image to be shown is
            stored as a value in a database)</description></item><item><description>an int, which is treated as an index into the image list</description></item><item><description>a string, which is treated first as a file name, and failing that as an index into the image list</description></item><item><description>an ICollection of ints or strings, which will be drawn as consecutive images</description></item></list><para>If an image is an animated GIF, it's state is stored in the SubItem object.</para><para>By default, the image renderer does not render animations (it begins life with animations paused).
            To enable animations, you must call Unpause().</para><para>In the current implementation (2009-09), each column showing animated gifs must have a 
            different instance of ImageRenderer assigned to it. You cannot share the same instance of
            an image renderer between two animated gif columns. If you do, only the last column will be
            animated.</para></remarks>
    </member>
    <member name="T:BrightIdeasSoftware.ImageRenderer.AnimationState">
      <summary>
            Instances of this class kept track of the animation state of a single image.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.AnimationState.IsAnimation(System.Drawing.Image)">
      <summary>
            Is the given image an animation
            </summary>
      <param name="image">The image to be tested</param>
      <returns>Is the image an animation?</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.AnimationState.#ctor">
      <summary>
            Create an AnimationState in a quiet state
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.AnimationState.#ctor(System.Drawing.Image)">
      <summary>
            Create an animation state for the given image, which may or may not
            be an animation
            </summary>
      <param name="image">The image to be rendered</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.AnimationState.AdvanceFrame(System.Int64)">
      <summary>
            Advance our images current frame and calculate when it will expire
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageRenderer.AnimationState.IsValid">
      <summary>
            Does this state represent a valid animation
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.#ctor">
      <summary>
            Make an empty image renderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.#ctor(System.Boolean)">
      <summary>
            Make an empty image renderer that begins life ready for animations
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.Dispose(System.Boolean)">
      <summary>
            Finalizer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.Pause">
      <summary>
            Pause any animations
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.Unpause">
      <summary>
            Unpause any animations
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our image
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.GetImageFromAspect">
      <summary>
             Translate our Aspect into an image.
             </summary>
      <remarks>The strategy is:<list type="bullet"><item><description>If its a byte array, we treat it as an in-memory image</description></item><item><description>If it's an int, we use that as an index into our image list</description></item><item><description>If it's a string, we try to load a file by that name. If we can't, 
             we use the string as an index into our image list.</description></item></list></remarks>
      <returns>An image</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.OnTimer(System.Object)">
      <summary>
            This is the method that is invoked by the timer. It basically switches control to the listview thread.
            </summary>
      <param name="state">not used</param>
    </member>
    <member name="M:BrightIdeasSoftware.ImageRenderer.OnTimerInThread">
      <summary>
            This is the OnTimer callback, but invoked in the same thread as the creator of the ListView.
            This method can use all of ListViews methods without creating a CrossThread exception.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageRenderer.Paused">
      <summary>
            Should the animations in this renderer be paused?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ImageRenderer.Tickler">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.BarRenderer">
      <summary>
            Render our Aspect as a progress bar
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor">
      <summary>
            Make a BarRenderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor(System.Int32,System.Int32)">
      <summary>
            Make a BarRenderer for the given range of data values
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
      <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Brush)">
      <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.SetGradient(System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Draw this progress bar using a gradient
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our aspect
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.BarRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Handle the GetEditRectangle request
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.UseStandardBar">
      <summary>
            Should this bar be drawn in the system style?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.Padding">
      <summary>
            How many pixels in from our cell border will this bar be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.BackgroundColor">
      <summary>
            What color will be used to fill the interior of the control before the 
            progress bar is drawn?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.FrameColor">
      <summary>
            What color should the frame of the progress bar be?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.FrameWidth">
      <summary>
            How many pixels wide should the frame of the progress bar be?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.FillColor">
      <summary>
            What color should the 'filled in' part of the progress bar be?
            </summary>
      <remarks>This is only used if GradientStartColor is Color.Empty</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.GradientStartColor">
      <summary>
            Use a gradient to fill the progress bar starting with this color
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.GradientEndColor">
      <summary>
            Use a gradient to fill the progress bar ending with this color
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.MaximumWidth">
      <summary>
            Regardless of how wide the column become the progress bar will never be wider than this
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.MaximumHeight">
      <summary>
            Regardless of how high the cell is  the progress bar will never be taller than this
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.MinimumValue">
      <summary>
            The minimum data value expected. Values less than this will given an empty bar
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.MaximumValue">
      <summary>
            The maximum value for the range. Values greater than this will give a full bar
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.Pen">
      <summary>
            The Pen that will draw the frame surrounding this bar
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.Brush">
      <summary>
            The brush that will be used to fill the bar
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.BarRenderer.BackgroundBrush">
      <summary>
            The brush that will be used to fill the background of the bar
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ImagesRenderer">
      <summary>
            An ImagesRenderer draws zero or more images depending on the data returned by its Aspect.
            </summary>
      <remarks>
        <para>This renderer's Aspect must return a ICollection of ints, strings or Images,
            each of which will be drawn horizontally one after the other.</para>
        <para>As of v2.1, this functionality has been absorbed into ImageRenderer and this is now an
            empty shell, solely for backwards compatibility.</para>
      </remarks>
    </member>
    <member name="T:BrightIdeasSoftware.MultiImageRenderer">
      <summary>
            A MultiImageRenderer draws the same image a number of times based on our data value
            </summary>
      <remarks>
        <para>The stars in the Rating column of iTunes is a good example of this type of renderer.</para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.MultiImageRenderer.#ctor">
      <summary>
            Make a quiet rendererer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.MultiImageRenderer.#ctor(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>
            Make an image renderer that will draw the indicated image, at most maxImages times.
            </summary>
      <param name="imageSelector">
      </param>
      <param name="maxImages">
      </param>
      <param name="minValue">
      </param>
      <param name="maxValue">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.MultiImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our data value
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.MultiImageRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,BrightIdeasSoftware.OLVListItem,System.Int32,System.Drawing.Size)">
      <summary>
            Handle the GetEditRectangle request
            </summary>
      <param name="g">
      </param>
      <param name="cellBounds">
      </param>
      <param name="item">
      </param>
      <param name="subItemIndex">
      </param>
      <param name="preferredSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.ImageIndex">
      <summary>
            The index of the image that should be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.ImageName">
      <summary>
            The name of the image that should be drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.ImageSelector">
      <summary>
            The image selector that will give the image to be drawn
            </summary>
      <remarks>Like all image selectors, this can be an int, string or Image</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.MaxNumberImages">
      <summary>
            What is the maximum number of images that this renderer should draw?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.MinimumValue">
      <summary>
            Values less than or equal to this will have 0 images drawn
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.MultiImageRenderer.MaximumValue">
      <summary>
            Values greater than or equal to this will have MaxNumberImages images drawn
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.FlagRenderer">
      <summary>
            A class to render a value that contains a bitwise-OR'ed collection of values.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FlagRenderer.Add(System.Object,System.Object)">
      <summary>
            Register the given image to the given value
            </summary>
      <param name="key">When this flag is present...</param>
      <param name="imageSelector">...draw this image</param>
    </member>
    <member name="M:BrightIdeasSoftware.FlagRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw the flags
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.FlagRenderer.HandleHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Do the actual work of hit testing. Subclasses should override this rather than HitTest()
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.DescribedTaskRenderer">
      <summary>
            This renderer draws an image, a single line title, and then multi-line descrition
            under the title.
            </summary>
      <remarks>
        <para>This class works best with FullRowSelect = true.</para>
        <para>It's not designed to work with cell editing -- it will work but will look odd.</para>
        <para>
            This class is experimental. It may not work properly and may disappear from
            future versions.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.DescribedTaskRenderer.#ctor">
      <summary>
            Create a DescribedTaskRenderer
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.DescribedTaskRenderer.GetDescription">
      <summary>
            Fetch the description from the model class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.DescribedTaskRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draw our item
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DescribedTaskRenderer.DrawDescribedTask(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Image)">
      <summary>
            Draw the task
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="title">
      </param>
      <param name="description">
      </param>
      <param name="image">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.DescribedTaskRenderer.HandleHitTest(System.Drawing.Graphics,BrightIdeasSoftware.OlvListViewHitTestInfo,System.Int32,System.Int32)">
      <summary>
            Handle the HitTest request
            </summary>
      <param name="g">
      </param>
      <param name="hti">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.TitleFont">
      <summary>
            Gets or set the font that will be used to draw the title of the task
            </summary>
      <remarks>If this is null, the ListView's font will be used</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.TitleFontOrDefault">
      <summary>
            Return a font that has been set for the title or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.TitleColor">
      <summary>
            Gets or set the color of the title of the task
            </summary>
      <remarks>This color is used when the task is not selected or when the listview
            has a translucent selection mechanism.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.TitleColorOrDefault">
      <summary>
            Return the color of the title of the task or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.DescriptionFont">
      <summary>
            Gets or set the font that will be used to draw the description of the task
            </summary>
      <remarks>If this is null, the ListView's font will be used</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.DescriptionFontOrDefault">
      <summary>
            Return a font that has been set for the title or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.DescriptionColor">
      <summary>
            Gets or set the color of the description of the task
            </summary>
      <remarks>This color is used when the task is not selected or when the listview
            has a translucent selection mechanism.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.DescriptionColorOrDefault">
      <summary>
            Return the color of the description of the task or a reasonable default
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.ImageTextSpace">
      <summary>
            Gets or sets the number of pixels that will be left between the image and the text
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.DescribedTaskRenderer.DescriptionAspectName">
      <summary>
            Gets or sets the name of the aspect of the model object that contains the task description
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IItemStyle">
      <summary>
            The common interface supported by all style objects
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IItemStyle.Font">
      <summary>
            Gets or set the font that will be used by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IItemStyle.FontStyle">
      <summary>
            Gets or set the font style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IItemStyle.ForeColor">
      <summary>
            Gets or sets the ForeColor
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.IItemStyle.BackColor">
      <summary>
            Gets or sets the BackColor
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HotItemStyle">
      <summary>
            Instances of this class specify how should "hot items" (non-selected
            rows under the cursor) be renderered.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.Font">
      <summary>
            Gets or sets the font that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.FontStyle">
      <summary>
            Gets or sets the style of font that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.ForeColor">
      <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.BackColor">
      <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.Overlay">
      <summary>
            Gets or sets the overlay that should be drawn as part of the hot item
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HotItemStyle.Decoration">
      <summary>
            Gets or sets the decoration that should be drawn as part of the hot item
            </summary>
      <remarks>A decoration is different from an overlay in that an decoration
            scrolls with the listview contents, whilst an overlay does not.</remarks>
    </member>
    <member name="T:BrightIdeasSoftware.CellStyle">
      <summary>
            This class defines how a cell should be formatted
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellStyle.Font">
      <summary>
            Gets or sets the font that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellStyle.FontStyle">
      <summary>
            Gets or sets the style of font that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellStyle.ForeColor">
      <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.CellStyle.BackColor">
      <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HyperlinkStyle">
      <summary>
            Instances of this class describe how hyperlinks will appear
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HyperlinkStyle.#ctor">
      <summary>
            Create a HyperlinkStyle
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkStyle.Normal">
      <summary>
            What sort of formatting should be applied to hyperlinks in their normal state?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkStyle.Over">
      <summary>
            What sort of formatting should be applied to hyperlinks when the mouse is over them?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkStyle.Visited">
      <summary>
            What sort of formatting should be applied to hyperlinks after they have been clicked?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HyperlinkStyle.OverCursor">
      <summary>
            Gets or sets the cursor that should be shown when the mouse is over a hyperlink.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HeaderStateStyle">
      <summary>
            Instances of this class control one the styling of one particular state
            (normal, hot, pressed) of a header control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderStateStyle.Font">
      <summary>
            Gets or sets the font that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderStateStyle.ForeColor">
      <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderStateStyle.BackColor">
      <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderStateStyle.FrameColor">
      <summary>
            Gets or sets the color in which a frame will be drawn around the header for this column
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderStateStyle.FrameWidth">
      <summary>
            Gets or sets the width of the frame that will be drawn around the header for this column
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.HeaderFormatStyle">
      <summary>
            This class defines how a header should be formatted in its various states.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderFormatStyle.#ctor">
      <summary>
            Create a new HeaderFormatStyle
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderFormatStyle.SetFont(System.Drawing.Font)">
      <summary>
            Set the font for all three states
            </summary>
      <param name="font">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderFormatStyle.SetForeColor(System.Drawing.Color)">
      <summary>
            Set the fore color for all three states
            </summary>
      <param name="color">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.HeaderFormatStyle.SetBackColor(System.Drawing.Color)">
      <summary>
            Set the back color for all three states
            </summary>
      <param name="color">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderFormatStyle.Hot">
      <summary>
            What sort of formatting should be applied to a column header when the mouse is over it?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderFormatStyle.Normal">
      <summary>
            What sort of formatting should be applied to a column header in its normal state?
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.HeaderFormatStyle.Pressed">
      <summary>
            What sort of formatting should be applied to a column header when pressed?
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ToolTipControl">
      <summary>
            A limited wrapper around a Windows tooltip window.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.ToolTipControl.StandardIcons">
      <summary>
            These are the standard icons that a tooltip can display.
            </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipControl.TTN_SHOW">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipControl.TTN_POP">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipControl.TTN_LINKCLICK">
      <summary>
      </summary>
    </member>
    <member name="F:BrightIdeasSoftware.ToolTipControl.TTN_GETDISPINFO">
      <summary>
      </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.Create(System.IntPtr)">
      <summary>
            Create the underlying control.
            </summary>
      <param name="parentHandle">The parent of the tooltip</param>
      <remarks>This does nothing if the control has already been created</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.PushSettings">
      <summary>
            Take a copy of the current settings and restore them when the 
            tooltip is poppped.
            </summary>
      <remarks>
            This call cannot be nested. Subsequent calls to this method will be ignored
            until PopSettings() is called.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.PopSettings">
      <summary>
            Restore the settings of the tooltip as they were when PushSettings()
            was last called.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.AddTool(System.Windows.Forms.IWin32Window)">
      <summary>
            Add the given window to those for whom this tooltip will show tips
            </summary>
      <param name="window">The window</param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.PopToolTip(System.Windows.Forms.IWin32Window)">
      <summary>
            Hide any currently visible tooltip
            </summary>
      <param name="window">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.RemoveToolTip(System.Windows.Forms.IWin32Window)">
      <summary>
            Remove the given window from those managed by this tooltip
            </summary>
      <param name="window">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.SetMaxWidth">
      <summary>
            Set the maximum width of a tooltip string.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.SetMaxWidth(System.Int32)">
      <summary>
            Set the maximum width of a tooltip string.
            </summary>
      <remarks>Setting this ensures that line breaks in the tooltip are honoured.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.MakeToolInfoStruct(System.Windows.Forms.IWin32Window)">
      <summary>
            Make a TOOLINFO structure for the given window
            </summary>
      <param name="window">
      </param>
      <returns>A filled in TOOLINFO</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandleNotify(System.Windows.Forms.Message@)">
      <summary>
            Handle a WmNotify message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandleGetDispInfo(System.Windows.Forms.Message@)">
      <summary>
            Handle a get display info message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandleLinkClick(System.Windows.Forms.Message@)">
      <summary>
            Handle a TTN_LINKCLICK message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
      <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandlePop(System.Windows.Forms.Message@)">
      <summary>
            Handle a TTN_POP message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
      <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandleShow(System.Windows.Forms.Message@)">
      <summary>
            Handle a TTN_SHOW message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
      <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.HandleReflectNotify(System.Windows.Forms.Message@)">
      <summary>
            Handle a reflected notify message
            </summary>
      <param name="msg">The msg</param>
      <returns>True if the message has been handled</returns>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Mess with the basic message pump of the tooltip
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.OnShowing(BrightIdeasSoftware.ToolTipShowingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.ToolTipControl.OnPop(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.WindowStyle">
      <summary>
            Get or set if the style of the tooltip control
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.IsBalloon">
      <summary>
            Get or set if the tooltip should be shown as a ballon
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.HasBorder">
      <summary>
            Get or set if the tooltip should be shown as a ballon
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.BackColor">
      <summary>
            Get or set the background color of the tooltip
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.ForeColor">
      <summary>
            Get or set the color of the text and border on the tooltip.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.Title">
      <summary>
            Get or set the title that will be shown on the tooltip.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.StandardIcon">
      <summary>
            Get or set the icon that will be shown on the tooltip.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.Font">
      <summary>
            Gets or sets the font that will be used to draw this control.
            is still.
            </summary>
      <remarks>Setting this to null reverts to the default font.</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.AutoPopDelay">
      <summary>
            Gets or sets how many milliseconds the tooltip will remain visible while the mouse
            is still.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.InitialDelay">
      <summary>
            Gets or sets how many milliseconds the mouse must be still before the tooltip is shown.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.ToolTipControl.ReshowDelay">
      <summary>
            Gets or sets how many milliseconds the mouse must be still before the tooltip is shown again.
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ToolTipControl.Showing">
      <summary>
            Tell the world that a tooltip is about to show
            </summary>
    </member>
    <member name="E:BrightIdeasSoftware.ToolTipControl.Pop">
      <summary>
            Tell the world that a tooltip is about to disappear
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVExporter">
      <summary>
            An OLVExporter converts a collection of rows from an ObjectListView
            into a variety of textual formats.
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.OLVExporter.ExportFormat">
      <summary>
            What format will be used for exporting
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.#ctor">
      <summary>
            Create an empty exporter
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create an exporter that will export all the rows of the given ObjectListView
            </summary>
      <param name="olv">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.#ctor(BrightIdeasSoftware.ObjectListView,System.Collections.IEnumerable)">
      <summary>
            Create an exporter that will export all the given rows from the given ObjectListView
            </summary>
      <param name="olv">
      </param>
      <param name="objectsToExport">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.ExportTo(BrightIdeasSoftware.OLVExporter.ExportFormat)">
      <summary>
            Export the nominated rows from the nominated ObjectListView.
            Returns the result in the expected format.
            </summary>
      <param name="format">
      </param>
      <returns>
      </returns>
      <remarks>This will perform only one conversion, even if called multiple times with different formats.</remarks>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.Convert">
      <summary>
            Convert 
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.CsvEncode(System.String)">
      <summary>
            Encode a string such that it can be used as a value in a CSV file.
            This basically means replacing any quote mark with two quote marks,
            and enclosing the whole string in quotes.
            </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.OLVExporter.HtmlEncode(System.String)">
      <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
      <param name="text">The text string to encode. </param>
      <returns>The HTML-encoded text.</returns>
      <remarks>Taken from http://www.west-wind.com/weblog/posts/2009/Feb/05/Html-and-Uri-String-Encoding-without-SystemWeb</remarks>
    </member>
    <member name="P:BrightIdeasSoftware.OLVExporter.IncludeHiddenColumns">
      <summary>
            Gets or sets whether hidden columns will also be included in the textual
            representation. If this is false (the default), only visible columns will
            be included.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVExporter.IncludeColumnHeaders">
      <summary>
            Gets or sets whether column headers will also be included in the text
            and HTML representation. Default is true.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVExporter.ListView">
      <summary>
            Gets the ObjectListView that is being used as the source of the data
            to be exported
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.OLVExporter.ModelObjects">
      <summary>
            Gets the model objects that are to be placed in the data object
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1">
      <summary>
            A TypedObjectListView is a type-safe wrapper around an ObjectListView.
            </summary>
      <remarks>
        <para>VCS does not support generics on controls. It can be faked to some degree, but it
            cannot be completely overcome. In our case in particular, there is no way to create
            the custom OLVColumn's that we need to truly be generic. So this wrapper is an 
            experiment in providing some type-safe access in a way that is useful and available today.</para>
        <para>A TypedObjectListView is not more efficient than a normal ObjectListView.
            Underneath, the same name of casts are performed. But it is easier to use since you
            do not have to write the casts yourself.
            </para>
      </remarks>
      <typeparam name="T">The class of model object that the list will manage</typeparam>
      <example>
            To use a TypedObjectListView, you write code like this:
            <code>
            TypedObjectListView&lt;Person&gt; tlist = new TypedObjectListView&lt;Person&gt;(this.listView1);
            tlist.CheckStateGetter = delegate(Person x) { return x.IsActive; };
            tlist.GetColumn(0).AspectGetter = delegate(Person x) { return x.Name; };
            ...
            </code>
            To iterate over the selected objects, you can write something elegant like this:
            <code>
            foreach (Person x in tlist.SelectedObjects) {
                x.GrantSalaryIncrease();
            }
            </code></example>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1.TypedCheckStateGetterDelegate">
      <summary>
            CheckStateGetter
            </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1.TypedBooleanCheckStateGetterDelegate">
      <summary>
            BooleanCheckStateGetter
            </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1.TypedCheckStatePutterDelegate">
      <summary>
            CheckStatePutter
            </summary>
      <param name="rowObject">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1.TypedBooleanCheckStatePutterDelegate">
      <summary>
            BooleanCheckStatePutter
            </summary>
      <param name="rowObject">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedObjectListView`1.TypedCellToolTipGetterDelegate">
      <summary>
            ToolTipGetter
            </summary>
      <param name="column">
      </param>
      <param name="modelObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedObjectListView`1.#ctor(BrightIdeasSoftware.ObjectListView)">
      <summary>
            Create a typed wrapper around the given list.
            </summary>
      <param name="olv">The listview to be wrapped</param>
    </member>
    <member name="M:BrightIdeasSoftware.TypedObjectListView`1.GetColumn(System.Int32)">
      <summary>
            Return a typed wrapper around the column at the given index
            </summary>
      <param name="i">The index of the column</param>
      <returns>A typed column or null</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedObjectListView`1.GetColumn(System.String)">
      <summary>
            Return a typed wrapper around the column with the given name
            </summary>
      <param name="name">The name of the column</param>
      <returns>A typed column or null</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedObjectListView`1.GetModelObject(System.Int32)">
      <summary>
            Return the model object at the given index
            </summary>
      <param name="index">The index of the model object</param>
      <returns>The model object or null</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedObjectListView`1.GenerateAspectGetters">
      <summary>
            This method will generate AspectGetters for any column that has an AspectName.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.CheckedObject">
      <summary>
            Return the model object that is checked, if only one row is checked.
            If zero rows are checked, or more than one row, null is returned.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.CheckedObjects">
      <summary>
            Return the list of all the checked model objects
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.ListView">
      <summary>
            The ObjectListView that is being wrapped
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.Objects">
      <summary>
            Get or set the list of all model objects
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.SelectedObject">
      <summary>
            Return the model object that is selected, if only one row is selected.
            If zero rows are selected, or more than one row, null is returned.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.SelectedObjects">
      <summary>
            The list of model objects that are selected.
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.CheckStateGetter">
      <summary>
            Gets or sets the check state getter
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.BooleanCheckStateGetter">
      <summary>
            Gets or sets the boolean check state getter
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.CheckStatePutter">
      <summary>
            Gets or sets the check state putter delegate
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.BooleanCheckStatePutter">
      <summary>
            Gets or sets the boolean check state putter
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.CellToolTipGetter">
      <summary>
            Gets or sets the cell tooltip getter
            </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedObjectListView`1.HeaderToolTipGetter">
      <summary>
            Gets or sets the header tool tip getter
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.TypedColumn`1">
      <summary>
            A type-safe wrapper around an OLVColumn
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:BrightIdeasSoftware.TypedColumn`1.TypedAspectGetterDelegate">
      <summary>
      </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedColumn`1.TypedAspectPutterDelegate">
      <summary>
      </summary>
      <param name="rowObject">
      </param>
      <param name="newValue">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.TypedColumn`1.TypedGroupKeyGetterDelegate">
      <summary>
      </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.TypedColumn`1.TypedImageGetterDelegate">
      <summary>
      </summary>
      <param name="rowObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedColumn`1.#ctor(BrightIdeasSoftware.OLVColumn)">
      <summary>
            Creates a TypedColumn
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.TypedColumn`1.GenerateAspectGetter">
      <summary>
            Generate an aspect getter that does the same thing as the AspectName,
            except without using reflection.
            </summary>
      <remarks>
        <para>
            If you have an AspectName of "Owner.Address.Postcode", this will generate
            the equivilent of: <code>this.AspectGetter = delegate (object x) {
                return x.Owner.Address.Postcode;
            }
            </code></para>
        <para>
            If AspectName is empty, this method will do nothing, otherwise 
            this will replace any existing AspectGetter.
            </para>
      </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.TypedColumn`1.GenerateAspectGetter(System.Type,System.String)">
      <summary>
            Generates an aspect getter method dynamically. The method will execute
            the given dotted chain of selectors against a model object given at runtime.
            </summary>
      <param name="type">The type of model object to be passed to the generated method</param>
      <param name="path">A dotted chain of selectors. Each selector can be the name of a 
            field, property or parameter-less method.</param>
      <returns>A typed delegate</returns>
    </member>
    <member name="M:BrightIdeasSoftware.TypedColumn`1.GenerateIL(System.Type,System.String,System.Reflection.Emit.ILGenerator)">
      <summary>
            This method generates the actual IL for the method.
            </summary>
      <param name="type">
      </param>
      <param name="path">
      </param>
      <param name="il">
      </param>
    </member>
    <member name="P:BrightIdeasSoftware.TypedColumn`1.AspectGetter">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedColumn`1.AspectPutter">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedColumn`1.ImageGetter">
      <summary>
      </summary>
    </member>
    <member name="P:BrightIdeasSoftware.TypedColumn`1.GroupKeyGetter">
      <summary>
      </summary>
    </member>
    <member name="T:BrightIdeasSoftware.IVirtualGroups">
      <summary>
            A IVirtualGroups is the interface that a virtual list must implement to support virtual groups
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualGroups.GetGroups(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Return the list of groups that should be shown according to the given parameters
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualGroups.GetGroupMember(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
            Return the index of the item that appears at the given position within the given group.
            </summary>
      <param name="group">
      </param>
      <param name="indexWithinGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualGroups.GetGroup(System.Int32)">
      <summary>
            Return the index of the group to which the given item belongs
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualGroups.GetIndexWithinGroup(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
            Return the index at which the given item is shown in the given group
            </summary>
      <param name="group">
      </param>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.IVirtualGroups.CacheHint(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            A hint that the given range of items are going to be required
            </summary>
      <param name="fromGroupIndex">
      </param>
      <param name="fromIndex">
      </param>
      <param name="toGroupIndex">
      </param>
      <param name="toIndex">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.AbstractVirtualGroups">
      <summary>
            This is a safe, do nothing implementation of a grouping strategy
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualGroups.GetGroups(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Return the list of groups that should be shown according to the given parameters
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualGroups.GetGroupMember(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
            Return the index of the item that appears at the given position within the given group.
            </summary>
      <param name="group">
      </param>
      <param name="indexWithinGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualGroups.GetGroup(System.Int32)">
      <summary>
            Return the index of the group to which the given item belongs
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualGroups.GetIndexWithinGroup(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
            Return the index at which the given item is shown in the given group
            </summary>
      <param name="group">
      </param>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.AbstractVirtualGroups.CacheHint(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            A hint that the given range of items are going to be required
            </summary>
      <param name="fromGroupIndex">
      </param>
      <param name="fromIndex">
      </param>
      <param name="toGroupIndex">
      </param>
      <param name="toIndex">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.FastListGroupingStrategy">
      <summary>
            Provides grouping functionality to a FastObjectListView
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.FastListGroupingStrategy.GetGroups(BrightIdeasSoftware.GroupingParameters)">
      <summary>
            Create groups for FastListView
            </summary>
      <param name="parmameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastListGroupingStrategy.GetGroupMember(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
      </summary>
      <param name="group">
      </param>
      <param name="indexWithinGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastListGroupingStrategy.GetGroup(System.Int32)">
      <summary>
      </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.FastListGroupingStrategy.GetIndexWithinGroup(BrightIdeasSoftware.OLVGroup,System.Int32)">
      <summary>
      </summary>
      <param name="group">
      </param>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BrightIdeasSoftware.IOwnerDataCallback">
      <summary>
            This is the COM interface that a ListView must be given in order for groups in virtual lists to work.
            </summary>
      <remarks>
            This interface is NOT documented by MS. It was found on Greg Chapell's site. This means that there is
            no guarantee that it will work on future versions of Windows, nor continue to work on current ones.
            </remarks>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.GetItemPosition(System.Int32,BrightIdeasSoftware.NativeMethods.POINT@)">
      <summary>
            Not sure what this does
            </summary>
      <param name="i">
      </param>
      <param name="pt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.SetItemPosition(System.Int32,BrightIdeasSoftware.NativeMethods.POINT)">
      <summary>
            Not sure what this does
            </summary>
      <param name="t">
      </param>
      <param name="pt">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.GetItemInGroup(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Get the index of the item that occurs at the n'th position of the indicated group.
            </summary>
      <param name="groupIndex">Index of the group</param>
      <param name="n">Index within the group</param>
      <param name="itemIndex">Index of the item within the whole list</param>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.GetItemGroup(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Get the index of the group to which the given item belongs
            </summary>
      <param name="itemIndex">Index of the item within the whole list</param>
      <param name="occurrenceCount">Which occurences of the item is wanted</param>
      <param name="groupIndex">Index of the group</param>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.GetItemGroupCount(System.Int32,System.Int32@)">
      <summary>
            Get the number of groups that contain the given item
            </summary>
      <param name="itemIndex">Index of the item within the whole list</param>
      <param name="occurrenceCount">How many groups does it occur within</param>
    </member>
    <member name="M:BrightIdeasSoftware.IOwnerDataCallback.OnCacheHint(BrightIdeasSoftware.NativeMethods.LVITEMINDEX,BrightIdeasSoftware.NativeMethods.LVITEMINDEX)">
      <summary>
            A hint to prepare any cache for the given range of requests
            </summary>
      <param name="i">
      </param>
      <param name="j">
      </param>
    </member>
    <member name="T:BrightIdeasSoftware.OwnerDataCallbackImpl">
      <summary>
            A default implementation of the IOwnerDataCallback interface
            </summary>
    </member>
    <member name="T:BrightIdeasSoftware.VirtualListVersion1DataSource">
      <summary>
            This class mimics the behavior of VirtualObjectListView v1.x.
            </summary>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualListVersion1DataSource.#ctor(BrightIdeasSoftware.VirtualObjectListView)">
      <summary>
            Creates a VirtualListVersion1DataSource
            </summary>
      <param name="listView">
      </param>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualListVersion1DataSource.GetNthObject(System.Int32)">
      <summary>
      </summary>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BrightIdeasSoftware.VirtualListVersion1DataSource.SearchText(System.String,System.Int32,System.Int32,BrightIdeasSoftware.OLVColumn)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <param name="first">
      </param>
      <param name="last">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BrightIdeasSoftware.VirtualListVersion1DataSource.RowGetter">
      <summary>
            How will the n'th object of the data source be fetched?
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPanel.DragHandlerBase">
      <summary>
            DragHandlerBase is the base class for drag handlers. The derived class should:
              1. Define its public method BeginDrag. From within this public BeginDrag method,
                 DragHandlerBase.BeginDrag should be called to initialize the mouse capture
                 and message filtering.
              2. Override the OnDragging and OnEndDrag methods.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanel.DockBackColor">
      <summary>
            Determines the color with which the client rectangle will be drawn.
            If this property is used instead of the BackColor it will not have any influence on the borders to the surrounding controls (DockPane).
            The BackColor property changes the borders of surrounding controls (DockPane).
            Alternatively both properties may be used (BackColor to draw and define the color of the borders and DockBackColor to define the color of the client rectangle). 
            For Backgroundimages: Set your prefered Image, then set the DockBackColor and the BackColor to the same Color (Control)
            </summary>
    </member>
    <member name="M:WeifenLuo.WinFormsUI.Docking.DockContent.OnSizeChanged(System.EventArgs)">
      <summary>
            Overridden to avoid resize issues with nested controls
            </summary>
      <remarks>
            http://blogs.msdn.com/b/alejacma/archive/2008/11/20/controls-won-t-get-resized-once-the-nesting-hierarchy-of-windows-exceeds-a-certain-depth-x64.aspx
            http://support.microsoft.com/kb/953934
            </remarks>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPanelSkin">
      <summary>
            The skin to use when displaying the DockPanel.
            The skin allows custom gradient color schemes to be used when drawing the
            DockStrips and Tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanelSkin.AutoHideStripSkin">
      <summary>
            The skin used to display the auto hide strips and tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanelSkin.DockPaneStripSkin">
      <summary>
            The skin used to display the Document and ToolWindow style DockStrips and Tabs.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin">
      <summary>
            The skin used to display the auto hide strip and tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin.DockStripGradient">
      <summary>
            The gradient color skin for the DockStrips.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin.TabGradient">
      <summary>
            The gradient color skin for the Tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin.TextFont">
      <summary>
            Font used in AutoHideStrip elements.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin">
      <summary>
            The skin used to display the document and tool strips and tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin.DocumentGradient">
      <summary>
            The skin used to display the Document style DockPane strip and tab.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin.ToolWindowGradient">
      <summary>
            The skin used to display the ToolWindow style DockPane strip and tab.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin.TextFont">
      <summary>
            Font used in DockPaneStrip elements.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient">
      <summary>
            The skin used to display the DockPane strip and tab.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient.DockStripGradient">
      <summary>
            The gradient color skin for the DockStrip.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient.ActiveTabGradient">
      <summary>
            The skin used to display the active DockPane tabs.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient.InactiveTabGradient">
      <summary>
            The skin used to display the inactive DockPane tabs.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient">
      <summary>
            The skin used to display the DockPane ToolWindow strip and tab.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient.ActiveCaptionGradient">
      <summary>
            The skin used to display the active ToolWindow caption.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient.InactiveCaptionGradient">
      <summary>
            The skin used to display the inactive ToolWindow caption.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DockPanelGradient">
      <summary>
            The gradient color skin.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanelGradient.StartColor">
      <summary>
            The beginning gradient color.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanelGradient.EndColor">
      <summary>
            The ending gradient color.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockPanelGradient.LinearGradientMode">
      <summary>
            The gradient mode to display the colors.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.TabGradient">
      <summary>
            The skin used to display the dock pane tab
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.TabGradient.TextColor">
      <summary>
            The text color.
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.DockContentHandler.CloseButtonVisible">
      <summary>
            Determines whether the close button is visible on the content
            </summary>
    </member>
    <member name="M:WeifenLuo.WinFormsUI.Docking.NestedPaneCollection.SwitchPaneWithFirstChild(WeifenLuo.WinFormsUI.Docking.DockPane)">
      <summary>
            Switches a pane with its first child in the pane hierarchy. (The actual hiding happens elsewhere.)
            </summary>
      <param name="pane">Pane to switch</param>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.VS2005DockPaneCaption.CloseButtonVisible">
      <summary>
            Determines whether the close button is visible on the content
            </summary>
    </member>
    <member name="M:WeifenLuo.WinFormsUI.Docking.VS2005DockPaneStrip.CalculateTabs_Document">
      <summary>
            Calculate which tabs are displayed and in what order.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.DocumentTabStripLocation">
      <summary>
            The location to draw the DockPaneStrip for Document style windows.
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.Resources">
      <summary>
              用於查詢當地語系化字串等的強型別資源類別
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Resources.ResourceManager">
      <summary>
              傳回這個類別使用的快取的 ResourceManager 執行個體。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Resources.Culture">
      <summary>
              覆寫目前執行緒的 CurrentUICulture 屬性，對象是所有
              使用這個強型別資源類別的資源查閱。
            </summary>
    </member>
    <member name="T:WeifenLuo.WinFormsUI.Docking.Strings">
      <summary>
              用於查詢當地語系化字串等的強型別資源類別
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.ResourceManager">
      <summary>
              傳回這個類別使用的快取的 ResourceManager 執行個體。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.Culture">
      <summary>
              覆寫目前執行緒的 CurrentUICulture 屬性，對象是所有
              使用這個強型別資源類別的資源查閱。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.Category_Docking">
      <summary>
              查詢類似 Docking 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.Category_DockingNotification">
      <summary>
              查詢類似 Docking Notification 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.Category_Performance">
      <summary>
              查詢類似 Performance 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.Category_PropertyChanged">
      <summary>
              查詢類似 Property Changed 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockAreaEditor_FloatCheckBoxText">
      <summary>
              查詢類似 (Float) 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_AllowEndUserDocking_Description">
      <summary>
              查詢類似 Determines if end user drag and drop docking is allowed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_AutoHidePortion_Description">
      <summary>
              查詢類似 The size to display the content in auto hide mode. Value &lt; 1 to specify the size in portion; value &gt;= 1 to specify the size in pixel. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_CloseButton_Description">
      <summary>
              查詢類似 Enable/Disable the close button of the content. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_CloseButtonVisible_Description">
      <summary>
              查詢類似 Shows or hides the close button of the content. This property does not function with System MDI Document Style. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_Constructor_InvalidForm">
      <summary>
              查詢類似 The form must be of type IDockContent. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_DockAreas_Description">
      <summary>
              查詢類似 Gets or sets a value indicating in which area of the DockPanel the content allowed to show. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_DockStateChanged_Description">
      <summary>
              查詢類似 Occurs when the value of DockState property changed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_HideOnClose_Description">
      <summary>
              查詢類似 Indicates the content will be hidden instead of being closed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_ShowHint_Description">
      <summary>
              查詢類似 The desired docking state when first showing. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_TabPageContextMenu_Description">
      <summary>
              查詢類似 Context menu displayed for the dock pane tab strip. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_TabText_Description">
      <summary>
              查詢類似 The tab text displayed in the dock pane. If not set, the Text property will be used. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContent_ToolTipText_Description">
      <summary>
              查詢類似 The text displayed when mouse hovers over the tab. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_AutoHidePortion_OutOfRange">
      <summary>
              查詢類似 The provided value is out of range. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_DockAreas_InvalidValue">
      <summary>
              查詢類似 Invalid Value: The value of DockAreas conflicts with current DockState. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_DockPane_InvalidValue">
      <summary>
              查詢類似 The pane is invalid. Check the IsFloat and DockPanel properties of this dock pane. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_FloatPane_InvalidValue">
      <summary>
              查詢類似 The pane is invalid. Check the IsFloat and DockPanel properties of this dock pane. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_IsFloat_InvalidValue">
      <summary>
              查詢類似 Invalid value, conflicts with DockableAreas  property. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_SetDockState_InvalidState">
      <summary>
              查詢類似 The dock state is invalid. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_SetDockState_NullPanel">
      <summary>
              查詢類似 The dock panel is null. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_Show_InvalidBeforeContent">
      <summary>
              查詢類似 Invalid beforeContent, it must be contained by the pane. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_Show_InvalidDockState">
      <summary>
              查詢類似 Invalid DockState: Content can not be showed as "Unknown" or "Hidden". 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_Show_InvalidPrevPane">
      <summary>
              查詢類似 The previous pane is invalid. It can not be null, and its docking state must not be auto-hide. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_Show_NullDockPanel">
      <summary>
              查詢類似 DockPanel can not be null. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_Show_NullPane">
      <summary>
              查詢類似 The Pane can not be null. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockContentHandler_ShowHint_InvalidValue">
      <summary>
              查詢類似 Invalid value, check DockableAreas property. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockHandler_TabPageContextMenuStrip_Description">
      <summary>
              查詢類似 Context menu displayed for the dock pane tab strip. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockIndicator_ToolTipText">
      <summary>
              查詢類似 Press SHIFT for docking to full side. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_ActiveContent_InvalidValue">
      <summary>
              查詢類似 Invalid Content: ActiveContent must be one of the visible contents, or null if there is no visible content. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_Constructor_NullContent">
      <summary>
              查詢類似 Invalid argument: Content can not be "null". 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_Constructor_NullDockPanel">
      <summary>
              查詢類似 Invalid argument: The content's DockPanel can not be "null". 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_DockTo_InvalidContainer">
      <summary>
              查詢類似 The specified container conflicts with the IsFloat property. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_DockTo_NoPrevPane">
      <summary>
              查詢類似 The previous pane does not exist in the nested docking pane collection. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_DockTo_NullContainer">
      <summary>
              查詢類似 The container can not be null. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_DockTo_NullPrevPane">
      <summary>
              查詢類似 The previous pane can not be null when the nested docking pane collection is not empty. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_DockTo_SelfPrevPane">
      <summary>
              查詢類似 The previous pane can not be itself. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_FloatWindow_InvalidValue">
      <summary>
              查詢類似 FloatWindow property can not be set to "null" when DockState is DockState.Float. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_SetContentIndex_InvalidContent">
      <summary>
              查詢類似 Invalid Content: Content not within the collection. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_SetContentIndex_InvalidIndex">
      <summary>
              查詢類似 Invalid Index: The index is out of range. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPane_SetDockState_InvalidState">
      <summary>
              查詢類似 The state for the dock pane is invalid. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPaneCaption_ToolTipAutoHide">
      <summary>
              查詢類似 Auto Hide 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPaneCaption_ToolTipClose">
      <summary>
              查詢類似 Close 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPaneCaption_ToolTipOptions">
      <summary>
              查詢類似 Options 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ActiveAutoHideContent_InvalidValue">
      <summary>
              查詢類似 Invalid Content: The content must be auto-hide state and associates with this DockPanel. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ActiveAutoHideContentChanged_Description">
      <summary>
              查詢類似 Occurs when the value of the AutoHideWindow's ActiveContent changed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ActiveContentChanged_Description">
      <summary>
              查詢類似 Occurs when the value of ActiveContentProperty changed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ActiveDocumentChanged_Description">
      <summary>
              查詢類似 Occurs when the value of ActiveDocument property changed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ActivePaneChanged_Description">
      <summary>
              查詢類似 Occurs when the value of ActivePane property changed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_AllowEndUserDocking_Description">
      <summary>
              查詢類似 Determines if the drag and drop docking is allowed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_AllowEndUserNestedDocking_Description">
      <summary>
              查詢類似 Determines if the drag and drop nested docking is allowed. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ContentAdded_Description">
      <summary>
              查詢類似 Occurs when a content added to the DockPanel. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ContentRemoved_Description">
      <summary>
              查詢類似 Occurs when a content removed from the DockPanel. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DefaultFloatWindowSize_Description">
      <summary>
              查詢類似 The default size of float window. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_Description">
      <summary>
              查詢類似 Provides Visual Studio .Net style docking. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockBottomPortion_Description">
      <summary>
              查詢類似 Size of the bottom docking window. Value &lt; 1 to specify the size in portion; value &gt; 1 to specify the size in pixels. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockLeftPortion_Description">
      <summary>
              查詢類似 Size of the left docking window. Value &lt; 1 to specify the size in portion; value &gt; 1 to specify the size in pixels. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockPanelSkin">
      <summary>
              查詢類似 The visual skin to use when displaying the docked windows. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockPanelSkinStyle">
      <summary>
              查詢類似 The predefined style used as the base for the skin. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockRightPortion_Description">
      <summary>
              查詢類似 Size of the right docking window. Value &lt; 1 to specify the size in portion; value &gt; 1 to specify the size in pixels. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DockTopPortion_Description">
      <summary>
              查詢類似 Size of the top docking window. Value &lt; 1 to specify the size in portion; value &gt; 1 to specify the size in pixels. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DocumentStyle_Description">
      <summary>
              查詢類似 The style of the document window. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_DocumentTabStripLocation">
      <summary>
              查詢類似 Determines where the tab strip for Document style content is drawn. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_LoadFromXml_AlreadyInitialized">
      <summary>
              查詢類似 The DockPanel has already been initialized. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_LoadFromXml_InvalidFormatVersion">
      <summary>
              查詢類似 The configuration file's version is invalid. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_LoadFromXml_InvalidXmlFormat">
      <summary>
              查詢類似 The XML file format is invalid. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ParentForm_Invalid">
      <summary>
              查詢類似 Invalid parent form. When using DockingMdi or SystemMdi document style, the DockPanel control must be the child control of the main MDI container form. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_Persistor_XmlFileComment1">
      <summary>
              查詢類似 DockPanel configuration file. Author: Weifen Luo, all rights reserved. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_Persistor_XmlFileComment2">
      <summary>
              查詢類似 !!! AUTOMATICALLY GENERATED FILE. DO NOT MODIFY !!! 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_RightToLeftLayout_Description">
      <summary>
              查詢類似 Indicates whether the control layout is right-to-left when the RightToLeft property is set to Yes. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_SetPaneIndex_InvalidIndex">
      <summary>
              查詢類似 Invalid Index: The index is out of range. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_SetPaneIndex_InvalidPane">
      <summary>
              查詢類似 Invalid Pane: DockPane not within the collection. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ShowAutoHideContentOnHover_Description">
      <summary>
              查詢類似 Shows the hidden autohide content when hovering over the tab.  When disabled, the tab must be clicked to show the content. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_ShowDocumentIcon_Description">
      <summary>
              查詢類似 Determines if the document icon will be displayed in the tab strip. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPanel_SupportDeeplyNestedContent_Description">
      <summary>
              查詢類似 Support deeply nested controls.  Disabling this setting may improve resize performance but may cause heavily nested content not to resize. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPaneStrip_ToolTipClose">
      <summary>
              查詢類似 Close 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.DockPaneStrip_ToolTipWindowList">
      <summary>
              查詢類似 Window List 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.FloatWindow_Constructor_NullDockPanel">
      <summary>
              查詢類似 Invalid argument: DockPanel can not be "null". 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.FloatWindow_SetPaneIndex_InvalidIndex">
      <summary>
              查詢類似 Invalid Index: The index is out of range. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.FloatWindow_SetPaneIndex_InvalidPane">
      <summary>
              查詢類似 Invalid Pane: DockPane not within the collection. 的當地語系化字串。
            </summary>
    </member>
    <member name="P:WeifenLuo.WinFormsUI.Docking.Strings.IDockDragSource_DockTo_InvalidPanel">
      <summary>
              查詢類似 Invalid DockPanel. 的當地語系化字串。
            </summary>
    </member>
    <member name="T:log4net.Appender.IAppender">
      <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
      <remarks>
        <para>
            Implementors should consider extending the <see cref="T:log4net.Appender.AppenderSkeleton" />
            class which provides a default implementation of this interface.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Appender.IAppender.Close">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)">
      <summary>
            Log the logging event in Appender specific way.
            </summary>
      <param name="loggingEvent">The event to log</param>
      <remarks>
        <para>
            This method is called to log a message into this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.IAppender.Name">
      <summary>
            Gets or sets the name of this appender.
            </summary>
      <value>The name of the appender.</value>
      <remarks>
        <para>The name uniquely identifies the appender.</para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.IBulkAppender">
      <summary>
            Interface for appenders that support bulk logging.
            </summary>
      <remarks>
        <para>
            This interface extends the <see cref="T:log4net.Appender.IAppender" /> interface to
            support bulk logging of <see cref="T:log4net.Core.LoggingEvent" /> objects. Appenders
            should only implement this interface if they can bulk log efficiently.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Appender.IBulkAppender.DoAppend(log4net.Core.LoggingEvent[])">
      <summary>
            Log the array of logging events in Appender specific way.
            </summary>
      <param name="loggingEvents">The events to log</param>
      <remarks>
        <para>
            This method is called to log an array of events into this appender.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IOptionHandler">
      <summary>
            Interface used to delay activate a configured object.
            </summary>
      <remarks>
        <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
        <para>
            If a component implements this interface then the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method 
            must be called by the container after its all the configured properties have been set 
            and before the component can be used.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.IOptionHandler.ActivateOptions">
      <summary>
            Activate the options that were previously set with calls to properties.
            </summary>
      <remarks>
        <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
        <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AppenderSkeleton">
      <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" />. 
            </summary>
      <remarks>
        <para>
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferSize">
      <summary>
            Initial buffer size
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferMaxCapacity">
      <summary>
            Maximum buffer size before it is recycled
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
      <summary>
            The layout of this appender.
            </summary>
      <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_name">
      <summary>
            The name of this appender.
            </summary>
      <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Name" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
      <summary>
            The level threshold of this appender.
            </summary>
      <remarks>
        <para>
            There is no level threshold filtering by default.
            </para>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
      <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
      <remarks>
        <para>
            It is assumed and enforced that errorHandler is never null.
            </para>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
      <summary>
            The first filter in the filter chain.
            </summary>
      <remarks>
        <para>
            Set to <c>null</c> initially.
            </para>
        <para>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
      <summary>
            The last filter in the filter chain.
            </summary>
      <remarks>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
      <summary>
            Flag indicating if this appender is closed.
            </summary>
      <remarks>
            See <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_recursiveGuard">
      <summary>
            The guard prevents an appender from repeatedly calling its own DoAppend method
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_renderWriter">
      <summary>
            StringWriter used to render events
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.declaringType">
      <summary>
            The fully qualified type of the AppenderSkeleton class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>Empty default constructor</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
      <summary>
            Finalizes this appender by calling the implementation's 
            <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> method.
            </summary>
      <remarks>
        <para>
            If this appender has not been closed then the <c>Finalize</c> method
            will call <see cref="M:log4net.Appender.AppenderSkeleton.Close" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Close">
      <summary>
            Closes the appender and release resources.
            </summary>
      <remarks>
        <para>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
        <para>
            This method cannot be overridden by subclasses. This method 
            delegates the closing of the appender to the <see cref="M:log4net.Appender.AppenderSkeleton.OnClose" />
            method which must be overridden in the subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)">
      <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent)" /> method
            which is called by this method.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
            </item>
            <item>
              <description>
            		Calls <see cref="M:PreAppendCheck()" /> and checks that 
            		it returns <c>true</c>.</description>
            </item>
          </list>
        </para>
        <para>
            If all of the above steps succeed then the <paramref name="loggingEvent" />
            will be passed to the abstract <see cref="M:Append(LoggingEvent)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])">
      <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent[])" /> method.
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent[])" /> method
            which is called by this method.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvents" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvents" />.
            		</description>
            </item>
            <item>
              <description>
            		Calls <see cref="M:PreAppendCheck()" /> and checks that 
            		it returns <c>true</c>.</description>
            </item>
          </list>
        </para>
        <para>
            If all of the above steps succeed then the <paramref name="loggingEvents" />
            will be passed to the <see cref="M:Append(LoggingEvent[])" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.FilterEvent(log4net.Core.LoggingEvent)">
      <summary>
            Test if the logging event should we output by this appender
            </summary>
      <param name="loggingEvent">the event to test</param>
      <returns>
        <c>true</c> if the event should be output, <c>false</c> if the event should be ignored</returns>
      <remarks>
        <para>
            This method checks the logging event against the threshold level set
            on this appender and also against the filters specified on this
            appender.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
            </item>
          </list>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
      <summary>
            Adds a filter to the end of the filter chain.
            </summary>
      <param name="filter">the filter to add to this appender</param>
      <remarks>
        <para>
            The Filters are organized in a linked list.
            </para>
        <para>
            Setting this property causes the new filter to be pushed onto the 
            back of the filter chain.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
      <summary>
            Clears the filter list for this appender.
            </summary>
      <remarks>
        <para>
            Clears the filter list for this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
      <summary>
            Checks if the message level is below this appender's threshold.
            </summary>
      <param name="level">
        <see cref="T:log4net.Core.Level" /> to test against.</param>
      <remarks>
        <para>
            If there is no threshold set, then the return value is always <c>true</c>.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the <paramref name="level" /> meets the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> 
            requirements of this appender.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.OnClose">
      <summary>
            Is called when the appender is closed. Derived classes should override 
            this method if resources need to be released.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)">
      <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton" /> should implement this method 
            to perform actual logging.
            </summary>
      <param name="loggingEvent">The event to append.</param>
      <remarks>
        <para>
            A subclass must implement this method to perform
            logging of the <paramref name="loggingEvent" />.
            </para>
        <para>This method will be called by <see cref="M:DoAppend(LoggingEvent)" />
            if all the conditions listed for that method are met.
            </para>
        <para>
            To restrict the logging of events in the appender
            override the <see cref="M:PreAppendCheck()" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Append a bulk array of logging events.
            </summary>
      <param name="loggingEvents">the array of logging events</param>
      <remarks>
        <para>
            This base class implementation calls the <see cref="M:Append(LoggingEvent)" />
            method for each element in the bulk array.
            </para>
        <para>
            A sub class that can better process a bulk array of events should
            override this method in addition to <see cref="M:Append(LoggingEvent)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
      <summary>
            Called before <see cref="M:Append(LoggingEvent)" /> as a precondition.
            </summary>
      <remarks>
        <para>
            This method is called by <see cref="M:DoAppend(LoggingEvent)" />
            before the call to the abstract <see cref="M:Append(LoggingEvent)" /> method.
            </para>
        <para>
            This method can be overridden in a subclass to extend the checks 
            made before the event is passed to the <see cref="M:Append(LoggingEvent)" /> method.
            </para>
        <para>
            A subclass should ensure that they delegate this call to
            this base class if it is overridden.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the call to <see cref="M:Append(LoggingEvent)" /> should proceed.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)">
      <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
      <param name="loggingEvent">The event to render.</param>
      <returns>The event rendered as a string.</returns>
      <remarks>
        <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
        <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
        <para>
            Where possible use the alternative version of this method
            <see cref="M:RenderLoggingEvent(TextWriter,LoggingEvent)" />.
            That method streams the rendering onto an existing Writer
            which can give better performance if the caller already has
            a <see cref="T:System.IO.TextWriter" /> open and ready for writing.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
      <param name="loggingEvent">The event to render.</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
        <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
        <para>
            Use this method in preference to <see cref="M:RenderLoggingEvent(LoggingEvent)" />
            where possible. If, however, the caller needs to render the event
            to a string then <see cref="M:RenderLoggingEvent(LoggingEvent)" /> does
            provide an efficient mechanism for doing so.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
      <summary>
            Gets or sets the threshold <see cref="T:log4net.Core.Level" /> of this appender.
            </summary>
      <value>
            The threshold <see cref="T:log4net.Core.Level" /> of the appender. 
            </value>
      <remarks>
        <para>
            All log events with lower level than the threshold level are ignored 
            by the appender.
            </para>
        <para>
            In configuration files this option is specified by setting the
            value of the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> option to a level
            string, such as "DEBUG", "INFO" and so on.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </summary>
      <value>The <see cref="T:log4net.Core.IErrorHandler" /> of the appender</value>
      <remarks>
        <para>
            The <see cref="T:log4net.Appender.AppenderSkeleton" /> provides a default 
            implementation for the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> property. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.FilterHead">
      <summary>
            The filter chain.
            </summary>
      <value>The head of the filter chain filter chain.</value>
      <remarks>
        <para>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Layout">
      <summary>
            Gets or sets the <see cref="T:log4net.Layout.ILayout" /> for this appender.
            </summary>
      <value>The layout of the appender.</value>
      <remarks>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" /> for more information.
            </para>
      </remarks>
      <seealso cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" />
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Name">
      <summary>
            Gets or sets the name of this appender.
            </summary>
      <value>The name of the appender.</value>
      <remarks>
        <para>
            The name uniquely identifies the appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.RequiresLayout">
      <summary>
            Tests if this appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
      <remarks>
        <para>
            In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.
            </para>
        <para>
            This default implementation always returns <c>false</c>.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the appender requires a layout object, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:log4net.Appender.BufferingAppenderSkeleton">
      <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" /> that 
            buffers events in a fixed size buffer.
            </summary>
      <remarks>
        <para>
            This base class should be used by appenders that need to buffer a 
            number of events before logging them. For example the <see cref="T:log4net.Appender.AdoNetAppender" /> 
            buffers events and then submits the entire contents of the buffer to 
            the underlying database in one go.
            </para>
        <para>
            Subclasses should override the <see cref="M:SendBuffer(LoggingEvent[])" />
            method to deliver the buffered events.
            </para>
        <para>The BufferingAppenderSkeleton maintains a fixed size cyclic 
            buffer of events. The size of the buffer is set using 
            the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> property.
            </para>
        <para>A <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> is used to inspect 
            each event as it arrives in the appender. If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> 
            triggers, then the current buffer is sent immediately 
            (see <see cref="M:SendBuffer(LoggingEvent[])" />). Otherwise the event 
            is stored in the buffer. For example, an evaluator can be used to 
            deliver the events immediately when an ERROR event arrives.
            </para>
        <para>
            The buffering appender can be configured in a <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode. 
            By default the appender is NOT lossy. When the buffer is full all 
            the buffered events are sent with <see cref="M:SendBuffer(LoggingEvent[])" />.
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property is set to <c>true</c> then the 
            buffer will not be sent when it is full, and new events arriving 
            in the appender will overwrite the oldest event in the buffer. 
            In lossy mode the buffer will only be sent when the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" />
            triggers. This can be useful behavior when you need to know about 
            ERROR events but not about events with a lower level, configure an 
            evaluator that will trigger when an ERROR event arrives, the whole 
            buffer will be sent which gives a history of events leading up to
            the ERROR event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE">
      <summary>
            The default buffer size.
            </summary>
      <remarks>
            The default size of the cyclic buffer used to store events.
            This is set to 512 by default.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_bufferSize">
      <summary>
            The size of the cyclic buffer used to hold the logging events.
            </summary>
      <remarks>
            Set to <see cref="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE" /> by default.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_cb">
      <summary>
            The cyclic buffer used to store the logging events.
            </summary>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_evaluator">
      <summary>
            The triggering event evaluator that causes the buffer to be sent immediately.
            </summary>
      <remarks>
            The object that is used to determine if an event causes the entire
            buffer to be sent immediately. This field can be <c>null</c>, which 
            indicates that event triggering is not to be done. The evaluator
            can be set using the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> property. If this appender
            has the <see cref="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy" /> (<see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property) set to 
            <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be set.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy">
      <summary>
            Indicates if the appender should overwrite events in the cyclic buffer 
            when it becomes full, or if the buffer should be flushed when the 
            buffer is full.
            </summary>
      <remarks>
            If this field is set to <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must 
            be set.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossyEvaluator">
      <summary>
            The triggering event evaluator filters discarded events.
            </summary>
      <remarks>
            The object that is used to determine if an event that is discarded should
            really be discarded or if it should be sent to the appenders. 
            This field can be <c>null</c>, which indicates that all discarded events will
            be discarded. 
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_fixFlags">
      <summary>
            Value indicating which fields in the event should be fixed
            </summary>
      <remarks>
            By default all fields are fixed
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_eventMustBeFixed">
      <summary>
            The events delivered to the subclass must be fixed.
            </summary>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
      <remarks>
        <para>
            Protected default constructor to allow subclassing.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
      <param name="eventMustBeFixed">the events passed through this appender must be
            fixed by the time that they arrive in the derived class' <c>SendBuffer</c> method.</param>
      <remarks>
        <para>
            Protected constructor to allow subclassing.
            </para>
        <para>
            The <paramref name="eventMustBeFixed" /> should be set if the subclass
            expects the events delivered to be fixed even if the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to zero, i.e. when no buffering occurs.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush">
      <summary>
            Flush the currently buffered events
            </summary>
      <remarks>
        <para>
            Flushes any events that have been buffered.
            </para>
        <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will NOT be flushed to the appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Boolean)">
      <summary>
            Flush the currently buffered events
            </summary>
      <param name="flushLossyBuffer">set to <c>true</c> to flush the buffer of lossy events</param>
      <remarks>
        <para>
            Flushes events that have been buffered. If <paramref name="flushLossyBuffer" /> is
            <c>false</c> then events will only be flushed if this buffer is non-lossy mode.
            </para>
        <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will only be flushed if <paramref name="flushLossyBuffer" /> is <c>true</c>.
            In this case the contents of the buffer will be tested against the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator" /> and if triggering will be output. All other buffered
            events will be discarded.
            </para>
        <para>
            If <paramref name="flushLossyBuffer" /> is <c>true</c> then the buffer will always
            be emptied by calling this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.OnClose">
      <summary>
            Close this appender instance.
            </summary>
      <remarks>
        <para>
            Close this appender instance. If this appender is marked
            as not <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> then the remaining events in 
            the buffer must be sent when the appender is closed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>
            Stores the <paramref name="loggingEvent" /> in the cyclic buffer.
            </para>
        <para>
            The buffer will be sent (i.e. passed to the <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" /> 
            method) if one of the following conditions is met:
            </para>
        <list type="bullet">
          <item>
            <description>The cyclic buffer is full and this appender is
            		marked as not lossy (see <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />)</description>
          </item>
          <item>
            <description>An <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> is set and
            		it is triggered for the <paramref name="loggingEvent" />
            		specified.</description>
          </item>
        </list>
        <para>
            Before the event is stored in the buffer it is fixed
            (see <see cref="M:LoggingEvent.FixVolatileData(FixFlags)" />) to ensure that
            any data referenced by the event will be valid when the buffer
            is processed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendFromBuffer(log4net.Core.LoggingEvent,log4net.Util.CyclicBuffer)">
      <summary>
            Sends the contents of the buffer.
            </summary>
      <param name="firstLoggingEvent">The first logging event.</param>
      <param name="buffer">The buffer containing the events that need to be send.</param>
      <remarks>
        <para>
            The subclass must override <see cref="M:SendBuffer(LoggingEvent[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the events.
            </summary>
      <param name="events">The events that need to be send.</param>
      <remarks>
        <para>
            The subclass must override this method to process the buffered events.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Lossy">
      <summary>
            Gets or sets a value that indicates whether the appender is lossy.
            </summary>
      <value>
        <c>true</c> if the appender is lossy, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            This appender uses a buffer to store logging events before 
            delivering them. A triggering event causes the whole buffer
            to be send to the remote sink. If the buffer overruns before
            a triggering event then logging events could be lost. Set
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> to <c>false</c> to prevent logging events 
            from being lost.
            </para>
        <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize">
      <summary>
            Gets or sets the size of the cyclic buffer used to hold the 
            logging events.
            </summary>
      <value>
            The size of the cyclic buffer used to hold the logging events.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option takes a positive integer
            representing the maximum number of logging events to collect in 
            a cyclic buffer. When the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </para>
        <para>
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to a value less than
            or equal to 1 then no buffering will occur. The logging event
            will be delivered synchronously (depending on the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />
            and <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> properties). Otherwise the event will
            be buffered.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the 
            buffer to be sent immediately.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the buffer to be
            sent immediately.
            </value>
      <remarks>
        <para>
            The evaluator will be called for each event that is appended to this 
            appender. If the evaluator triggers then the current buffer will 
            immediately be sent (see <see cref="M:SendBuffer(LoggingEvent[])" />).
            </para>
        <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator">
      <summary>
            Gets or sets the value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </summary>
      <value>
            The value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </value>
      <remarks>
        <para>
            The evaluator will be called for each event that is discarded from this 
            appender. If the evaluator triggers then the current buffer will immediately 
            be sent (see <see cref="M:SendBuffer(LoggingEvent[])" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.OnlyFixPartialEventData">
      <summary>
            Gets or sets a value indicating if only part of the logging event data
            should be fixed.
            </summary>
      <value>
        <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            Setting this property to <c>true</c> will cause only part of the
            event data to be fixed and serialized. This will improve performance.
            </para>
        <para>
            See <see cref="M:LoggingEvent.FixVolatileData(FixFlags)" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Fix">
      <summary>
            Gets or sets a the fields that will be fixed in the event
            </summary>
      <value>
            The event fields that will be fixed before the event is buffered
            </value>
      <remarks>
        <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
      </remarks>
      <seealso cref="P:log4net.Core.LoggingEvent.Fix" />
    </member>
    <member name="T:log4net.Appender.AdoNetAppender">
      <summary>
            Appender that logs to a database.
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Appender.AdoNetAppender" /> appends logging events to a table within a
            database. The appender can be configured to specify the connection 
            string by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionString" /> property. 
            The connection type (provider) can be specified by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" />
            property. For more information on database connection strings for
            your specific database see <a href="http://www.connectionstrings.com/">http://www.connectionstrings.com/</a>.
            </para>
        <para>
            Records are written into the database either using a prepared
            statement or a stored procedure. The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property
            is set to <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify a prepared statement
            or to <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify a stored
            procedure.
            </para>
        <para>
            The prepared statement text or the name of the stored procedure
            must be set in the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property.
            </para>
        <para>
            The prepared statement or stored procedure can take a number
            of parameters. Parameters are added using the <see cref="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)" />
            method. This adds a single <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> to the
            ordered list of parameters. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" />
            type may be subclassed if required to provide database specific
            functionality. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> specifies
            the parameter name, database type, size, and how the value should
            be generated using a <see cref="T:log4net.Layout.ILayout" />.
            </para>
      </remarks>
      <example>
            An example of a SQL Server table that could be logged to:
            <code lang="SQL">
            CREATE TABLE [dbo].[Log] ( 
              [ID] [int] IDENTITY (1, 1) NOT NULL ,
              [Date] [datetime] NOT NULL ,
              [Thread] [varchar] (255) NOT NULL ,
              [Level] [varchar] (20) NOT NULL ,
              [Logger] [varchar] (255) NOT NULL ,
              [Message] [varchar] (4000) NOT NULL 
            ) ON [PRIMARY]
            </code></example>
      <example>
            An example configuration to log to the above table:
            <code lang="XML" escaped="true"><appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender"><connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /><connectionString value="data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa" /><commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)" /><parameter><parameterName value="@log_date" /><dbType value="DateTime" /><layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" /></parameter><parameter><parameterName value="@thread" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%thread" /></parameter><parameter><parameterName value="@log_level" /><dbType value="String" /><size value="50" /><layout type="log4net.Layout.PatternLayout" value="%level" /></parameter><parameter><parameterName value="@logger" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%logger" /></parameter><parameter><parameterName value="@message" /><dbType value="String" /><size value="4000" /><layout type="log4net.Layout.PatternLayout" value="%message" /></parameter></appender></code></example>
      <author>Julian Biddle</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Lance Nehring</author>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_usePreparedCommand">
      <summary>
            Flag to indicate if we are using a command object
            </summary>
      <remarks>
        <para>
            Set to <c>true</c> when the appender is to use a prepared
            statement or stored procedure to insert into the database.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_parameters">
      <summary>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </summary>
      <remarks>
        <para>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_dbConnection">
      <summary>
            The <see cref="T:System.Data.IDbConnection" /> that will be used
            to insert logging events into a database.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_dbCommand">
      <summary>
            The database command.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_connectionString">
      <summary>
            Database connection string.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_appSettingsKey">
      <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_connectionStringName">
      <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_connectionType">
      <summary>
            String type name of the <see cref="T:System.Data.IDbConnection" /> type name.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_commandText">
      <summary>
            The text of the command.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_commandType">
      <summary>
            The command type.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_useTransactions">
      <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_reconnectOnError">
      <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.declaringType">
      <summary>
            The fully qualified type of the AdoNetAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.#ctor">
      <summary> 
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppender" /> class.
            </summary>
      <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.OnClose">
      <summary>
            Override the parent method to close the database
            </summary>
      <remarks>
        <para>
            Closes the database command and database connection.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Inserts the events into the database.
            </summary>
      <param name="events">The events to insert into the database.</param>
      <remarks>
        <para>
            Insert all the events specified in the <paramref name="events" />
            array into the database.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)">
      <summary>
            Adds a parameter to the command.
            </summary>
      <param name="parameter">The parameter to add to the command.</param>
      <remarks>
        <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
      <summary>
            Writes the events to the database using the transaction specified.
            </summary>
      <param name="dbTran">The transaction that the events will be executed under.</param>
      <param name="events">The array of events to insert into the database.</param>
      <remarks>
        <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:log4net.Appender.AdoNetAppender.UseTransactions" />
            property for more information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)">
      <summary>
            Formats the log message into database statement text.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
      <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand" />.
            </returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.CreateConnection(System.Type,System.String)">
      <summary>
            Creates an <see cref="T:System.Data.IDbConnection" /> instance used to connect to the database.
            </summary>
      <remarks>
            This method is called whenever a new IDbConnection is needed (i.e. when a reconnect is necessary).
            </remarks>
      <param name="connectionType">The <see cref="T:System.Type" /> of the <see cref="T:System.Data.IDbConnection" /> object.</param>
      <param name="connectionString">The connectionString output from the ResolveConnectionString method.</param>
      <returns>An <see cref="T:System.Data.IDbConnection" /> instance with a valid connection string.</returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionString(System.String@)">
      <summary>
            Resolves the connection string from the ConnectionString, ConnectionStringName, or AppSettingsKey
            property.
            </summary>
      <remarks>
            ConnectiongStringName is only supported on .NET 2.0 and higher.
            </remarks>
      <param name="connectionStringContext">Additional information describing the connection string.</param>
      <returns>A connection string used to connect to the database.</returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionType">
      <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
      <remarks>
        <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> property.
            </para>
        <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
      </remarks>
      <returns>The <see cref="T:System.Type" /> of the ADO.NET provider</returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseCommand">
      <summary>
            Prepares the database command and initialize the parameters.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseConnection">
      <summary>
            Connects to the database.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.DisposeCommand(System.Boolean)">
      <summary>
            Cleanup the existing command.
            </summary>
      <param name="ignoreException">
            If true, a message will be written using LogLog.Warn if an exception is encountered when calling Dispose.
            </param>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.DiposeConnection">
      <summary>
            Cleanup the existing connection.
            </summary>
      <remarks>
            Calls the IDbConnection's <see cref="M:System.Data.IDbConnection.Close" /> method.
            </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ConnectionString">
      <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
      <value>
            The database connection string used to connect to the database.
            </value>
      <remarks>
        <para>
            The connections string is specific to the connection type.
            See <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> for more information.
            </para>
      </remarks>
      <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code></example>
      <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code></example>
      <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code></example>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.AppSettingsKey">
      <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ConnectionStringName">
      <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
      <remarks>
            This property requires at least .NET 2.0.
            </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ConnectionType">
      <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection" /> connection
            that should be created.
            </summary>
      <value>
            The type name of the <see cref="T:System.Data.IDbConnection" /> connection.
            </value>
      <remarks>
        <para>
            The type name of the ADO.NET provider to use.
            </para>
        <para>
            The default is to use the OLE DB provider.
            </para>
      </remarks>
      <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
      <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
      <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
      <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.CommandText">
      <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
      <value>
            The command text used to insert logging events into the database.
            </value>
      <remarks>
        <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
        <para>
            The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.CommandType">
      <summary>
            Gets or sets the command type to execute.
            </summary>
      <value>
            The command type to execute.
            </value>
      <remarks>
        <para>
            This value may be either <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property is the name of a stored procedure
            to execute.
            </para>
        <para>
            The default value is <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.UseTransactions">
      <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
      <value>
        <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
      <remarks>
        <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
        <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ReconnectOnError">
      <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
      <value>
        <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
      <remarks>
        <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
        <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
        <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.Connection">
      <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection" />.
            </summary>
      <value>
            The underlying <see cref="T:System.Data.IDbConnection" />.
            </value>
      <remarks>
        <see cref="T:log4net.Appender.AdoNetAppender" /> creates a <see cref="T:System.Data.IDbConnection" /> to insert 
            logging events into a database.  Classes deriving from <see cref="T:log4net.Appender.AdoNetAppender" /> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection" />.  Use the 
            underlying <see cref="T:System.Data.IDbConnection" /> returned from <see cref="P:log4net.Appender.AdoNetAppender.Connection" /> if 
            you require access beyond that which <see cref="T:log4net.Appender.AdoNetAppender" /> provides.
            </remarks>
    </member>
    <member name="T:log4net.Appender.AdoNetAppenderParameter">
      <summary>
            Parameter type used by the <see cref="T:log4net.Appender.AdoNetAppender" />.
            </summary>
      <remarks>
        <para>
            This class provides the basic database parameter properties
            as defined by the <see cref="T:System.Data.IDbDataParameter" /> interface.
            </para>
        <para>This type can be subclassed to provide database specific
            functionality. The two methods that are called externally are
            <see cref="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)" /> and <see cref="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)" />.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_parameterName">
      <summary>
            The name of this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_dbType">
      <summary>
            The database type for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_inferType">
      <summary>
            Flag to infer type rather than use the DbType
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_precision">
      <summary>
            The precision for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_scale">
      <summary>
            The scale for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_size">
      <summary>
            The size for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_layout">
      <summary>
            The <see cref="T:log4net.Layout.IRawLayout" /> to use to render the
            logging event into an object for this parameter.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> class.
            </summary>
      <remarks>
            Default constructor for the AdoNetAppenderParameter class.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
      <summary>
            Prepare the specified database command object.
            </summary>
      <param name="command">The command to prepare.</param>
      <remarks>
        <para>
            Prepares the database command object by adding
            this parameter to its collection of parameters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)">
      <summary>
            Renders the logging event and set the parameter value in the command.
            </summary>
      <param name="command">The command containing the parameter.</param>
      <param name="loggingEvent">The event to be rendered.</param>
      <remarks>
        <para>
            Renders the logging event using this parameters layout
            object. Sets the value of the parameter on the command object.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.ParameterName">
      <summary>
            Gets or sets the name of this parameter.
            </summary>
      <value>
            The name of this parameter.
            </value>
      <remarks>
        <para>
            The name of this parameter. The parameter name
            must match up to a named parameter to the SQL stored procedure
            or prepared statement.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.DbType">
      <summary>
            Gets or sets the database type for this parameter.
            </summary>
      <value>
            The database type for this parameter.
            </value>
      <remarks>
        <para>
            The database type for this parameter. This property should
            be set to the database type from the <see cref="P:log4net.Appender.AdoNetAppenderParameter.DbType" />
            enumeration. See <see cref="P:System.Data.IDataParameter.DbType" />.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the type from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDataParameter.DbType" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Precision">
      <summary>
            Gets or sets the precision for this parameter.
            </summary>
      <value>
            The precision for this parameter.
            </value>
      <remarks>
        <para>
            The maximum number of digits used to represent the Value.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the precision from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Precision" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Scale">
      <summary>
            Gets or sets the scale for this parameter.
            </summary>
      <value>
            The scale for this parameter.
            </value>
      <remarks>
        <para>
            The number of decimal places to which Value is resolved.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the scale from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Scale" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Size">
      <summary>
            Gets or sets the size for this parameter.
            </summary>
      <value>
            The size for this parameter.
            </value>
      <remarks>
        <para>
            The maximum size, in bytes, of the data within the column.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the size from the value.
            </para>
        <para>
            For BLOB data types like VARCHAR(max) it may be impossible to infer the value automatically, use -1 as the size in this case.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Size" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Layout">
      <summary>
            Gets or sets the <see cref="T:log4net.Layout.IRawLayout" /> to use to 
            render the logging event into an object for this 
            parameter.
            </summary>
      <value>
            The <see cref="T:log4net.Layout.IRawLayout" /> used to render the
            logging event into an object for this parameter.
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Layout.IRawLayout" /> that renders the value for this
            parameter.
            </para>
        <para>
            The <see cref="T:log4net.Layout.RawLayoutConverter" /> can be used to adapt
            any <see cref="T:log4net.Layout.ILayout" /> into a <see cref="T:log4net.Layout.IRawLayout" />
            for use in the property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender">
      <summary>
            Appends logging events to the terminal using ANSI color escape sequences.
            </summary>
      <remarks>
        <para>
            AnsiColorTerminalAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific level of message to be set.
            </para>
        <note>
            This appender expects the terminal to understand the VT100 control set 
            in order to interpret the color codes. If the terminal or console does not
            understand the control codes the behavior is not defined.
            </note>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
        <para>
            When configuring the ANSI colored terminal appender, a mapping should be
            specified to map a logging level to a color. For example:
            </para>
        <code lang="XML" escaped="true">
          <mapping>
            <level value="ERROR" />
            <foreColor value="White" />
            <backColor value="Red" />
            <attributes value="Bright,Underscore" />
          </mapping>
          <mapping>
            <level value="DEBUG" />
            <backColor value="Green" />
          </mapping>
        </code>
        <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item></list>
            These color values cannot be combined together to make new colors.
            </para>
        <para>
            The attributes can be any combination of the following:
            <list type="bullet"><item><term>Bright</term><description>foreground is brighter</description></item><item><term>Dim</term><description>foreground is dimmer</description></item><item><term>Underscore</term><description>message is underlined</description></item><item><term>Blink</term><description>foreground is blinking (does not work on all terminals)</description></item><item><term>Reverse</term><description>foreground and background are reversed</description></item><item><term>Hidden</term><description>output is hidden</description></item><item><term>Strikethrough</term><description>message has a line through it</description></item></list>
            While any of these attributes may be combined together not all combinations
            work well together, for example setting both <i>Bright</i> and <i>Dim</i> attributes makes
            no sense.
            </para>
      </remarks>
      <author>Patrick Wagstrom</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes">
      <summary>
            The enum of possible display attributes
            </summary>
      <remarks>
        <para>
            The following flags can be combined together to
            form the ANSI color attributes.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiColor">
      <summary>
            The enum of possible foreground or background color values for 
            use with the color mapping method
            </summary>
      <remarks>
        <para>
            The output can be in one for the following ANSI colors.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ActivateOptions">
      <summary>
            Initialize the options for the object
            </summary>
      <remarks>
        <para>
            Combine the <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> together
            and append the attributes.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor">
      <summary>
            The mapped foreground color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped foreground color for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor">
      <summary>
            The mapped background color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped background color for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes">
      <summary>
            The color attributes for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The color attributes for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.CombinedColor">
      <summary>
            The combined <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" />, <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> and
            <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes" /> suitable for setting the ansi terminal color.
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.PostEventCodes">
      <summary>
            Ansi code to reset terminal
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_writeToErrorStream">
      <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_levelMapping">
      <summary>
            Mapping from level object to color value
            </summary>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.AddMapping(log4net.Appender.AnsiColorTerminalAppender.LevelColors)">
      <summary>
            Add a mapping of level to color
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colours
            for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to color mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.Target">
      <summary>
            Target is the value of the console output stream.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LevelMappingEntry">
      <summary>
            An entry in the <see cref="T:log4net.Util.LevelMapping" /></summary>
      <remarks>
        <para>
            This is an abstract base class for types that are stored in the
            <see cref="T:log4net.Util.LevelMapping" /> object.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.LevelMappingEntry.#ctor">
      <summary>
            Default protected constructor
            </summary>
      <remarks>
        <para>
            Default protected constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMappingEntry.ActivateOptions">
      <summary>
            Initialize any options defined on this entry
            </summary>
      <remarks>
        <para>
            Should be overridden by any classes that need to initialise based on their options
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LevelMappingEntry.Level">
      <summary>
            The level that is the key for this mapping 
            </summary>
      <value>
            The <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this mapping 
            </value>
      <remarks>
        <para>
            Get or set the <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this
            mapping subclass.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AppenderCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Appender.IAppender" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
      <exclude />
    </member>
    <member name="T:log4net.Appender.AppenderCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.#ctor(log4net.Appender.AppenderCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection">
      <exclude />
    </member>
    <member name="F:log4net.Appender.AppenderCollection.EmptyCollection">
      <summary>
            An empty readonly static AppenderCollection
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ReadOnly(log4net.Appender.AppenderCollection)">
      <summary>
            Creates a read-only wrapper for a <c>AppenderCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            An <c>AppenderCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>AppenderCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <c>AppenderCollection</c>.
            </summary>
      <param name="c">The <c>AppenderCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.IAppender[])">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Appender.IAppender" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[])">
      <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[],System.Int32)">
      <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Add(log4net.Appender.IAppender)">
      <summary>
            Adds a <see cref="T:log4net.Appender.IAppender" /> to the end of the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Clear">
      <summary>
            Removes all elements from the <c>AppenderCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Appender.AppenderCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Contains(log4net.Appender.IAppender)">
      <summary>
            Determines whether a given <see cref="T:log4net.Appender.IAppender" /> is in the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>AppenderCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IndexOf(log4net.Appender.IAppender)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Appender.IAppender" />
            in the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to locate in the <c>AppenderCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>AppenderCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Insert(System.Int32,log4net.Appender.IAppender)">
      <summary>
            Inserts an element into the <c>AppenderCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Remove(log4net.Appender.IAppender)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Appender.IAppender" /> from the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to remove from the <c>AppenderCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Appender.IAppender" /> was not found in the <c>AppenderCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>AppenderCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>AppenderCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Appender.AppenderCollection.Enumerator" /> for the entire <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.AppenderCollection)">
      <summary>
            Adds the elements of another <c>AppenderCollection</c> to the current <c>AppenderCollection</c>.
            </summary>
      <param name="x">The <c>AppenderCollection</c> whose elements should be added to the end of the current <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.IAppender[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> array to the current <c>AppenderCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Appender.IAppender" /> array whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> collection to the current <c>AppenderCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ToArray">
      <summary>
            Return the collection elements as an array
            </summary>
      <returns>the array</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>AppenderCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Appender.IAppender" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>true if the collection is read-only; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>AppenderCollection</c> can contain.
            </summary>
    </member>
    <member name="T:log4net.Core.IAppenderAttachable">
      <summary>
            Interface for attaching appenders to objects.
            </summary>
      <remarks>
        <para>
            Interface for attaching, removing and retrieving appenders.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Attaches an appender.
            </summary>
      <param name="appender">The appender to add.</param>
      <remarks>
        <para>
            Add the specified appender. The implementation may
            choose to allow or deny duplicate appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.GetAppender(System.String)">
      <summary>
            Gets an attached appender with the specified name.
            </summary>
      <param name="name">The name of the appender to get.</param>
      <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
      <remarks>
        <para>
            Returns an attached appender with the <paramref name="name" /> specified.
            If no appender with the specified name is found <c>null</c> will be
            returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAllAppenders">
      <summary>
            Removes all attached appenders.
            </summary>
      <remarks>
        <para>
            Removes and closes all attached appenders
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.IAppenderAttachable.Appenders">
      <summary>
            Gets all attached appenders.
            </summary>
      <value>
            A collection of attached appenders.
            </value>
      <remarks>
        <para>
            Gets a collection of attached appenders.
            If there are no attached appenders the
            implementation should return an empty 
            collection rather than <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.BufferingForwardingAppender">
      <summary>
            Buffers events and then forwards them to attached appenders.
            </summary>
      <remarks>
        <para>
            The events are buffered in this appender until conditions are
            met to allow the appender to deliver the events to the attached 
            appenders. See <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> for the
            conditions that cause the buffer to be sent.
            </para>
        <para>The forwarding appender can be used to specify different 
            thresholds and filters for the same appender at different locations 
            within the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.BufferingForwardingAppender.m_appenderAttachedImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingForwardingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.OnClose">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Send the events.
            </summary>
      <param name="events">The events that need to be send.</param>
      <remarks>
        <para>
            Forwards the events to the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
      <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
      <remarks>
        <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.GetAppender(System.String)">
      <summary>
            Looks for the appender with the specified name.
            </summary>
      <param name="name">The name of the appender to lookup.</param>
      <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
      <remarks>
        <para>
            Get the named appender attached to this buffering appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAllAppenders">
      <summary>
            Removes all previously added appenders from this appender.
            </summary>
      <remarks>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingForwardingAppender.Appenders">
      <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
      <returns>
            A collection of the appenders in this appender.
            </returns>
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender">
      <summary>
            Appends logging events to the console.
            </summary>
      <remarks>
        <para>
            ColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes directly to the application's attached console
            not to the <c>System.Console.Out</c> or <c>System.Console.Error</c><c>TextWriter</c>.
            The <c>System.Console.Out</c> and <c>System.Console.Error</c> streams can be
            programmatically redirected (for example NUnit does this to capture program output).
            This appender will ignore these redirections because it needs to use Win32
            API calls to colorize the output. To respect these redirections the <see cref="T:log4net.Appender.ConsoleAppender" />
            must be used.
            </para>
        <para>
            When configuring the colored console appender, mapping should be
            specified to map a logging level to a color. For example:
            </para>
        <code lang="XML" escaped="true">
          <mapping>
            <level value="ERROR" />
            <foreColor value="White" />
            <backColor value="Red, HighIntensity" />
          </mapping>
          <mapping>
            <level value="DEBUG" />
            <backColor value="Green" />
          </mapping>
        </code>
        <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            combination of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item><item><term>HighIntensity</term><description></description></item></list></para>
      </remarks>
      <author>Rick Hobbs</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender.Colors">
      <summary>
            The enum of possible color values for use with the color mapping method
            </summary>
      <remarks>
        <para>
            The following flags can be combined together to
            form the colors.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.ColoredConsoleAppender" />
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender.LevelColors">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.LevelColors.ActivateOptions">
      <summary>
            Initialize the options for the object
            </summary>
      <remarks>
        <para>
            Combine the <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> together.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor">
      <summary>
            The mapped foreground color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor">
      <summary>
            The mapped background color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped background color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.CombinedColor">
      <summary>
            The combined <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> suitable for 
            setting the console color.
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_writeToErrorStream">
      <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_levelMapping">
      <summary>
            Mapping from level object to color value
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_consoleOutputWriter">
      <summary>
            The console output stream writer to write to
            </summary>
      <remarks>
        <para>
            This writer is not thread safe.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
      <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.AddMapping(log4net.Appender.ColoredConsoleAppender.LevelColors)">
      <summary>
            Add a mapping of level to color - done by the config file
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.ColoredConsoleAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to color mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.Target">
      <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.ConsoleAppender">
      <summary>
            Appends logging events to the console.
            </summary>
      <remarks>
        <para>
            ConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user.
            </para>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.ConsoleAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ConsoleAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
      <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ConsoleAppender.Target">
      <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ConsoleAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.DebugAppender">
      <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
      <remarks>
        <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Debug" /> class for details on configuring the
            debug system.
            </para>
        <para>
            Events are written using the <see cref="M:System.Diagnostics.Debug.Write(string,string)" />
            method. The event's logger name is passed as the value for the category name to the Write method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.DebugAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
        <para>
            The default value is <c>true</c>.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" />.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" /> 
            with a specified layout.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is <c>true</c> then the <see cref="M:System.Diagnostics.Debug.Flush" />
            is called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.DebugAppender.ImmediateFlush">
      <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
      <remarks>
        <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
        <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.DebugAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.EventLogAppender">
      <summary>
            Writes events to the system event log.
            </summary>
      <remarks>
        <para>
            The appender will fail if you try to write using an event source that doesn't exist unless it is running with local administrator privileges.
            See also http://logging.apache.org/log4net/release/faq.html#trouble-EventLog
            </para>
        <para>
            The <c>EventID</c> of the event log entry can be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
        <para>
            The <c>Category</c> of the event log entry can be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
        <para>
            There is a limit of 32K characters for an event log message
            </para>
        <para>
            When configuring the EventLogAppender a mapping can be
            specified to map a logging level to an event log entry type. For example:
            </para>
        <code lang="XML">
            &lt;mapping&gt;
            	&lt;level value="ERROR" /&gt;
            	&lt;eventLogEntryType value="Error" /&gt;
            &lt;/mapping&gt;
            &lt;mapping&gt;
            	&lt;level value="DEBUG" /&gt;
            	&lt;eventLogEntryType value="Information" /&gt;
            &lt;/mapping&gt;
            </code>
        <para>
            The Level is the standard log4net logging level and eventLogEntryType can be any value
            from the <see cref="T:System.Diagnostics.EventLogEntryType" /> enum, i.e.:
            <list type="bullet"><item><term>Error</term><description>an error event</description></item><item><term>Warning</term><description>a warning event</description></item><item><term>Information</term><description>an informational event</description></item></list></para>
      </remarks>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Thomas Voss</author>
    </member>
    <member name="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and its event log entry type.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType">
      <summary>
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </summary>
      <remarks>
        <para>
            Required property.
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_logName">
      <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
      <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by <see cref="F:log4net.Appender.EventLogAppender.m_logName" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_machineName">
      <summary>
            The name of the machine which holds the event log. This is
            currently only allowed to be '.' i.e. the current machine.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_levelMapping">
      <summary>
            Mapping from level object to EventLogEntryType
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_eventId">
      <summary>
            The event ID to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_category">
      <summary>
            The event category to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.declaringType">
      <summary>
            The fully qualified type of the EventLogAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT">
      <summary>
            The maximum size supported by default.
            </summary>
      <remarks>
            http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx
            The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 
            may leave space for a two byte null terminator of #0#0). The 32766 max 
            length is what the .NET 4.0 source code checks for, but this is WRONG! 
            Strings with a length &gt; 31839 on Windows Vista or higher can CORRUPT 
            the event log! See: System.Diagnostics.EventLogInternal.InternalWriteEvent() 
            for the use of the 32766 max size.
            </remarks>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER">
      <summary>
            The maximum size supported by a windows operating system that is vista
            or newer.
            </summary>
      <remarks>
            See ReportEvent API:
            	http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
            ReportEvent's lpStrings parameter:
            "A pointer to a buffer containing an array of 
            null-terminated strings that are merged into the message before Event Viewer 
            displays the string to the user. This parameter must be a valid pointer 
            (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters."
            
            Going beyond the size of 31839 will (at some point) corrupt the event log on Windows
            Vista or higher! It may succeed for a while...but you will eventually run into the
            error: "System.ComponentModel.Win32Exception : A device attached to the system is
            not functioning", and the event log will then be corrupt (I was able to corrupt 
            an event log using a length of 31877 on Windows 7).
            
            The max size for Windows Vista or higher is documented here:
            	http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
            Going over this size may succeed a few times but the buffer will overrun and 
            eventually corrupt the log (based on testing).
            
            The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
            The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
            terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
            buffer, given enough time).
            </remarks>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE">
      <summary>
            The maximum size that the operating system supports for
            a event log message.
            </summary>
      <remarks>
            Used to determine the maximum string length that can be written
            to the operating system event log and eventually truncate a string
            that exceeds the limits.
            </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class
            with the specified <see cref="T:log4net.Layout.ILayout" />.
            </summary>
      <param name="layout">The <see cref="T:log4net.Layout.ILayout" /> to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.AddMapping(log4net.Appender.EventLogAppender.Level2EventLogEntryType)">
      <summary>
            Add a mapping of level to <see cref="T:System.Diagnostics.EventLogEntryType" /> - done by the config file
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType" /> mapping to this appender.
            Each mapping defines the event log entry type for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.CreateEventSource(System.String,System.String,System.String)">
      <summary>
            Create an event log source
            </summary>
      <remarks>
            Uses different API calls under NET_2_0
            </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>Writes the event to the system event log using the 
            <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />.</para>
        <para>If the event has an <c>EventID</c> property (see <see cref="P:log4net.Core.LoggingEvent.Properties" />)
            set then this integer will be used as the event log event id.</para>
        <para>
            There is a limit of 32K characters for an event log message
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.GetEntryType(log4net.Core.Level)">
      <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="level" /></summary>
      <param name="level">the Level to convert to an EventLogEntryType</param>
      <returns>The equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="level" /></returns>
      <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType" />
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Core.Level" /> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.GetMaxEventLogMessageSize">
      <summary>
            This method determines the maximum event log message size allowed for
            the current environment.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.LogName">
      <summary>
            The name of the log where messages will be stored.
            </summary>
      <value>
            The string name of the log where messages will be stored.
            </value>
      <remarks>
        <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a separate log for your application (or applications)
            then you should set the <see cref="P:log4net.Appender.EventLogAppender.LogName" /> appropriately.</para>
        <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
      <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
      <value>
            The string used to distinguish events from different sources.
            </value>
      <remarks>
            Sets the event log source property.
            </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.MachineName">
      <summary>
            This property is used to return the name of the computer to use
            when accessing the event logs.  Currently, this is the current
            computer, denoted by a dot "."
            </summary>
      <value>
            The string name of the machine holding the event log that 
            will be logged into.
            </value>
      <remarks>
            This property cannot be changed. It is currently set to '.'
            i.e. the local machine. This may be changed in future.
            </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </value>
      <remarks>
        <para>
            The system security context used to write to the EventLog.
            </para>
        <para>
            Unless a <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.EventId">
      <summary>
            Gets or sets the <c>EventId</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
      <remarks>
        <para>
            The <c>EventID</c> of the event log entry will normally be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            This property provides the fallback value which defaults to 0.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.Category">
      <summary>
            Gets or sets the <c>Category</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
      <remarks>
        <para>
            The <c>Category</c> of the event log entry will normally be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            This property provides the fallback value which defaults to 0.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TextWriterAppender">
      <summary>
            Sends logging events to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            An Appender that writes to a <see cref="T:System.IO.TextWriter" />.
            </para>
        <para>
            This appender may be used stand alone if initialized with an appropriate
            writer, however it is typically used as a base class for an appender that
            can open a <see cref="T:System.IO.TextWriter" /> to write to.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
    </member>
    <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
      <summary>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
    </member>
    <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying <see cref="T:System.IO.TextWriter" /> 
            or output stream will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logging events are not actually persisted if and when the application 
            crashes.
            </para>
        <para>
            The default value is <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.TextWriterAppender.declaringType">
      <summary>
            The fully qualified type of the TextWriterAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and
            sets the output destination to a new <see cref="T:System.IO.StreamWriter" /> initialized 
            with the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <param name="os">The <see cref="T:System.IO.Stream" /> to output to.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and sets
            the output destination to the specified <see cref="T:System.IO.StreamWriter" />.
            </summary>
      <param name="layout">The layout to use with this appender</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to output to</param>
      <remarks>
            The <see cref="T:System.IO.TextWriter" /> must have been previously opened.
            </remarks>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.PreAppendCheck">
      <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
      <remarks>
        <para>
            This method checks if an output target has been set and if a
            layout has been set. 
            </para>
      </remarks>
      <returns>
        <c>false</c> if any of the preconditions fail.</returns>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])" />
            method. 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            This method writes all the bulk logged events to the output writer
            before flushing the stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.OnClose">
      <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
      <remarks>
            Closed appenders cannot be reused.
            </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter">
      <summary>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
      <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Reset">
      <summary>
            Clears internal references to the underlying <see cref="T:System.IO.TextWriter" /> 
            and other variables.
            </summary>
      <remarks>
        <para>
            Subclasses can override this method for an alternate closing behavior.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
      <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
      <remarks>
        <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
      <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
      <remarks>
        <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.PrepareWriter">
      <summary>
            Called to allow a subclass to lazily initialize the writer
            </summary>
      <remarks>
        <para>
            This method is called when an event is logged and the <see cref="P:log4net.Appender.TextWriterAppender.Writer" /> or
            <see cref="P:log4net.Appender.TextWriterAppender.QuietWriter" /> have not been set. This allows a subclass to
            attempt to initialize the writer multiple times.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
      <summary>
            Gets or set whether the appender will flush at the end 
            of each append operation.
            </summary>
      <value>
        <para>
            The default behavior is to flush at the end of each 
            append operation.
            </para>
        <para>
            If this option is set to <c>false</c>, then the underlying 
            stream can defer persisting the logging event to a later 
            time.
            </para>
      </value>
      <remarks>
            Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.Writer">
      <summary>
            Sets the <see cref="T:System.IO.TextWriter" /> where the log output will go.
            </summary>
      <remarks>
        <para>
            The specified <see cref="T:System.IO.TextWriter" /> must be open and writable.
            </para>
        <para>
            The <see cref="T:System.IO.TextWriter" /> will be closed when the appender 
            instance is closed.
            </para>
        <para>
          <b>Note:</b> Logging to an unopened <see cref="T:System.IO.TextWriter" /> will fail.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
      <summary>
            Gets or set the <see cref="T:log4net.Core.IErrorHandler" /> and the underlying 
            <see cref="T:log4net.Util.QuietTextWriter" />, if any, for this appender. 
            </summary>
      <value>
            The <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </value>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.QuietWriter">
      <summary>
            Gets or sets the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
      <value>
            The <see cref="T:log4net.Util.QuietTextWriter" /> where logging events are written.
            </value>
      <remarks>
        <para>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender">
      <summary>
            Appends logging events to a file.
            </summary>
      <remarks>
        <para>
            Logging events are sent to the file specified by
            the <see cref="P:log4net.Appender.FileAppender.File" /> property.
            </para>
        <para>
            The file can be opened in either append or overwrite mode 
            by specifying the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property.
            If the file path is relative it is taken as relative from 
            the application base directory. The file encoding can be
            specified by setting the <see cref="P:log4net.Appender.FileAppender.Encoding" /> property.
            </para>
        <para>
            The layout's <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            values will be written each time the file is opened and closed
            respectively. If the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is <see langword="true" />
            then the file may contain multiple copies of the header and footer.
            </para>
        <para>
            This appender will first try to open the file for writing when <see cref="M:log4net.Appender.FileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
        <para>
            The <see cref="T:log4net.Appender.FileAppender" /> supports pluggable file locking models via
            the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> property.
            The default behavior, implemented by <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> 
            is to obtain an exclusive write lock on the file until this appender is closed.
            The alternative models only hold a
            write lock while the appender is writing a logging event (<see cref="T:log4net.Appender.FileAppender.MinimalLock" />)
            or synchronize by using a named system wide Mutex (<see cref="T:log4net.Appender.FileAppender.InterProcessLock" />).
            </para>
        <para>
            All locking strategies have issues and you should seriously consider using a different strategy that
            avoids having multiple processes logging to the same file.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Rodrigo B. de Oliveira</author>
      <author>Douglas de la Torre</author>
      <author>Niall Daley</author>
    </member>
    <member name="T:log4net.Appender.FileAppender.LockingStream">
      <summary>
            Write only <see cref="T:System.IO.Stream" /> that uses the <see cref="T:log4net.Appender.FileAppender.LockingModelBase" /> 
            to manage access to an underlying resource.
            </summary>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
            True asynchronous writes are not supported, the implementation forces a synchronous write.
            </summary>
    </member>
    <member name="T:log4net.Appender.FileAppender.LockingModelBase">
      <summary>
            Locking model base class
            </summary>
      <remarks>
        <para>
            Base class for the locking models available to the <see cref="T:log4net.Appender.FileAppender" /> derived loggers.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Open the output file
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.CreateStream(System.String,System.Boolean,System.IO.FileShare)">
      <summary>
            Helper method that creates a FileStream under CurrentAppender's SecurityContext.
            </summary>
      <remarks>
        <para>
            Typically called during OpenFile or AcquireLock. 
            </para>
        <para>
            If the directory portion of the <paramref name="filename" /> does not exist, it is created
            via Directory.CreateDirecctory.
            </para>
      </remarks>
      <param name="filename">
      </param>
      <param name="append">
      </param>
      <param name="fileShare">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseStream(System.IO.Stream)">
      <summary>
            Helper method to close <paramref name="stream" /> under CurrentAppender's SecurityContext.
            </summary>
      <remarks>
            Does not set <paramref name="stream" /> to null.
            </remarks>
      <param name="stream">
      </param>
    </member>
    <member name="P:log4net.Appender.FileAppender.LockingModelBase.CurrentAppender">
      <summary>
            Gets or sets the <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </summary>
      <value>
            The <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </value>
      <remarks>
        <para>
            The file appender this locking model is attached to and working on
            behalf of.
            </para>
        <para>
            The file appender is used to locate the security context and the error handler to use.
            </para>
        <para>
            The value of this property will be set before <see cref="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)" /> is
            called.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender.ExclusiveLock">
      <summary>
            Hold an exclusive lock on the output file
            </summary>
      <remarks>
        <para>
            Open the file once for writing and hold it open until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" /> is called. 
            Maintains an exclusive lock on the file during this time.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Open the file specified and prepare for logging.
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Does nothing. The lock is already taken
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Does nothing. The lock will be released when the file is closed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender.MinimalLock">
      <summary>
            Acquires the file lock for each write
            </summary>
      <remarks>
        <para>
            Opens the file once for each <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />/<see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> cycle, 
            thus holding the lock for the minimal amount of time. This method of locking
            is considerably slower than <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> but allows 
            other processes to move/delete the log file whilst logging continues.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Prepares to open the file when the first message is logged.
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.MinimalLock.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called again.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender.InterProcessLock">
      <summary>
            Provides cross-process file locking.
            </summary>
      <author>Ron Grabowski</author>
      <author>Steve Wranovsky</author>
    </member>
    <member name="M:log4net.Appender.FileAppender.InterProcessLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Open the file specified and prepare for logging.
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock" />,
            -<see cref="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Does nothing. The lock is already taken
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock">
      <summary>
      </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_appendToFile">
      <summary>
            Flag to indicate if we should append to the file
            or overwrite the file. The default is to append.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_fileName">
      <summary>
            The name of the log file.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_encoding">
      <summary>
            The encoding to use for the file stream.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_stream">
      <summary>
            The stream to log to. Has added locking semantics
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_lockingModel">
      <summary>
            The locking model to use
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.declaringType">
      <summary>
            The fully qualified type of the FileAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
      <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
      <param name="layout">the layout to use with this appender</param>
      <param name="filename">the full path to the file to write to</param>
      <param name="append">flag to indicate if the file should be appended to</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
      <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
      <param name="layout">the layout to use with this appender</param>
      <param name="filename">the full path to the file to write to</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ActivateOptions">
      <summary>
            Activate the options on the file appender. 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            This will cause the file to be opened.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Reset">
      <summary>
            Closes any previously opened file and calls the parent's <see cref="M:log4net.Appender.TextWriterAppender.Reset" />.
            </summary>
      <remarks>
        <para>
            Resets the filename and the file stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.PrepareWriter">
      <summary>
            Called to initialize the file writer
            </summary>
      <remarks>
        <para>
            Will be called for each logged message until the file is
            successfully opened.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])" />
            method. 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            Acquires the output file locks once before writing all the events to
            the stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.WriteFooter">
      <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
      <remarks>
        <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.WriteHeader">
      <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
      <remarks>
        <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.CloseWriter">
      <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.CloseFile">
      <summary>
            Closes the previously opened file.
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Layout.ILayout.Footer" /> to the file and then
            closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SafeOpenFile(System.String,System.Boolean)">
      <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
      <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
      <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
      <remarks>
        <para>
            Calls <see cref="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)" /> but guarantees not to throw an exception.
            Errors are passed to the <see cref="P:log4net.Appender.TextWriterAppender.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
      <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
      <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
      <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
      <remarks>
        <para>
            If there was already an opened file, then the previous file
            is closed first.
            </para>
        <para>
            This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.Stream)">
      <summary>
            Sets the quiet writer used for file output
            </summary>
      <param name="fileStream">the file stream that has been opened for writing</param>
      <remarks>
        <para>
            This implementation of <see cref="M:SetQWForFiles(Stream)" /> creates a <see cref="T:System.IO.StreamWriter" />
            over the <paramref name="fileStream" /> and passes it to the 
            <see cref="M:SetQWForFiles(TextWriter)" /> method.
            </para>
        <para>
            This method can be overridden by sub classes that want to wrap the
            <see cref="T:System.IO.Stream" /> in some way, for example to encrypt the output
            data using a <c>System.Security.Cryptography.CryptoStream</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
      <summary>
            Sets the quiet writer being used.
            </summary>
      <param name="writer">the writer over the file stream that has been opened for writing</param>
      <remarks>
        <para>
            This method can be overridden by sub classes that want to
            wrap the <see cref="T:System.IO.TextWriter" /> in some way.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.File">
      <summary>
            Gets or sets the path to the file that logging will be written to.
            </summary>
      <value>
            The path to the file that logging will be written to.
            </value>
      <remarks>
        <para>
            If the path is relative it is taken as relative from 
            the application base directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.AppendToFile">
      <summary>
            Gets or sets a flag that indicates whether the file should be
            appended to or overwritten.
            </summary>
      <value>
            Indicates whether the file should be appended to or overwritten.
            </value>
      <remarks>
        <para>
            If the value is set to false then the file will be overwritten, if 
            it is set to true then the file will be appended to.
            </para>
            The default value is true.
            </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.Encoding">
      <summary>
            Gets or sets <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </value>
      <remarks>
        <para>
            The default encoding set is <see cref="P:System.Text.Encoding.Default" />
            which is the encoding for the system's current ANSI code page.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.LockingModel">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to lock the file.
            </value>
      <remarks>
        <para>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </para>
        <para>
            There are three built in locking models, <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" />, <see cref="T:log4net.Appender.FileAppender.MinimalLock" /> and <see cref="T:log4net.Appender.FileAppender.InterProcessLock" /> .
            The first locks the file from the start of logging to the end, the 
            second locks only for the minimal amount of time when logging each message
            and the last synchronizes processes using a named system wide Mutex.
            </para>
        <para>
            The default locking model is the <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LogException">
      <summary>
            Exception base type for log4net.
            </summary>
      <remarks>
        <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.LogException.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class with
            the specified message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <param name="innerException">A nested exception to include.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class
            with the specified message and inner exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.ForwardingAppender">
      <summary>
            This appender forwards logging events to attached appenders.
            </summary>
      <remarks>
        <para>
            The forwarding appender can be used to specify different thresholds
            and filters for the same appender at different locations within the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.ForwardingAppender.m_appenderAttachedImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ForwardingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.OnClose">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Forward the logging event to the attached appenders 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Delivers the logging event to all the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Forward the logging events to the attached appenders 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            Delivers the logging events to all the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
      <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
      <remarks>
        <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.GetAppender(System.String)">
      <summary>
            Looks for the appender with the specified name.
            </summary>
      <param name="name">The name of the appender to lookup.</param>
      <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
      <remarks>
        <para>
            Get the named appender attached to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAllAppenders">
      <summary>
            Removes all previously added appenders from this appender.
            </summary>
      <remarks>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="P:log4net.Appender.ForwardingAppender.Appenders">
      <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
      <returns>
            A collection of the appenders in this appender.
            </returns>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender">
      <summary>
            Logs events to a local syslog service.
            </summary>
      <remarks>
        <note>
            This appender uses the POSIX libc library functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c>.
            If these functions are not available on the local system then this appender will not work!
            </note>
        <para>
            The functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c> are specified in SUSv2 and 
            POSIX 1003.1-2001 standards. These are used to log messages to the local syslog service.
            </para>
        <para>
            This appender talks to a local syslog service. If you need to log to a remote syslog
            daemon and you cannot configure your local syslog service to do this you may be
            able to use the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> to log via UDP.
            </para>
        <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
      </remarks>
      <author>Rob Lyon</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.SyslogSeverity">
      <summary>
            syslog severities
            </summary>
      <remarks>
        <para>
            The log4net Level maps to a syslog severity using the
            <see cref="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)" /> method and the <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" />
            class. The severity is set on <see cref="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.SyslogFacility">
      <summary>
            syslog facilities
            </summary>
      <remarks>
        <para>
            The syslog facility defines which subsystem the logging comes from.
            This is set on the <see cref="P:log4net.Appender.LocalSyslogAppender.Facility" /> property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.LevelSeverity">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
      <remarks>
        <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity">
      <summary>
            The mapped syslog severity for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_facility">
      <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_identity">
      <summary>
            The message identity
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_handleToIdentity">
      <summary>
            Marshaled handle to the identity string. We have to hold on to the
            string as the <c>openlog</c> and <c>syslog</c> APIs just hold the
            pointer to the ident and dereference it for each log message.
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_levelMapping">
      <summary>
            Mapping from level object to syslog severity
            </summary>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class.
            </summary>
      <remarks>
            This instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class is set up to write 
            to a local syslog service.
            </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)">
      <summary>
            Add a mapping of level to severity
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Adds a <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" /> to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to a remote syslog daemon.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.OnClose">
      <summary>
            Close the syslog when the appender is closed
            </summary>
      <remarks>
        <para>
            Close the syslog when the appender is closed
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.GetSeverity(log4net.Core.Level)">
      <summary>
            Translates a log4net level to a syslog severity.
            </summary>
      <param name="level">A log4net level.</param>
      <returns>A syslog severity.</returns>
      <remarks>
        <para>
            Translates a log4net level to a syslog severity.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.GeneratePriority(log4net.Appender.LocalSyslogAppender.SyslogFacility,log4net.Appender.LocalSyslogAppender.SyslogSeverity)">
      <summary>
            Generate a syslog priority.
            </summary>
      <param name="facility">The syslog facility.</param>
      <param name="severity">The syslog severity.</param>
      <returns>A syslog priority.</returns>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender.SyslogFacility)">
      <summary>
            Open connection to system logger.
            </summary>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.syslog(System.Int32,System.String,System.String)">
      <summary>
            Generate a log message.
            </summary>
      <remarks>
        <para>
            The libc syslog method takes a format string and a variable argument list similar
            to the classic printf function. As this type of vararg list is not supported
            by C# we need to specify the arguments explicitly. Here we have specified the
            format string with a single message argument. The caller must set the format 
            string to <c>"%s"</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.closelog">
      <summary>
            Close descriptor used to write to system logger.
            </summary>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.Identity">
      <summary>
            Message identity
            </summary>
      <remarks>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.Facility">
      <summary>
            Syslog facility
            </summary>
      <remarks>
            Set to one of the <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.ManagedColoredConsoleAppender">
      <summary>
            Appends colorful logging events to the console, using the .NET 2
            built-in capabilities.
            </summary>
      <remarks>
        <para>
            ManagedColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            When configuring the colored console appender, mappings should be
            specified to map logging levels to colors. For example:
            </para>
        <code lang="XML" escaped="true">
          <mapping>
            <level value="ERROR" />
            <foreColor value="DarkRed" />
            <backColor value="White" />
          </mapping>
          <mapping>
            <level value="WARN" />
            <foreColor value="Yellow" />
          </mapping>
          <mapping>
            <level value="INFO" />
            <foreColor value="White" />
          </mapping>
          <mapping>
            <level value="DEBUG" />
            <foreColor value="Blue" />
          </mapping>
        </code>
        <para>
            The Level is the standard log4net logging level while
            ForeColor and BackColor are the values of <see cref="T:System.ConsoleColor" />
            enumeration.
            </para>
        <para>
            Based on the ColoredConsoleAppender
            </para>
      </remarks>
      <author>Rick Hobbs</author>
      <author>Nicko Cadell</author>
      <author>Pavlos Touboulidis</author>
    </member>
    <member name="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.ForeColor">
      <summary>
            The mapped foreground color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.BackColor">
      <summary>
            The mapped background color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped background color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_writeToErrorStream">
      <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
    </member>
    <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_levelMapping">
      <summary>
            Mapping from level object to color value
            </summary>
    </member>
    <member name="M:log4net.Appender.ManagedColoredConsoleAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ManagedColoredConsoleAppender.AddMapping(log4net.Appender.ManagedColoredConsoleAppender.LevelColors)">
      <summary>
            Add a mapping of level to color - done by the config file
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ManagedColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ManagedColoredConsoleAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to color mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ManagedColoredConsoleAppender.Target">
      <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ManagedColoredConsoleAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.MemoryAppender">
      <summary>
            Stores logging events in an array.
            </summary>
      <remarks>
        <para>
            The memory appender stores all the logging events
            that are appended in an in-memory array.
            </para>
        <para>
            Use the <see cref="M:log4net.Appender.MemoryAppender.GetEvents" /> method to get
            the current list of events that have been appended.
            </para>
        <para>
            Use the <see cref="M:Clear()" /> method to clear the
            current list of events.
            </para>
      </remarks>
      <author>Julian Biddle</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.MemoryAppender.m_eventsList">
      <summary>
            The list of events that have been appended.
            </summary>
    </member>
    <member name="F:log4net.Appender.MemoryAppender.m_fixFlags">
      <summary>
            Value indicating which fields in the event should be fixed
            </summary>
      <remarks>
            By default all fields are fixed
            </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.MemoryAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.GetEvents">
      <summary>
            Gets the events that have been logged.
            </summary>
      <returns>The events that have been logged</returns>
      <remarks>
        <para>
            Gets the events that have been logged.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>Stores the <paramref name="loggingEvent" /> in the events list.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.Clear">
      <summary>
            Clear the list of events
            </summary>
      <remarks>
            Clear the list of events
            </remarks>
    </member>
    <member name="P:log4net.Appender.MemoryAppender.OnlyFixPartialEventData">
      <summary>
            Gets or sets a value indicating whether only part of the logging event 
            data should be fixed.
            </summary>
      <value>
        <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            Setting this property to <c>true</c> will cause only part of the event 
            data to be fixed and stored in the appender, hereby improving performance. 
            </para>
        <para>
            See <see cref="M:LoggingEvent.FixVolatileData(bool)" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.MemoryAppender.Fix">
      <summary>
            Gets or sets the fields that will be fixed in the event
            </summary>
      <remarks>
        <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.NetSendAppender">
      <summary>
            Logs entries by sending network messages using the 
            <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> native function.
            </summary>
      <remarks>
        <para>
            You can send messages only to names that are active 
            on the network. If you send the message to a user name, 
            that user must be logged on and running the Messenger 
            service to receive the message.
            </para>
        <para>
            The receiver will get a top most window displaying the 
            messages one at a time, therefore this appender should 
            not be used to deliver a high volume of messages.
            </para>
        <para>
            The following table lists some possible uses for this appender :
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Action</term>
              <description>Property Value(s)</description>
            </listheader>
            <item>
              <term>Send a message to a user account on the local machine</term>
              <description>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the local machine&gt;
                        </para>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to a user account on a remote machine</term>
              <description>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the remote machine&gt;
                        </para>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to a domain user account</term>
              <description>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of a domain controller | uninitialized&gt;
                        </para>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to all the names in a workgroup or domain</term>
              <description>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;workgroup name | domain name&gt;*
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message from the local machine to a remote machine</term>
              <description>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the local machine | uninitialized&gt;
                        </para>
                <para>
                  <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;name of the remote machine&gt;
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
          <b>Note :</b> security restrictions apply for sending 
            network messages, see <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> 
            for more information.
            </para>
      </remarks>
      <example>
        <para>
            An example configuration section to log information 
            using this appender from the local machine, named 
            LOCAL_PC, to machine OPERATOR_PC :
            </para>
        <code lang="XML" escaped="true">
          <appender name="NetSendAppender_Operator" type="log4net.Appender.NetSendAppender">
            <server value="LOCAL_PC" />
            <recipient value="OPERATOR_PC" />
            <layout type="log4net.Layout.PatternLayout" value="%-5p %c [%x] - %m%n" />
          </appender>
        </code>
      </example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_server">
      <summary>
            The DNS or NetBIOS name of the server on which the function is to execute.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_sender">
      <summary>
            The sender of the network message.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_recipient">
      <summary>
            The message alias to which the message should be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.#ctor">
      <summary>
            Initializes the appender.
            </summary>
      <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was specified.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was not specified.</exception>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Sends the event using a network message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
            Sends a buffer of information to a registered message alias.
            </summary>
      <param name="serverName">The DNS or NetBIOS name of the server on which the function is to execute.</param>
      <param name="msgName">The message alias to which the message buffer should be sent</param>
      <param name="fromName">The originator of the message.</param>
      <param name="buffer">The message text.</param>
      <param name="bufferSize">The length, in bytes, of the message text.</param>
      <remarks>
        <para>
            The following restrictions apply for sending network messages:
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Platform</term>
              <description>Requirements</description>
            </listheader>
            <item>
              <term>Windows NT</term>
              <description>
                <para>
                        No special group membership is required to send a network message.
                        </para>
                <para>
                        Admin, Accounts, Print, or Server Operator group membership is required to 
                        successfully send a network message on a remote server.
                        </para>
              </description>
            </item>
            <item>
              <term>Windows 2000 or later</term>
              <description>
                <para>
                        If you send a message on a domain controller that is running Active Directory, 
                        access is allowed or denied based on the access control list (ACL) for the securable 
                        object. The default ACL permits only Domain Admins and Account Operators to send a network message. 
                        </para>
                <para>
                        On a member server or workstation, only Administrators and Server Operators can send a network message. 
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/security_requirements_for_the_network_management_functions.asp">Security Requirements for the Network Management Functions</a>.
            </para>
      </remarks>
      <returns>
        <para>
            If the function succeeds, the return value is zero.
            </para>
      </returns>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Sender">
      <summary>
            Gets or sets the sender of the message.
            </summary>
      <value>
            The sender of the message.
            </value>
      <remarks>
            If this property is not specified, the message is sent from the local computer.
            </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Recipient">
      <summary>
            Gets or sets the message alias to which the message should be sent.
            </summary>
      <value>
            The recipient of the message.
            </value>
      <remarks>
            This property should always be specified in order to send a message.
            </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Server">
      <summary>
            Gets or sets the DNS or NetBIOS name of the remote server on which the function is to execute.
            </summary>
      <value>
            DNS or NetBIOS name of the remote server on which the function is to execute.
            </value>
      <remarks>
        <para>
            For Windows NT 4.0 and earlier, the string should begin with \\.
            </para>
        <para>
            If this property is not specified, the local computer is used. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.OutputDebugStringAppender">
      <summary>
            Appends log events to the OutputDebugString system.
            </summary>
      <remarks>
        <para>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.
            </para>
        <para>
            The string is passed to the native <c>OutputDebugString</c> 
            function.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.OutputDebugStringAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Write the logging event to the output debug string API
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>
            Write the logging event to the output debug string API
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
      <summary>
            Stub for OutputDebugString native method
            </summary>
      <param name="message">the string to output</param>
      <remarks>
        <para>
            Stub for OutputDebugString native method
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.OutputDebugStringAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.UdpAppender">
      <summary>
             Sends logging events as connectionless UDP datagrams to a remote host or a 
             multicast group using an <see cref="T:System.Net.Sockets.UdpClient" />.
             </summary>
      <remarks>
        <para>
             UDP guarantees neither that messages arrive, nor that they arrive in the correct order.
             </para>
        <para>
             To view the logging results, a custom application can be developed that listens for logging 
             events.
             </para>
        <para>
             When decoding events send via this appender remember to use the same encoding
             to decode the events as was used to send the events. See the <see cref="P:log4net.Appender.UdpAppender.Encoding" />
             property to specify the encoding to use.
             </para>
      </remarks>
      <example>
             This example shows how to log receive logging events that are sent 
             on IP address 244.0.0.1 and port 8080 to the console. The event is 
             encoded in the packet as a unicode string and it is decoded as such. 
             <code lang="C#">
             IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
             UdpClient udpClient;
             byte[] buffer;
             string loggingEvent;
             
             try 
             {
                 udpClient = new UdpClient(8080);
                 
                 while(true) 
                 {
                     buffer = udpClient.Receive(ref remoteEndPoint);
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer);
                     Console.WriteLine(loggingEvent);
                 }
             } 
             catch(Exception e) 
             {
                 Console.WriteLine(e.ToString());
             }
             </code><code lang="Visual Basic">
             Dim remoteEndPoint as IPEndPoint
             Dim udpClient as UdpClient
             Dim buffer as Byte()
             Dim loggingEvent as String
             
             Try 
                 remoteEndPoint = new IPEndPoint(IPAddress.Any, 0)
                 udpClient = new UdpClient(8080)
            
                 While True
                     buffer = udpClient.Receive(ByRef remoteEndPoint)
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer)
                     Console.WriteLine(loggingEvent)
                 Wend
             Catch e As Exception
                 Console.WriteLine(e.ToString())
             End Try
             </code><para>
             An example configuration section to log information using this appender to the 
             IP 224.0.0.1 on port 8080:
             </para><code lang="XML" escaped="true"><appender name="UdpAppender" type="log4net.Appender.UdpAppender"><remoteAddress value="224.0.0.1" /><remotePort value="8080" /><layout type="log4net.Layout.PatternLayout" value="%-5level %logger [%ndc] - %message%newline" /></appender></code></example>
      <author>Gert Driesen</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remoteAddress">
      <summary>
            The IP address of the remote host or multicast group to which 
            the logging event will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remotePort">
      <summary>
            The TCP port number of the remote host or multicast group to 
            which the logging event will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remoteEndPoint">
      <summary>
            The cached remote endpoint to which the logging events will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_localPort">
      <summary>
            The TCP port number from which the <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_client">
      <summary>
            The <see cref="T:System.Net.Sockets.UdpClient" /> instance that will be used for sending the 
            logging events.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_encoding">
      <summary>
            The encoding to use for the packet.
            </summary>
    </member>
    <member name="M:log4net.Appender.UdpAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.UdpAppender" /> class.
            </summary>
      <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was specified or 
            an invalid remote or local TCP port number was specified.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was not specified.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The TCP port number assigned to <see cref="P:log4net.Appender.UdpAppender.LocalPort" /> or <see cref="P:log4net.Appender.UdpAppender.RemotePort" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="M:log4net.Appender.UdpAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Sends the event using an UDP datagram.
            </para>
        <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.OnClose">
      <summary>
            Closes the UDP connection and releases all resources associated with 
            this <see cref="T:log4net.Appender.UdpAppender" /> instance.
            </summary>
      <remarks>
        <para>
            Disables the underlying <see cref="T:System.Net.Sockets.UdpClient" /> and releases all managed 
            and unmanaged resources associated with the <see cref="T:log4net.Appender.UdpAppender" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.InitializeClientConnection">
      <summary>
            Initializes the underlying  <see cref="T:System.Net.Sockets.UdpClient" /> connection.
            </summary>
      <remarks>
        <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> is initialized and binds to the 
            port number from which you intend to communicate.
            </para>
        <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemoteAddress">
      <summary>
            Gets or sets the IP address of the remote host or multicast group to which
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
      <value>
            The IP address of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
      <remarks>
        <para>
            Multicast addresses are identified by IP class <b>D</b> addresses (in the range 224.0.0.0 to
            239.255.255.255).  Multicast packets can pass across different networks through routers, so
            it is possible to use multicasts in an Internet scenario as long as your network provider 
            supports multicasting.
            </para>
        <para>
            Hosts that want to receive particular multicast messages must register their interest by joining
            the multicast group.  Multicast messages are not sent to networks where no host has joined
            the multicast group.  Class <b>D</b> IP addresses are used for multicast groups, to differentiate
            them from normal host addresses, allowing nodes to easily detect if a message is of interest.
            </para>
        <para>
            Static multicast addresses that are needed globally are assigned by IANA.  A few examples are listed in the table below:
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>IP Address</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>224.0.0.1</term>
              <description>
                <para>
                        Sends a message to all system on the subnet.
                        </para>
              </description>
            </item>
            <item>
              <term>224.0.0.2</term>
              <description>
                <para>
                        Sends a message to all routers on the subnet.
                        </para>
              </description>
            </item>
            <item>
              <term>224.0.0.12</term>
              <description>
                <para>
                        The DHCP server answers messages on the IP address 224.0.0.12, but only on a subnet.
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
            A complete list of actually reserved multicast addresses and their owners in the ranges
            defined by RFC 3171 can be found at the <A href="http://www.iana.org/assignments/multicast-addresses">IANA web site</A>. 
            </para>
        <para>
            The address range 239.0.0.0 to 239.255.255.255 is reserved for administrative scope-relative 
            addresses.  These addresses can be reused with other local groups.  Routers are typically 
            configured with filters to prevent multicast traffic in this range from flowing outside
            of the local network.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemotePort">
      <summary>
            Gets or sets the TCP port number of the remote host or multicast group to which 
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
      <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will send messages to this TCP port number
            on the remote host or multicast group.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.UdpAppender.LocalPort">
      <summary>
            Gets or sets the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </value>
      <remarks>
        <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will bind to this port for sending messages.
            </para>
        <para>
            Setting the value to 0 (the default) will cause the udp client not to bind to
            a local port.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.UdpAppender.Encoding">
      <summary>
            Gets or sets <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.Client">
      <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </summary>
      <value>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </value>
      <remarks>
        <see cref="T:log4net.Appender.UdpAppender" /> creates a <see cref="T:System.Net.Sockets.UdpClient" /> to send logging events 
            over a network.  Classes deriving from <see cref="T:log4net.Appender.UdpAppender" /> can use this
            property to get or set this <see cref="T:System.Net.Sockets.UdpClient" />.  Use the underlying <see cref="T:System.Net.Sockets.UdpClient" />
            returned from <see cref="P:log4net.Appender.UdpAppender.Client" /> if you require access beyond that which 
            <see cref="T:log4net.Appender.UdpAppender" /> provides.
            </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemoteEndPoint">
      <summary>
            Gets or sets the cached remote endpoint to which the logging events should be sent.
            </summary>
      <value>
            The cached remote endpoint to which the logging events will be sent.
            </value>
      <remarks>
            The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method will initialize the remote endpoint 
            with the values of the <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> and <see cref="P:log4net.Appender.UdpAppender.RemotePort" />
            properties.
            </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender">
      <summary>
            Logs events to a remote syslog daemon.
            </summary>
      <remarks>
        <para>
            The BSD syslog protocol is used to remotely log to
            a syslog daemon. The syslogd listens for for messages
            on UDP port 514.
            </para>
        <para>
            The syslog UDP protocol is not authenticated. Most syslog daemons
            do not accept remote log messages because of the security implications.
            You may be able to use the LocalSyslogAppender to talk to a local
            syslog service.
            </para>
        <para>
            There is an RFC 3164 that claims to document the BSD Syslog Protocol.
            This RFC can be seen here: http://www.faqs.org/rfcs/rfc3164.html.
            This appender generates what the RFC calls an "Original Device Message",
            i.e. does not include the TIMESTAMP or HOSTNAME fields. By observation
            this format of message will be accepted by all current syslog daemon
            implementations. The daemon will attach the current time and the source
            hostname or IP address to any messages received.
            </para>
        <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
      </remarks>
      <author>Rob Lyon</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogSeverity">
      <summary>
            syslog severities
            </summary>
      <remarks>
        <para>
            The syslog severities.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility">
      <summary>
            syslog facilities
            </summary>
      <remarks>
        <para>
            The syslog facilities
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
      <remarks>
        <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.LevelSeverity.Severity">
      <summary>
            The mapped syslog severity for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.DefaultSyslogPort">
      <summary>
            Syslog port 514
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferSize">
      <summary>
            Initial buffer size
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferMaxCapacity">
      <summary>
            Maximum buffer size before it is recycled
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_facility">
      <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_identity">
      <summary>
            The message identity
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_levelMapping">
      <summary>
            Mapping from level object to syslog severity
            </summary>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class.
            </summary>
      <remarks>
            This instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class is set up to write 
            to a remote syslog daemon.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.AddMapping(log4net.Appender.RemoteSyslogAppender.LevelSeverity)">
      <summary>
            Add a mapping of level to severity
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity" /> mapping to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to a remote syslog daemon.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to syslog severity mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.GetSeverity(log4net.Core.Level)">
      <summary>
            Translates a log4net level to a syslog severity.
            </summary>
      <param name="level">A log4net level.</param>
      <returns>A syslog severity.</returns>
      <remarks>
        <para>
            Translates a log4net level to a syslog severity.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.GeneratePriority(log4net.Appender.RemoteSyslogAppender.SyslogFacility,log4net.Appender.RemoteSyslogAppender.SyslogSeverity)">
      <summary>
            Generate a syslog priority.
            </summary>
      <param name="facility">The syslog facility.</param>
      <param name="severity">The syslog severity.</param>
      <returns>A syslog priority.</returns>
      <remarks>
        <para>
            Generate a syslog priority.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.Identity">
      <summary>
            Message identity
            </summary>
      <remarks>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.Facility">
      <summary>
            Syslog facility
            </summary>
      <remarks>
            Set to one of the <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </remarks>
    </member>
    <member name="T:log4net.Appender.RemotingAppender">
      <summary>
            Delivers logging events to a remote logging sink. 
            </summary>
      <remarks>
        <para>
            This Appender is designed to deliver events to a remote sink. 
            That is any object that implements the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface. It delivers the events using .NET remoting. The
            object to deliver events to is specified by setting the
            appenders <see cref="P:log4net.Appender.RemotingAppender.Sink" /> property.</para>
        <para>
            The RemotingAppender buffers events before sending them. This allows it to 
            make more efficient use of the remoting infrastructure.</para>
        <para>
            Once the buffer is full the events are still not sent immediately. 
            They are scheduled to be sent using a pool thread. The effect is that 
            the send occurs asynchronously. This is very important for a 
            number of non obvious reasons. The remoting infrastructure will 
            flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.</para>
        <para>
            Because the events are sent asynchronously using pool threads it is possible to close 
            this appender before all the queued events have been sent.
            When closing the appender attempts to wait until all the queued events have been sent, but 
            this will timeout after 30 seconds regardless.</para>
        <para>
            If this appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for. If the runtime terminates the threads before
            the queued events have been sent then they will be lost. To ensure that all events
            are sent the appender must be closed before the application exits. See 
            <see cref="M:log4net.Core.LoggerManager.Shutdown" /> for details on how to shutdown
            log4net programmatically.</para>
      </remarks>
      <seealso cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink">
      <summary>
            Interface used to deliver <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
      <remarks>
            This interface must be implemented by a remoting sink
            if the <see cref="T:log4net.Appender.RemotingAppender" /> is to be used
            to deliver logging events to the sink.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(log4net.Core.LoggingEvent[])">
      <summary>
            Delivers logging events to the remote sink
            </summary>
      <param name="events">Array of events to log.</param>
      <remarks>
        <para>
            Delivers logging events to the remote sink
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_sinkUrl">
      <summary>
            The URL of the remote sink.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_sinkObj">
      <summary>
            The local proxy (.NET remoting) for the remote logging sink.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_queuedCallbackCount">
      <summary>
            The number of queued callbacks currently waiting or executing
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_workQueueEmptyEvent">
      <summary>
            Event used to signal when there are no queued work items
            </summary>
      <remarks>
            This event is set when there are no queued work items. In this
            state it is safe to close the appender.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemotingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
      <remarks>
            The events are not sent immediately. They are scheduled to be sent
            using a pool thread. The effect is that the send occurs asynchronously.
            This is very important for a number of non obvious reasons. The remoting
            infrastructure will flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.
            </remarks>
      <param name="events">The events to send.</param>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.OnClose">
      <summary>
            Override base class close.
            </summary>
      <remarks>
        <para>
            This method waits while there are queued work items. The events are
            sent asynchronously using <see cref="T:System.Threading.ThreadPool" /> work items. These items
            will be sent once a thread pool thread is available to send them, therefore
            it is possible to close the appender before all the queued events have been
            sent.</para>
        <para>
            This method attempts to wait until all the queued events have been sent, but this 
            method will timeout after 30 seconds regardless.</para>
        <para>
            If the appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.BeginAsyncSend">
      <summary>
            A work item is being queued into the thread pool
            </summary>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.EndAsyncSend">
      <summary>
            A work item from the thread pool has completed
            </summary>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.SendBufferCallback(System.Object)">
      <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
      <remarks>
            This method is designed to be used with the <see cref="T:System.Threading.ThreadPool" />.
            This method expects to be passed an array of <see cref="T:log4net.Core.LoggingEvent" />
            objects in the state param.
            </remarks>
      <param name="state">the logging events to send</param>
    </member>
    <member name="P:log4net.Appender.RemotingAppender.Sink">
      <summary>
            Gets or sets the URL of the well-known object that will accept 
            the logging events.
            </summary>
      <value>
            The well-known URL of the remote sink.
            </value>
      <remarks>
        <para>
            The URL of the remoting sink that will accept logging events.
            The sink must implement the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender">
      <summary>
            Appender that rolls log files based on size or date or both.
            </summary>
      <remarks>
        <para>
            RollingFileAppender can roll log files based on size or date or both
            depending on the setting of the <see cref="P:log4net.Appender.RollingFileAppender.RollingStyle" /> property.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Size" /> the log file will be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Date" /> the log file will be rolled
            once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" /> the log file will be
            rolled once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed, but within a date boundary the file will also be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> the log file will be rolled when
            the appender is configured. This effectively means that the log file can be
            rolled once per program execution.
            </para>
        <para>
            A of few additional optional features have been added:
            <list type="bullet"><item>Attach date pattern for current log file <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /></item><item>Backup number increments for newer files <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /></item><item>Infinite number of backups by file size <see cref="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups" /></item></list></para>
        <note>
          <para>
            For large or infinite numbers of backup files a <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> 
            greater than zero is highly recommended, otherwise all the backup files need
            to be renamed each time a new backup is created.
            </para>
          <para>
            When Date/Time based rolling is used setting <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> 
            to <see langword="true" /> will reduce the number of file renamings to few or none.
            </para>
        </note>
        <note type="caution">
          <para>
            Changing <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> or <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> without clearing
            the log file directory of backup files will cause unexpected and unwanted side effects.  
            </para>
        </note>
        <para>
            If Date/Time based rolling is enabled this appender will attempt to roll existing files
            in the directory without a Date/Time tag based on the last write date of the base log file.
            The appender only rolls the log file when a message is logged. If Date/Time based rolling 
            is enabled then the appender will not roll the log file at the Date/Time boundary but
            at the point when the next message is logged after the boundary has been crossed.
            </para>
        <para>
            The <see cref="T:log4net.Appender.RollingFileAppender" /> extends the <see cref="T:log4net.Appender.FileAppender" /> and
            has the same behavior when opening the log file.
            The appender will first try to open the file for writing when <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
        <para>
            When rolling a backup file necessitates deleting an older backup file the
            file to be deleted is moved to a temporary name before being deleted.
            </para>
        <note type="caution">
          <para>
            A maximum number of backup files when rolling on date/time boundaries is not supported.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
      <author>Edward Smit</author>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
      <summary>
            Style of rolling to use
            </summary>
      <remarks>
        <para>
            Style of rolling to use
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
      <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
      <remarks>
        <para>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.IDateTime">
      <summary>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            </summary>
      <remarks>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            Used primarily to allow test classes to plug themselves in so they can
            supply test date/times.
            </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.IDateTime.Now">
      <summary>
            Gets the <i>current</i> time.
            </summary>
      <value>The <i>current</i> time.</value>
      <remarks>
        <para>
            Gets the <i>current</i> time.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.LocalDateTime">
      <summary>
            Default implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> that returns the current time.
            </summary>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.LocalDateTime.Now">
      <summary>
            Gets the <b>current</b> time.
            </summary>
      <value>The <b>current</b> time.</value>
      <remarks>
        <para>
            Gets the <b>current</b> time.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.UniversalDateTime">
      <summary>
            Implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> that returns the current time as the coordinated universal time (UTC).
            </summary>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.UniversalDateTime.Now">
      <summary>
            Gets the <b>current</b> time.
            </summary>
      <value>The <b>current</b> time.</value>
      <remarks>
        <para>
            Gets the <b>current</b> time.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.declaringType">
      <summary>
            The fully qualified type of the RollingFileAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_dateTime">
      <summary>
            This object supplies the current date/time.  Allows test code to plug in
            a method to control this class when testing date/time based rolling. The default
            implementation uses the underlying value of DateTime.Now.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
      <summary>
            The date pattern. By default, the pattern is set to <c>".yyyy-MM-dd"</c> 
            meaning daily rollover.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
      <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
      <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_now">
      <summary>
            Holds date of last roll over
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
      <summary>
            The type of rolling done
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
      <summary>
            The default maximum file size is 10MB
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
      <summary>
            There is zero backup files by default
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
      <summary>
            How many sized based backups have been made so far
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
      <summary>
            The rolling file count direction. 
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
      <summary>
            The rolling mode used in this appender.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
      <summary>
            Cache flag set if we are rolling by date.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
      <summary>
            Cache flag set if we are rolling by size.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
      <summary>
            Value indicating whether to always log to the same file.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_preserveLogFileNameExtension">
      <summary>
            Value indicating whether to preserve the file name extension when rolling.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
      <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.s_date1970">
      <summary>
            The 1st of January 1970 in UTC
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RollingFileAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
      <summary>
            Sets the quiet writer being used.
            </summary>
      <remarks>
            This method can be overridden by sub classes.
            </remarks>
      <param name="writer">the writer to set</param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Write out a logging event.
            </summary>
      <param name="loggingEvent">the event to write to file.</param>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Write out an array of logging events.
            </summary>
      <param name="loggingEvents">the events to write to file.</param>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.AdjustFileBeforeAppend">
      <summary>
            Performs any required rolling before outputting the next event
            </summary>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
      <summary>
            Creates and opens the file for logging.  If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" />
            is false then the fully qualified name is determined and used.
            </summary>
      <param name="fileName">the name of the file to open</param>
      <param name="append">true to append to existing file</param>
      <remarks>
        <para>This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetNextOutputFileName(System.String)">
      <summary>
            Get the current output file name
            </summary>
      <param name="fileName">the base file name</param>
      <returns>the output file name</returns>
      <remarks>
            The output file name is based on the base fileName specified.
            If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> is set then the output 
            file name is the same as the base file passed in. Otherwise
            the output file depends on the date pattern, on the count
            direction or both.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.DetermineCurSizeRollBackups">
      <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetWildcardPatternForFile(System.String)">
      <summary>
            Generates a wildcard pattern that can be used to find all files
            that are similar to the base file name.
            </summary>
      <param name="baseFileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetExistingFiles(System.String)">
      <summary>
            Builds a list of filenames for all files matching the base filename plus a file
            pattern.
            </summary>
      <param name="baseFilePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverIfDateBoundaryCrossing">
      <summary>
            Initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
      <summary>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            </summary>
      <remarks>
        <para>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            The following is done
            <list type="bullet"><item>determine curSizeRollBackups (only within the current roll point)</item><item>initiates a roll over if needed for crossing a date boundary since the last run.</item></list></para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
      <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
      <param name="baseFile">
      </param>
      <param name="curFileName">
      </param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetBackUpIndex(System.String)">
      <summary>
            Attempts to extract a number from the end of the file name that indicates
            the number of the times the file has been rolled over.
            </summary>
      <remarks>
            Certain date pattern extensions like yyyyMMdd will be parsed as valid backup indexes.
            </remarks>
      <param name="curFileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
      <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
      <param name="baseFile">
      </param>
      <param name="arrayFiles">
      </param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod(System.String)">
      <summary>
            Calculates the RollPoint for the datePattern supplied.
            </summary>
      <param name="datePattern">the date pattern to calculate the check period for</param>
      <returns>The RollPoint that is most accurate for the date pattern supplied</returns>
      <remarks>
            Essentially the date pattern is examined to determine what the
            most suitable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected would be
            and hourly roll point as minutes could not be detected.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit" /> to initialize
            the current number of backups.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.CombinePath(System.String,System.String)">
      <summary>
      </summary>
      <param name="path1">
      </param>
      <param name="path2">.1, .2, .3, etc.</param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverTime(System.Boolean)">
      <summary>
            Rollover the file(s) to date/time tagged file(s).
            </summary>
      <param name="fileIsOpen">set to true if the file to be rolled is currently open</param>
      <remarks>
        <para>
            Rollover the file(s) to date/time tagged file(s).
            Resets curSizeRollBackups. 
            If fileIsOpen is set then the new file is opened (through SafeOpenFile).
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
      <summary>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />.
            </summary>
      <param name="fromFile">Name of existing file to roll.</param>
      <param name="toFile">New name for file.</param>
      <remarks>
        <para>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />. It
            also checks for existence of target file and deletes if it does.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.FileExists(System.String)">
      <summary>
            Test if a file exists at a specified path
            </summary>
      <param name="path">the path to the file</param>
      <returns>true if the file exists</returns>
      <remarks>
        <para>
            Test if a file exists at a specified path
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
      <summary>
            Deletes the specified file if it exists.
            </summary>
      <param name="fileName">The file to delete.</param>
      <remarks>
        <para>
            Delete a file if is exists.
            The file is first moved to a new filename then deleted.
            This allows the file to be removed even when it cannot
            be deleted, but it still can be moved.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
      <summary>
            Implements file roll base on file size.
            </summary>
      <remarks>
        <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.
            </para>
        <para>
            A new file is created to receive further log output.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverRenameFiles(System.String)">
      <summary>
            Implements file roll.
            </summary>
      <param name="baseFileName">the base name to rename</param>
      <remarks>
        <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. 
            </para>
        <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
        <para>
            This is called by <see cref="M:log4net.Appender.RollingFileAppender.RollOverSize" /> to rename the files.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
      <summary>
            Get the start time of the next window for the current rollpoint
            </summary>
      <param name="currentDateTime">the current date</param>
      <param name="rollPoint">the type of roll point we are working with</param>
      <returns>the start time for the next roll point an interval after the currentDateTime date</returns>
      <remarks>
        <para>
            Returns the date of the next roll point after the currentDateTime date passed to the method.
            </para>
        <para>
            The basic strategy is to subtract the time parts that are less significant
            than the rollpoint from the current time. This should roll the time back to
            the start of the time window for the current rollpoint. Then we add 1 window
            worth of time and get the start time of the next window for the rollpoint.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.DateTimeStrategy">
      <summary>
            Gets or sets the strategy for determining the current date and time. The default
            implementation is to use LocalDateTime which internally calls through to DateTime.Now. 
            DateTime.UtcNow may be used on frameworks newer than .NET 1.0 by specifying
            <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime" />.
            </summary>
      <value>
            An implementation of the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> interface which returns the current date and time.
            </value>
      <remarks>
        <para>
            Gets or sets the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> used to return the current date and time.
            </para>
        <para>
            There are two built strategies for determining the current date and time, 
            <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime" />
            and <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime" />.
            </para>
        <para>
            The default strategy is <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
      <summary>
            Gets or sets the date pattern to be used for generating file names
            when rolling over on date.
            </summary>
      <value>
            The date pattern to be used for generating file names when rolling 
            over on date.
            </value>
      <remarks>
        <para>
            Takes a string in the same format as expected by 
            <see cref="T:log4net.DateFormatter.SimpleDateFormatter" />.
            </para>
        <para>
            This property determines the rollover schedule when rolling over
            on date.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
      <summary>
            Gets or sets the maximum number of backup files that are kept before
            the oldest is erased.
            </summary>
      <value>
            The maximum number of backup files that are kept before the oldest is
            erased.
            </value>
      <remarks>
        <para>
            If set to zero, then there will be no backup files and the log file 
            will be truncated when it reaches <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" />.  
            </para>
        <para>
            If a negative number is supplied then no deletions will be made.  Note 
            that this could result in very slow performance as a large number of 
            files are rolled over unless <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> is used.
            </para>
        <para>
            The maximum applies to <b>each</b> time based group of files and 
            <b>not</b> the total.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
      <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
      <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
      <remarks>
        <para>
            This property is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" /> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64" /> argument from the setter taking a <see cref="T:System.String" /> 
            argument.
            </para>
        <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
      <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
      <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
      <remarks>
        <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
        <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
        <para>
            The default maximum file size is 10MB.
            </para>
        <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" /> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
      <summary>
            Gets or sets the rolling file count direction. 
            </summary>
      <value>
            The rolling file count direction.
            </value>
      <remarks>
        <para>
            Indicates if the current file is the lowest numbered file or the
            highest numbered file.
            </para>
        <para>
            By default newer files have lower numbers (<see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &lt; 0),
            i.e. log.1 is most recent, log.5 is the 5th backup, etc...
            </para>
        <para>
          <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 does the opposite i.e.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 to reduce 
            rollover costs.
            </para>
        <para>The default file count direction is -1.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
      <summary>
            Gets or sets the rolling style.
            </summary>
      <value>The rolling style.</value>
      <remarks>
        <para>
            The default rolling style is <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" />.
            </para>
        <para>
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> this appender's
            <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is set to <c>false</c>, otherwise
            the appender would append to a single file rather than rolling
            the file each time it is opened.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.PreserveLogFileNameExtension">
      <summary>
            Gets or sets a value indicating whether to preserve the file name extension when rolling.
            </summary>
      <value>
        <c>true</c> if the file name extension should be preserved.
            </value>
      <remarks>
        <para>
            By default file.log is rolled to file.log.yyyy-MM-dd or file.log.curSizeRollBackup.
            However, under Windows the new file name will loose any program associations as the
            extension is changed. Optionally file.log can be renamed to file.yyyy-MM-dd.log or
            file.curSizeRollBackup.log to maintain any program associations.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
      <summary>
            Gets or sets a value indicating whether to always log to
            the same file.
            </summary>
      <value>
        <c>true</c> if always should be logged to the same file, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formatted datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup).
            </para>
        <para>
            This will make time based rollovers with a large number of backups 
            much faster as the appender it won't have to rename all the backups!
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.SmtpAppender">
      <summary>
            Send an e-mail when a specific logging event occurs, typically on errors 
            or fatal errors.
            </summary>
      <remarks>
        <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
        <note type="caution">
            Authentication and setting the server Port are only available on the MS .NET 1.1 runtime.
            For these features to be enabled you need to ensure that you are using a version of
            the log4net assembly that is built against the MS .NET 1.1 framework and that you are
            running the your application on the MS .NET 1.1 runtime. On all other platforms only sending
            unauthenticated messages to a server listening on port 25 (the default) is supported.
            </note>
        <para>
            Authentication is supported by setting the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property to
            either <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> or <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />.
            If using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> authentication then the <see cref="P:log4net.Appender.SmtpAppender.Username" />
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> properties must also be set.
            </para>
        <para>
            To set the SMTP server port use the <see cref="P:log4net.Appender.SmtpAppender.Port" /> property. The default port is 25.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Appender.SmtpAppender.SmtpAuthentication">
      <summary>
            Values for the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property.
            </summary>
      <remarks>
        <para>
            SMTP authentication modes.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
      <param name="events">The logging events to send.</param>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.SendEmail(System.String)">
      <summary>
            Send the email message
            </summary>
      <param name="messageBody">the body text to include in the mail</param>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.To">
      <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
      <value>
        <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
        <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
      </value>
      <remarks>
        <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
        <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Cc">
      <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses 
            that will be carbon copied (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
      <value>
        <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
        <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
      </value>
      <remarks>
        <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
        <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Bcc">
      <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses
            that will be blind carbon copied.
            </summary>
      <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
      <remarks>
        <para>
            A semicolon-delimited list of recipient e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.From">
      <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
      <value>
            The e-mail address of the sender.
            </value>
      <remarks>
        <para>
            The e-mail address of the sender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Subject">
      <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
      <value>
            The subject line of the e-mail message.
            </value>
      <remarks>
        <para>
            The subject line of the e-mail message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.SmtpHost">
      <summary>
            Gets or sets the name of the SMTP relay mail server to use to send 
            the e-mail messages.
            </summary>
      <value>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </value>
      <remarks>
        <para>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.LocationInfo">
      <summary>
            Obsolete
            </summary>
      <remarks>
            Use the BufferingAppenderSkeleton Fix methods instead 
            </remarks>
      <remarks>
        <para>
            Obsolete property.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Authentication">
      <summary>
            The mode to use to authentication with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            Valid Authentication mode values are: <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />, 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, and <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />. 
            The default value is <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />. When using 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> you must specify the <see cref="P:log4net.Appender.SmtpAppender.Username" /> 
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> to use to authenticate.
            When using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" /> the Windows credentials for the current
            thread, if impersonating, or the process will be used to authenticate. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Username">
      <summary>
            The username to use to authenticate with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the username will be ignored. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Password">
      <summary>
            The password to use to authenticate with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the password will be ignored. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Port">
      <summary>
            The port on which the SMTP server is listening
            </summary>
      <remarks>
        <note type="caution">Server Port is only available on the MS .NET 1.1 runtime.</note>
        <para>
            The port on which the SMTP server is listening. The default
            port is <c>25</c>. The Port can only be changed when running on
            the MS .NET 1.1 runtime.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Priority">
      <summary>
            Gets or sets the priority of the e-mail message
            </summary>
      <value>
            One of the <see cref="T:System.Net.Mail.MailPriority" /> values.
            </value>
      <remarks>
        <para>
            Sets the priority of the e-mails generated by this
            appender. The default priority is <see cref="F:System.Net.Mail.MailPriority.Normal" />.
            </para>
        <para>
            If you are using this appender to report errors then
            you may want to set the priority to <see cref="F:System.Net.Mail.MailPriority.High" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.EnableSsl">
      <summary>
            Enable or disable use of SSL when sending e-mail message
            </summary>
      <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.ReplyTo">
      <summary>
            Gets or sets the reply-to e-mail address.
            </summary>
      <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.SubjectEncoding">
      <summary>
            Gets or sets the subject encoding to be used.
            </summary>
      <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.BodyEncoding">
      <summary>
            Gets or sets the body encoding to be used.
            </summary>
      <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.SmtpPickupDirAppender">
      <summary>
            Send an email when a specific logging event occurs, typically on errors 
            or fatal errors. Rather than sending via smtp it writes a file into the
            directory specified by <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />. This allows services such
            as the IIS SMTP agent to manage sending the messages.
            </summary>
      <remarks>
        <para>
            The configuration for this appender is identical to that of the <c>SMTPAppender</c>,
            except that instead of specifying the <c>SMTPAppender.SMTPHost</c> you specify
            <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />.
            </para>
        <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpPickupDirAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
      </remarks>
      <author>Niall Daley</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.SmtpPickupDirAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
      <param name="events">The logging events to send.</param>
      <remarks>
        <para>
            Sends the contents of the cyclic buffer as an e-mail message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions">
      <summary>
            Activate the options on this appender. 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.To">
      <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
      <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
      <remarks>
        <para>
            A semicolon-delimited list of e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.From">
      <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
      <value>
            The e-mail address of the sender.
            </value>
      <remarks>
        <para>
            The e-mail address of the sender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.Subject">
      <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
      <value>
            The subject line of the e-mail message.
            </value>
      <remarks>
        <para>
            The subject line of the e-mail message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.PickupDir">
      <summary>
            Gets or sets the path to write the messages to.
            </summary>
      <remarks>
        <para>
            Gets or sets the path to write the messages to. This should be the same
            as that used by the agent sending the messages.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TelnetAppender">
      <summary>
            Appender that allows clients to connect via Telnet to receive log messages
            </summary>
      <remarks>
        <para>
            The TelnetAppender accepts socket connections and streams logging messages
            back to the client.  
            The output is provided in a telnet-friendly way so that a log can be monitored 
            over a TCP/IP socket.
            This allows simple remote monitoring of application logging.
            </para>
        <para>
            The default <see cref="P:log4net.Appender.TelnetAppender.Port" /> is 23 (the telnet port).
            </para>
      </remarks>
      <author>Keith Long</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.TelnetAppender.SocketHandler">
      <summary>
            Helper class to manage connected clients
            </summary>
      <remarks>
        <para>
            The SocketHandler class is used to accept connections from
            clients.  It is threaded so that clients can connect/disconnect
            asynchronously.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient">
      <summary>
            Class that represents a client connected to this handler
            </summary>
      <remarks>
        <para>
            Class that represents a client connected to this handler
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.#ctor(System.Net.Sockets.Socket)">
      <summary>
            Create this <see cref="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient" /> for the specified <see cref="T:System.Net.Sockets.Socket" /></summary>
      <param name="socket">the client's socket</param>
      <remarks>
        <para>
            Opens a stream writer on the socket.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Send(System.String)">
      <summary>
            Write a string to the client
            </summary>
      <param name="message">string to send</param>
      <remarks>
        <para>
            Write a string to the client
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Dispose">
      <summary>
            Cleanup the clients connection
            </summary>
      <remarks>
        <para>
            Close the socket connection.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.#ctor(System.Int32)">
      <summary>
            Opens a new server port on <paramref ref="port" /></summary>
      <param name="port">the local port to listen on for connections</param>
      <remarks>
        <para>
            Creates a socket handler on the specified local server port.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Send(System.String)">
      <summary>
            Sends a string message to each of the connected clients
            </summary>
      <param name="message">the text to send</param>
      <remarks>
        <para>
            Sends a string message to each of the connected clients
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.AddClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
      <summary>
            Add a client to the internal clients list
            </summary>
      <param name="client">client to add</param>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.RemoveClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
      <summary>
            Remove a client from the internal clients list
            </summary>
      <param name="client">client to remove</param>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.OnConnect(System.IAsyncResult)">
      <summary>
            Callback used to accept a connection on the server socket
            </summary>
      <param name="asyncResult">The result of the asynchronous operation</param>
      <remarks>
        <para>
            On connection adds to the list of connections 
            if there are two many open connections you will be disconnected
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Dispose">
      <summary>
            Close all network connections
            </summary>
      <remarks>
        <para>
            Make sure we close all network connections
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.SocketHandler.HasConnections">
      <summary>
            Test if this handler has active connections
            </summary>
      <value>
        <c>true</c> if this handler has active connections
            </value>
      <remarks>
        <para>
            This property will be <c>true</c> while this handler has
            active connections, that is at least one connection that 
            the handler will attempt to send a message to.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.TelnetAppender.declaringType">
      <summary>
            The fully qualified type of the TelnetAppender class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.OnClose">
      <summary>
            Overrides the parent method to close the socket handler
            </summary>
      <remarks>
        <para>
            Closes all the outstanding connections.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            Create the socket handler and wait for connections
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to each connected client.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to each connected client.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.Port">
      <summary>
            Gets or sets the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </value>
      <remarks>
        <para>
            The default value is 23 (the telnet port).
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> 
            or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TraceAppender">
      <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
      <remarks>
        <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Trace" /> class for details on configuring the
            trace system.
            </para>
        <para>
            Events are written using the <c>System.Diagnostics.Trace.Write(string,string)</c>
            method. The event's logger name is the default value for the category parameter 
            of the Write method. 
            </para>
        <para>
          <b>Compact Framework</b>
          <br />
            The Compact Framework does not support the <see cref="T:System.Diagnostics.Trace" />
            class for any operation except <c>Assert</c>. When using the Compact Framework this
            appender will write to the <see cref="T:System.Diagnostics.Debug" /> system rather than
            the Trace system. This appender will therefore behave like the <see cref="T:log4net.Appender.DebugAppender" />.
            </para>
      </remarks>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Ron Grabowski</author>
    </member>
    <member name="F:log4net.Appender.TraceAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TraceAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
        <para>
            The default value is <c>true</c>.</para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.TraceAppender.m_category">
      <summary>
            Defaults to %logger
            </summary>
    </member>
    <member name="M:log4net.Appender.TraceAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" />.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" /> 
            with a specified layout.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TraceAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TraceAppender.ImmediateFlush">
      <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
      <remarks>
        <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
        <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TraceAppender.Category">
      <summary>
            The category parameter sent to the Trace method.
            </summary>
      <remarks>
        <para>
            Defaults to %logger which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent" /> as the category parameter.
            </para>
        <para>
        </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TraceAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.AliasRepositoryAttribute">
      <summary>
            Assembly level attribute that specifies a repository to alias to this assembly's repository.
            </summary>
      <remarks>
        <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.RepositoryAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
        <para>
            An assembly can alias another assembly's repository to its repository by
            specifying this attribute with the name of the target repository.
            </para>
        <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required repositories.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.AliasRepositoryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </summary>
      <param name="name">The repository to alias to this assemby's repository.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.AliasRepositoryAttribute.Name">
      <summary>
            Gets or sets the repository to alias to this assemby's repository.
            </summary>
      <value>
            The repository to alias to this assemby's repository.
            </value>
      <remarks>
        <para>
            The name of the repository to alias to this assemby's repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.AliasDomainAttribute">
      <summary>
            Assembly level attribute that specifies a domain to alias to this assembly's repository.
            </summary>
      <remarks>
        <para>
          <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
        </para>
        <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.DomainAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
        <para>
            An assembly can alias another assembly's domain to its repository by
            specifying this attribute with the name of the target domain.
            </para>
        <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required domains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.AliasDomainAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasDomainAttribute" /> class with 
            the specified domain to alias to this assembly's repository.
            </summary>
      <param name="name">The domain to alias to this assemby's repository.</param>
      <remarks>
        <para>
            Obsolete. Use <see cref="T:log4net.Config.AliasRepositoryAttribute" /> instead of <see cref="T:log4net.Config.AliasDomainAttribute" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.BasicConfigurator">
      <summary>
            Use this class to quickly configure a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </summary>
      <remarks>
        <para>
            Allows very simple programmatic configuration of log4net.
            </para>
        <para>
            Only one appender can be configured using this configurator.
            The appender is set at the root of the hierarchy and all logging
            events will be delivered to that appender.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Config.BasicConfigurator.declaringType">
      <summary>
            The fully qualified type of the BasicConfigurator class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.BasicConfigurator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure">
      <summary>
            Initializes the log4net system with a default configuration.
            </summary>
      <remarks>
        <para>
            Initializes the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
      <summary>
            Initializes the log4net system using the specified appender.
            </summary>
      <param name="appender">The appender to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the log4net system using the specified appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender[])">
      <summary>
            Initializes the log4net system using the specified appenders.
            </summary>
      <param name="appenders">The appenders to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the log4net system using the specified appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> with a default configuration.
            </summary>
      <param name="repository">The repository to configure.</param>
      <remarks>
        <para>
            Initializes the specified repository using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender)">
      <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="appender">The appender to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender[])">
      <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appenders.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="appenders">The appenders to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.ConfiguratorAttribute">
      <summary>
            Base class for all log4net configuration attributes.
            </summary>
      <remarks>
            This is an abstract class that must be extended by 
            specific configurators. This attribute allows the
            configurator to be parameterized by an assembly level
            attribute.
            </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.#ctor(System.Int32)">
      <summary>
            Constructor used by subclasses.
            </summary>
      <param name="priority">the ordering priority for this configurator</param>
      <remarks>
        <para>
            The <paramref name="priority" /> is used to order the configurator
            attributes before they are invoked. Higher priority configurators are executed
            before lower priority ones.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Abstract method implemented by a subclass. When this method is called
            the subclass should configure the <paramref name="targetRepository" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.CompareTo(System.Object)">
      <summary>
            Compare this instance to another ConfiguratorAttribute
            </summary>
      <param name="obj">the object to compare to</param>
      <returns>see <see cref="M:System.IComparable.CompareTo(System.Object)" /></returns>
      <remarks>
        <para>
            Compares the priorities of the two <see cref="T:log4net.Config.ConfiguratorAttribute" /> instances.
            Sorts by priority in descending order. Objects with the same priority are
            randomly ordered.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.RepositoryAttribute">
      <summary>
            Assembly level attribute that specifies the logging repository for the assembly.
            </summary>
      <remarks>
        <para>
            Assemblies are mapped to logging repository. This attribute specified 
            on the assembly controls
            the configuration of the repository. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the repository that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the <see cref="T:log4net.Repository.ILoggerRepository" /> object 
            to create for the assembly. If this attribute is not specified or a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> 
            is not specified then the assembly will be part of the default shared logging repository.
            </para>
        <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.RepositoryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.RepositoryAttribute.#ctor(System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class 
            with the name of the repository.
            </summary>
      <param name="name">The name of the repository.</param>
      <remarks>
        <para>
            Initialize the attribute with the name for the assembly's repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.RepositoryAttribute.Name">
      <summary>
            Gets or sets the name of the logging repository.
            </summary>
      <value>
            The string name to use as the name of the repository associated with this
            assembly.
            </value>
      <remarks>
        <para>
            This value does not have to be unique. Several assemblies can share the
            same repository. They will share the logging configuration of the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.RepositoryAttribute.RepositoryType">
      <summary>
            Gets or sets the type of repository to create for this assembly.
            </summary>
      <value>
            The type of repository to create for this assembly.
            </value>
      <remarks>
        <para>
            The type of the repository to create for the assembly.
            The type must implement the <see cref="T:log4net.Repository.ILoggerRepository" />
            interface.
            </para>
        <para>
            This will be the type of repository created when 
            the repository is created. If multiple assemblies reference the
            same repository then the repository is only created once using the
            <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" /> of the first assembly to call into the 
            repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.DomainAttribute">
      <summary>
            Assembly level attribute that specifies the logging domain for the assembly.
            </summary>
      <remarks>
        <para>
          <b>DomainAttribute is obsolete. Use RepositoryAttribute instead of DomainAttribute.</b>
        </para>
        <para>
            Assemblies are mapped to logging domains. Each domain has its own
            logging repository. This attribute specified on the assembly controls
            the configuration of the domain. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the domain that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the repository objects to create for the domain. If 
            this attribute is not specified and a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> is not specified
            then the assembly will be part of the default shared logging domain.
            </para>
        <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.DomainAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class.
            </summary>
      <remarks>
        <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DomainAttribute.#ctor(System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class 
            with the name of the domain.
            </summary>
      <param name="name">The name of the domain.</param>
      <remarks>
        <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.DOMConfigurator">
      <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.#ctor">
      <summary>
            Private constructor
            </summary>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure">
      <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
      <param name="repository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="repository">The repository to configure.</param>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.Stream)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configStream">A stream to load the XML configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configStream">The stream to load the XML configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
      <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:Configure(FileInfo)" />
    </member>
    <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:Configure(FileInfo)" />
    </member>
    <member name="T:log4net.Config.XmlConfiguratorAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
      <remarks>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
        <para>
            If neither of the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />
            properties are set the configuration is loaded from the application's .config file.
            If set the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property takes priority over the
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property. The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property
            specifies a path to a file to load the config from. The path is relative to the
            application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property is used as a postfix to the assembly file name.
            The config file must be located in the  application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            For example in a console application setting the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> to
            <c>config</c> has the same effect as not specifying the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or 
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> properties.
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.Watch" /> property can be set to cause the <see cref="T:log4net.Config.XmlConfigurator" />
            to watch the configuration file for changes.
            </para>
        <note>
          <para>
            Log4net will only look for assembly level configuration attributes once.
            When using the log4net assembly level attributes to control the configuration 
            of log4net you must ensure that the first call to any of the 
            <see cref="T:log4net.Core.LoggerManager" /> methods is made from the assembly with the configuration
            attributes. 
            </para>
          <para>
            If you cannot guarantee the order in which log4net calls will be made from 
            different assemblies you must use programmatic configuration instead, i.e.
            call the <see cref="M:XmlConfigurator.Configure()" /> method directly.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Config.XmlConfiguratorAttribute.declaringType">
      <summary>
            The fully qualified type of the XmlConfiguratorAttribute class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Configure the repository using the <see cref="T:log4net.Config.XmlConfigurator" />.
            The <paramref name="targetRepository" /> specified must extend the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />
            class otherwise the <see cref="T:log4net.Config.XmlConfigurator" /> will not be able to
            configure it.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetRepository" /> does not extend <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.</exception>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Attempt to load configuration from the local file system
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configure the specified repository using a <see cref="T:System.IO.FileInfo" /></summary>
      <param name="targetRepository">The repository to configure.</param>
      <param name="configFile">the FileInfo pointing to the config file</param>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromUri(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Attempt to load configuration from a URI
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile">
      <summary>
            Gets or sets the filename of the configuration file.
            </summary>
      <value>
            The filename of the configuration file.
            </value>
      <remarks>
        <para>
            If specified, this is the name of the configuration file to use with
            the <see cref="T:log4net.Config.XmlConfigurator" />. This file path is relative to the
            <b>application base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />).
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension">
      <summary>
            Gets or sets the extension of the configuration file.
            </summary>
      <value>
            The extension of the configuration file.
            </value>
      <remarks>
        <para>
            If specified this is the extension for the configuration file.
            The path to the config file is built by using the <b>application 
            base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />),
            the <b>assembly file name</b> and the config file extension.
            </para>
        <para>
            If the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> is set to <c>MyExt</c> then
            possible config file names would be: <c>MyConsoleApp.exe.MyExt</c> or
            <c>MyClassLibrary.dll.MyExt</c>.
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.Watch">
      <summary>
            Gets or sets a value indicating whether to watch the configuration file.
            </summary>
      <value>
        <c>true</c> if the configuration should be watched, <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            If this flag is specified and set to <c>true</c> then the framework
            will watch the configuration file and will reload the config each time 
            the file is modified.
            </para>
        <para>
            The config file can only be watched if it is loaded from local disk.
            In a No-Touch (Smart Client) deployment where the application is downloaded
            from a web server the config file may not reside on the local disk
            and therefore it may not be able to watch it.
            </para>
        <note>
            Watching configuration is not supported on the SSCLI.
            </note>
      </remarks>
    </member>
    <member name="T:log4net.Config.DOMConfiguratorAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
      <remarks>
        <para>
          <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
        </para>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
      <summary>
            Class to register for the log4net section of the configuration file
            </summary>
      <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
      <example>
            Example of registering the log4net section handler :
            <code lang="XML" escaped="true"><configuration><configSections><section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /></configSections><log4net>
            		log4net configuration XML goes here
            	</log4net></configuration></code></example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
            Parses the configuration section.
            </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name="configContext">The configuration context when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference.</param>
      <param name="section">The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</param>
      <returns>The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</returns>
      <remarks>
        <para>
            Returns the <see cref="T:System.Xml.XmlNode" /> containing the configuration data,
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.IPluginFactory">
      <summary>
            Interface used to create plugins.
            </summary>
      <remarks>
        <para>
            Interface used to create  a plugin.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.IPluginFactory.CreatePlugin">
      <summary>
            Creates the plugin object.
            </summary>
      <returns>the new plugin instance</returns>
      <remarks>
        <para>
            Create and return a new plugin instance.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.PluginAttribute">
      <summary>
            Assembly level attribute that specifies a plugin to attach to 
            the repository.
            </summary>
      <remarks>
        <para>
            Specifies the type of a plugin to create and attach to the
            assembly's repository. The plugin type must implement the
            <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.PluginAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
      <param name="typeName">The type name of plugin to create.</param>
      <remarks>
        <para>
            Create the attribute with the plugin type specified.
            </para>
        <para>
            Where possible use the constructor that takes a <see cref="T:System.Type" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.PluginAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
      <param name="type">The type of plugin to create.</param>
      <remarks>
        <para>
            Create the attribute with the plugin type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.PluginAttribute.CreatePlugin">
      <summary>
            Creates the plugin object defined by this attribute.
            </summary>
      <remarks>
        <para>
            Creates the instance of the <see cref="T:log4net.Plugin.IPlugin" /> object as 
            specified by this attribute.
            </para>
      </remarks>
      <returns>The plugin object.</returns>
    </member>
    <member name="M:log4net.Config.PluginAttribute.ToString">
      <summary>
            Returns a representation of the properties of this object.
            </summary>
      <remarks>
        <para>
            Overrides base class <see cref="M:Object.ToString()" /> method to 
            return a representation of the properties of this object.
            </para>
      </remarks>
      <returns>A representation of the properties of this object</returns>
    </member>
    <member name="P:log4net.Config.PluginAttribute.Type">
      <summary>
            Gets or sets the type for the plugin.
            </summary>
      <value>
            The type for the plugin.
            </value>
      <remarks>
        <para>
            The type for the plugin.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.PluginAttribute.TypeName">
      <summary>
            Gets or sets the type name for the plugin.
            </summary>
      <value>
            The type name for the plugin.
            </value>
      <remarks>
        <para>
            The type name for the plugin.
            </para>
        <para>
            Where possible use the <see cref="P:log4net.Config.PluginAttribute.Type" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.SecurityContextProviderAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Core.SecurityContextProvider" />.
            </summary>
      <remarks>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Config.SecurityContextProviderAttribute.declaringType">
      <summary>
            The fully qualified type of the SecurityContextProviderAttribute class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Config.SecurityContextProviderAttribute.#ctor(System.Type)">
      <summary>
            Construct provider attribute with type specified
            </summary>
      <param name="providerType">the type of the provider to use</param>
      <remarks>
        <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.SecurityContextProviderAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the SecurityContextProvider
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Creates a provider instance from the <see cref="P:log4net.Config.SecurityContextProviderAttribute.ProviderType" /> specified.
            Sets this as the default security context provider <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.SecurityContextProviderAttribute.ProviderType">
      <summary>
            Gets or sets the type of the provider to use.
            </summary>
      <value>
            the type of the provider to use.
            </value>
      <remarks>
        <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.XmlConfigurator">
      <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
      <remarks>
        <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler">
      <summary>
            Class used to watch config files.
            </summary>
      <remarks>
        <para>
            Uses the <see cref="T:System.IO.FileSystemWatcher" /> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher" />
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> to
            elapse.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.#ctor(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class to
            watch a specified config file used to configure a repository.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The configuration file to watch.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
      <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
      <param name="e">The argument indicates the file that caused the event to be fired.</param>
      <remarks>
        <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
      <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
      <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
      <param name="e">The argument indicates the file that caused the event to be fired.</param>
      <remarks>
        <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
      <summary>
            Called by the timer when the configuration has been updated.
            </summary>
      <param name="state">null</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.Dispose">
      <summary>
            Release the handles held by the watcher and timer.
            </summary>
    </member>
    <member name="F:log4net.Config.XmlConfigurator.m_repositoryName2ConfigAndWatchHandler">
      <summary>
            Maps repository names to ConfigAndWatchHandler instances to allow a particular
            ConfigAndWatchHandler to dispose of its FileSystemWatcher when a repository is 
            reconfigured.
            </summary>
    </member>
    <member name="F:log4net.Config.XmlConfigurator.declaringType">
      <summary>
            The fully qualified type of the XmlConfigurator class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.#ctor">
      <summary>
            Private constructor
            </summary>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure">
      <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
      <remarks>
        <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
        <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
      </remarks>
      <seealso cref="T:log4net.Config.Log4NetConfigurationSectionHandler" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
      <remarks>
        <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
        <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
      </remarks>
      <param name="repository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
      <remarks>
        <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
      </remarks>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
      <remarks>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="repository">The repository to configure.</param>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.Uri)">
      <summary>
            Configures log4net using the specified configuration URI.
            </summary>
      <param name="configUri">A URI to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.Stream)">
      <summary>
            Configures log4net using the specified configuration data stream.
            </summary>
      <param name="configStream">A stream to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Uri)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            URI.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configUri">A URI to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configStream">The stream to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
      <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:Configure(FileInfo)" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:Configure(FileInfo)" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.InternalConfigureFromXml(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the specified repository using a <c>log4net</c> element.
            </summary>
      <param name="repository">The hierarchy to configure.</param>
      <param name="element">The element to parse.</param>
      <remarks>
        <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
        <para>
            This method is ultimately called by one of the Configure methods 
            to load the configuration from an <see cref="T:System.Xml.XmlElement" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IRepositorySelector">
      <summary>
            Interface used by the <see cref="T:log4net.LogManager" /> to select the <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.LogManager" /> uses a <see cref="T:log4net.Core.IRepositorySelector" /> 
            to specify the policy for selecting the correct <see cref="T:log4net.Repository.ILoggerRepository" /> 
            to return to the caller.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="assembly">The assembly to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </para>
        <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association. The results of this method must be repeatable, i.e.
            when called again with the same arguments the result must be the
            save value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.String)">
      <summary>
            Gets the named <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repositoryName">The name to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
            Lookup a named <see cref="T:log4net.Repository.ILoggerRepository" />. This is the repository created by
            calling <see cref="M:CreateRepository(string,Type)" />.
            </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a new repository for the assembly specified.
            </summary>
      <param name="assembly">The assembly to use to create the domain to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the domain
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a new repository with the name specified.
            </summary>
      <param name="repositoryName">The name to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the name
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same name will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(Assembly, Type)" />
            to create a new repository and <see cref="M:GetRepository(Assembly)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetAllRepositories">
      <summary>
            Gets an array of all currently defined repositories.
            </summary>
      <returns>
            An array of the <see cref="T:log4net.Repository.ILoggerRepository" /> instances created by 
            this <see cref="T:log4net.Core.IRepositorySelector" />.</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.CompactRepositorySelector">
      <summary>
            The implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface suitable
            for use with the compact framework
            </summary>
      <remarks>
        <para>
            This <see cref="T:log4net.Core.IRepositorySelector" /> implementation is a simple
            mapping between repository name and <see cref="T:log4net.Repository.ILoggerRepository" />
            object.
            </para>
        <para>
            The .NET Compact Framework 1.0 does not support retrieving assembly
            level attributes therefore unlike the <c>DefaultRepositorySelector</c>
            this selector does not examine the calling assembly for attributes.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.CompactRepositorySelector.declaringType">
      <summary>
            The fully qualified type of the CompactRepositorySelector class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.#ctor(System.Type)">
      <summary>
            Create a new repository selector
            </summary>
      <param name="defaultRepositoryType">the type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <remarks>
        <para>
            Create an new compact repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="defaultRepositoryType" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">throw if <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" /></exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Get the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly
            </summary>
      <param name="assembly">not used</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
        <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
        <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)">
      <summary>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
      <param name="repositoryName">the name of the repository to lookup</param>
      <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
        <para>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" />. The default 
            repository is <c>log4net-default-repository</c>. Other repositories 
            must be created using the <see cref="M:CreateRepository(string, Type)" />.
            If the named repository does not exist an exception is thrown.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
      <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> does not exist</exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Create a new repository for the assembly specified 
            </summary>
      <param name="assembly">not used</param>
      <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <returns>the repository created</returns>
      <remarks>
        <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
        <para>
            If the <paramref name="repositoryType" /> is <c>null</c> then the
            default repository type specified to the constructor is used.
            </para>
        <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Create a new repository for the repository specified
            </summary>
      <param name="repositoryName">the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is null then the default repository type is used.</param>
      <returns>the repository created</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same repository specified will return the same repository instance.
            </para>
        <para>
            If the named repository already exists an exception will be thrown.
            </para>
        <para>
            If <paramref name="repositoryType" /> is <c>null</c> then the default 
            repository type specified to the constructor is used.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
      <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> already exists</exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)" />
            to create a new repository and <see cref="M:GetRepository(string)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetAllRepositories">
      <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
      <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
      <summary>
            Notify the registered listeners that the repository has been created
            </summary>
      <param name="repository">The repository that has been created</param>
      <remarks>
        <para>
            Raises the <event cref="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">LoggerRepositoryCreatedEvent</event>
            event.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.DefaultRepositorySelector">
      <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface.
            </summary>
      <remarks>
        <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.DefaultRepositorySelector.declaringType">
      <summary>
            The fully qualified type of the DefaultRepositorySelector class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.#ctor(System.Type)">
      <summary>
            Creates a new repository selector.
            </summary>
      <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <remarks>
        <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultRepositoryType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <remarks>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute" /> 
            attribute on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute" /> attributes defined on
            the <paramref name="repositoryAssembly" />.
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.
            </summary>
      <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.</returns>
      <remarks>
        <para>
            Returns the named repository. If <paramref name="repositoryName" /> is <c>null</c>
            a <see cref="T:System.ArgumentNullException" /> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException" /> is thrown.
            </para>
        <para>
            Use <see cref="M:CreateRepository(string, Type)" /> to create a repository.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryName" /> is <see langword="null" />.</exception>
      <exception cref="T:log4net.Core.LogException">
        <paramref name="repositoryName" /> does not exist.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Create a new repository for the assembly specified 
            </summary>
      <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
      <summary>
            Creates a new repository for the assembly specified.
            </summary>
      <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryName">The name to assign to the created repository</param>
      <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a new repository for the specified repository.
            </summary>
      <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is <see langword="null" /> then the default repository type is used.</param>
      <returns>The new repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same repository specified will return the same repository instance.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryName" /> is <see langword="null" />.</exception>
      <exception cref="T:log4net.Core.LogException">
        <paramref name="repositoryName" /> already exists.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)" />
            to create a new repository and <see cref="M:GetRepository(string)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetAllRepositories">
      <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
      <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
      <summary>
            Aliases a repository to an existing repository.
            </summary>
      <param name="repositoryAlias">The repository to alias.</param>
      <param name="repositoryTarget">The repository that the repository is aliased to.</param>
      <remarks>
        <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
        <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="repositoryAlias" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repositoryTarget" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
      <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
      <param name="repository">The repository that has been created.</param>
      <remarks>
        <para>
            Raises the <see cref="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
      <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
      <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute" />.</param>
      <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
      <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the repository using information from the assembly.
            </summary>
      <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute" />
            attributes which define the configuration for the repository.</param>
      <param name="repository">The repository to configure.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
      <param name="assembly">The assembly that contains the attributes.</param>
      <param name="repository">The repository to add the plugins to.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
      <param name="assembly">The assembly that contains the attributes.</param>
      <param name="repository">The repository to alias to.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ErrorCode">
      <summary>
            Defined error codes that can be passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)" /> method.
            </summary>
      <remarks>
        <para>
            Values passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.ErrorCode.GenericFailure">
      <summary>
            A general error
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.WriteFailure">
      <summary>
            Error while writing output
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.FlushFailure">
      <summary>
            Failed to flush file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.CloseFailure">
      <summary>
            Failed to close file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.FileOpenFailure">
      <summary>
            Unable to open output file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.MissingLayout">
      <summary>
            No layout specified
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.AddressParseFailure">
      <summary>
            Failed to parse address
            </summary>
    </member>
    <member name="T:log4net.Core.ITriggeringEventEvaluator">
      <summary>
            Test if an <see cref="T:log4net.Core.LoggingEvent" /> triggers an action
            </summary>
      <remarks>
        <para>
            Implementations of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </para>
        <para>
            The action or behavior triggered is defined by the implementation.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Test if this event triggers the action
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>
        <c>true</c> if this event triggers the action, otherwise <c>false</c></returns>
      <remarks>
        <para>
            Return <c>true</c> if this event triggers the action
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ExceptionEvaluator">
      <summary>
            An evaluator that triggers on an Exception type
            </summary>
      <remarks>
        <para>
            This evaluator will trigger if the type of the Exception
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to a Type in <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.    /// 
            </para>
      </remarks>
      <author>Drew Schaeffer</author>
    </member>
    <member name="F:log4net.Core.ExceptionEvaluator.m_type">
      <summary>
            The type that causes the trigger to fire.
            </summary>
    </member>
    <member name="F:log4net.Core.ExceptionEvaluator.m_triggerOnSubclass">
      <summary>
            Causes subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" /> to cause the trigger to fire.
            </summary>
    </member>
    <member name="M:log4net.Core.ExceptionEvaluator.#ctor">
      <summary>
            Default ctor to allow dynamic creation through a configurator.
            </summary>
    </member>
    <member name="M:log4net.Core.ExceptionEvaluator.#ctor(System.Type,System.Boolean)">
      <summary>
            Constructs an evaluator and initializes to trigger on <paramref name="exType" /></summary>
      <param name="exType">the type that triggers this evaluator.</param>
      <param name="triggerOnSubClass">If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.</param>
    </member>
    <member name="M:log4net.Core.ExceptionEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>This method returns <c>true</c>, if the logging event Exception 
            Type is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />. 
            Otherwise it returns <c>false</c></returns>
      <remarks>
        <para>
            This evaluator will trigger if the Exception Type of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.ExceptionEvaluator.ExceptionType">
      <summary>
            The type that triggers this evaluator.
            </summary>
    </member>
    <member name="P:log4net.Core.ExceptionEvaluator.TriggerOnSubclass">
      <summary>
            If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.
            </summary>
    </member>
    <member name="T:log4net.Core.IErrorHandler">
      <summary>
            Appenders may delegate their error handling to an <see cref="T:log4net.Core.IErrorHandler" />.
            </summary>
      <remarks>
        <para>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
      <summary>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
      <param name="errorCode">The error code associated with the error.</param>
      <remarks>
        <para>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception)">
      <summary>
            Prints the error message passed as a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
      <remarks>
        <para>
            See <see cref="M:Error(string,Exception,ErrorCode)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String)">
      <summary>
            Prints the error message passed as a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <remarks>
        <para>
            See <see cref="M:Error(string,Exception,ErrorCode)" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IFixingRequired">
      <summary>
            Interface for objects that require fixing.
            </summary>
      <remarks>
        <para>
            Interface that indicates that the object requires fixing before it
            can be taken outside the context of the appender's 
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </para>
        <para>
            When objects that implement this interface are stored 
            in the context properties maps <see cref="T:log4net.GlobalContext" /><see cref="P:log4net.GlobalContext.Properties" /> and <see cref="T:log4net.ThreadContext" /><see cref="P:log4net.ThreadContext.Properties" /> are fixed 
            (see <see cref="P:log4net.Core.LoggingEvent.Fix" />) the <see cref="M:log4net.Core.IFixingRequired.GetFixedObject" />
            method will be called.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.IFixingRequired.GetFixedObject">
      <summary>
            Get a portable version of this object
            </summary>
      <returns>the portable instance of this object</returns>
      <remarks>
        <para>
            Get a portable instance object that represents the current
            state of this object. The portable object can be stored
            and logged from any thread with identical results.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ILogger">
      <summary>
            Interface that all loggers implement
            </summary>
      <remarks>
        <para>
            This interface supports logging events and testing if a level
            is enabled for logging.
            </para>
        <para>
            These methods will not throw exceptions. Note to implementor, ensure
            that the implementation of these methods cannot allow an exception
            to be thrown to the caller.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.ILogger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This generic form is intended to be used by wrappers.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">the exception to log, including its stack trace. Pass <c>null</c> to not log an exception.</param>
      <remarks>
        <para>
            Generates a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.ILogger.Log(log4net.Core.LoggingEvent)">
      <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Logs the specified logging event through this logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.ILogger.IsEnabledFor(log4net.Core.Level)">
      <summary>
            Checks if this logger is enabled for a given <see cref="T:log4net.Core.Level" /> passed as parameter.
            </summary>
      <param name="level">The level to check.</param>
      <returns>
        <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
      <remarks>
        <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.ILogger.Name">
      <summary>
            Gets the name of the logger.
            </summary>
      <value>
            The name of the logger.
            </value>
      <remarks>
        <para>
            The name of this logger
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.ILogger.Repository">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ILoggerWrapper">
      <summary>
            Base interface for all wrappers
            </summary>
      <remarks>
        <para>
            Base interface for all wrappers.
            </para>
        <para>
            All wrappers must implement this interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="P:log4net.Core.ILoggerWrapper.Logger">
      <summary>
            Get the implementation behind this wrapper object.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this object.
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this
            object. The <c>Logger</c> object may not 
            be the same object as this object because of logger decorators.
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerRepositoryCreationEventHandler">
      <summary>
            Delegate used to handle logger repository creation event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Core.IRepositorySelector" /> which created the repository.</param>
      <param name="e">The <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> event args
            that holds the <see cref="T:log4net.Repository.ILoggerRepository" /> instance that has been created.</param>
      <remarks>
        <para>
            Delegate used to handle logger repository creation event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerRepositoryCreationEventArgs">
      <summary>
            Provides data for the <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </summary>
      <remarks>
        <para>
            A <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> 
            event is raised every time a <see cref="T:log4net.Repository.ILoggerRepository" /> is created.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggerRepositoryCreationEventArgs.m_repository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerRepositoryCreationEventArgs.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </summary>
      <param name="repository">the <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created</param>
      <remarks>
        <para>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerRepositoryCreationEventArgs.LoggerRepository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.Level">
      <summary>
            Defines the default set of levels recognized by the system.
            </summary>
      <remarks>
        <para>
            Each <see cref="T:log4net.Core.LoggingEvent" /> has an associated <see cref="T:log4net.Core.Level" />.
            </para>
        <para>
            Levels have a numeric <see cref="P:log4net.Core.Level.Value" /> that defines the relative 
            ordering between levels. Two Levels with the same <see cref="P:log4net.Core.Level.Value" /> 
            are deemed to be equivalent.
            </para>
        <para>
            The levels that are recognized by log4net are set for each <see cref="T:log4net.Repository.ILoggerRepository" />
            and each repository can have different levels defined. The levels are stored
            in the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> on the repository. Levels are
            looked up by name from the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />.
            </para>
        <para>
            When logging at level INFO the actual level used is not <see cref="F:log4net.Core.Level.Info" /> but
            the value of <c>LoggerRepository.LevelMap["INFO"]</c>. The default value for this is
            <see cref="F:log4net.Core.Level.Info" />, but this can be changed by reconfiguring the level map.
            </para>
        <para>
            Each level has a <see cref="P:log4net.Core.Level.DisplayName" /> in addition to its <see cref="P:log4net.Core.Level.Name" />. The 
            <see cref="P:log4net.Core.Level.DisplayName" /> is the string that is written into the output log. By default
            the display name is the same as the level name, but this can be used to alias levels
            or to localize the log output.
            </para>
        <para>
            Some of the predefined levels recognized by the system are:
            </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Off" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Fatal" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Error" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Warn" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Info" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Debug" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.All" />.</description>
          </item>
        </list>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.Level.Off">
      <summary>
            The <see cref="F:log4net.Core.Level.Off" /> level designates a higher level than all the rest.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Log4Net_Debug">
      <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Emergency">
      <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Fatal">
      <summary>
            The <see cref="F:log4net.Core.Level.Fatal" /> level designates very severe error events 
            that will presumably lead the application to abort.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Alert">
      <summary>
            The <see cref="F:log4net.Core.Level.Alert" /> level designates very severe error events. 
            Take immediate action, alerts.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Critical">
      <summary>
            The <see cref="F:log4net.Core.Level.Critical" /> level designates very severe error events. 
            Critical condition, critical.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Severe">
      <summary>
            The <see cref="F:log4net.Core.Level.Severe" /> level designates very severe error events.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Error">
      <summary>
            The <see cref="F:log4net.Core.Level.Error" /> level designates error events that might 
            still allow the application to continue running.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Warn">
      <summary>
            The <see cref="F:log4net.Core.Level.Warn" /> level designates potentially harmful 
            situations.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Notice">
      <summary>
            The <see cref="F:log4net.Core.Level.Notice" /> level designates informational messages 
            that highlight the progress of the application at the highest level.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Info">
      <summary>
            The <see cref="F:log4net.Core.Level.Info" /> level designates informational messages that 
            highlight the progress of the application at coarse-grained level.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Debug">
      <summary>
            The <see cref="F:log4net.Core.Level.Debug" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Fine">
      <summary>
            The <see cref="F:log4net.Core.Level.Fine" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Trace">
      <summary>
            The <see cref="F:log4net.Core.Level.Trace" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Finer">
      <summary>
            The <see cref="F:log4net.Core.Level.Finer" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Verbose">
      <summary>
            The <see cref="F:log4net.Core.Level.Verbose" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Finest">
      <summary>
            The <see cref="F:log4net.Core.Level.Finest" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.All">
      <summary>
            The <see cref="F:log4net.Core.Level.All" /> level designates the lowest level possible.
            </summary>
    </member>
    <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="level">Integer value for this level, higher values represent more severe levels.</param>
      <param name="levelName">The string name of this level.</param>
      <param name="displayName">The display name for this level. This may be localized or otherwise different from the name</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="level">Integer value for this level, higher values represent more severe levels.</param>
      <param name="levelName">The string name of this level.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.ToString">
      <summary>
            Returns the <see cref="T:System.String" /> representation of the current 
            <see cref="T:log4net.Core.Level" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> representation of the current <see cref="T:log4net.Core.Level" />.
            </returns>
      <remarks>
        <para>
            Returns the level <see cref="P:log4net.Core.Level.Name" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.Equals(System.Object)">
      <summary>
            Compares levels.
            </summary>
      <param name="o">The object to compare against.</param>
      <returns>
        <c>true</c> if the objects are equal.</returns>
      <remarks>
        <para>
            Compares the levels of <see cref="T:log4net.Core.Level" /> instances, and 
            defers to base class if the target object is not a <see cref="T:log4net.Core.Level" />
            instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.GetHashCode">
      <summary>
            Returns a hash code
            </summary>
      <returns>A hash code for the current <see cref="T:log4net.Core.Level" />.</returns>
      <remarks>
        <para>
            Returns a hash code suitable for use in hashing algorithms and data 
            structures like a hash table.
            </para>
        <para>
            Returns the hash code of the level <see cref="P:log4net.Core.Level.Value" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an 
            indication of their relative values.
            </summary>
      <param name="r">A <see cref="T:log4net.Core.Level" /> instance or <see langword="null" /> to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the 
            values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>This instance is less than <paramref name="r" />.</description></item><item><term>Zero</term><description>This instance is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><para>This instance is greater than <paramref name="r" />.</para><para>-or-</para><para><paramref name="r" /> is <see langword="null" />.</para></description></item></list></returns>
      <remarks>
        <para>
          <paramref name="r" /> must be an instance of <see cref="T:log4net.Core.Level" /> 
            or <see langword="null" />; otherwise, an exception is thrown.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="r" /> is not a <see cref="T:log4net.Core.Level" />.</exception>
    </member>
    <member name="M:log4net.Core.Level.op_GreaterThan(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is greater than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_LessThan(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is less than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_GreaterThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is greater than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_LessThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is less than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_Equality(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have the same value.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <returns>
        <c>true</c> if the value of <paramref name="l" /> is the same as the 
            value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_Inequality(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have different values.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <returns>
        <c>true</c> if the value of <paramref name="l" /> is different from
            the value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.Compare(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Compares two specified <see cref="T:log4net.Core.Level" /> instances.
            </summary>
      <param name="l">The first <see cref="T:log4net.Core.Level" /> to compare.</param>
      <param name="r">The second <see cref="T:log4net.Core.Level" /> to compare.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the 
            two values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description><paramref name="l" /> is less than <paramref name="r" />.</description></item><item><term>Zero</term><description><paramref name="l" /> is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><paramref name="l" /> is greater than <paramref name="r" />.</description></item></list></returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.Name">
      <summary>
            Gets the name of this level.
            </summary>
      <value>
            The name of this level.
            </value>
      <remarks>
        <para>
            Gets the name of this level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.Value">
      <summary>
            Gets the value of this level.
            </summary>
      <value>
            The value of this level.
            </value>
      <remarks>
        <para>
            Gets the value of this level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.DisplayName">
      <summary>
            Gets the display name of this level.
            </summary>
      <value>
            The display name of this level.
            </value>
      <remarks>
        <para>
            Gets the display name of this level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LevelCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Core.Level" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Core.LevelCollection.ILevelCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Core.LevelCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
    </member>
    <member name="T:log4net.Core.LevelCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.#ctor(log4net.Core.LevelCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ReadOnly(log4net.Core.LevelCollection)">
      <summary>
            Creates a read-only wrapper for a <c>LevelCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            A <c>LevelCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>LevelCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <c>LevelCollection</c>.
            </summary>
      <param name="c">The <c>LevelCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.Level[])">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Core.Level" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[])">
      <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[],System.Int32)">
      <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.Add(log4net.Core.Level)">
      <summary>
            Adds a <see cref="T:log4net.Core.Level" /> to the end of the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Clear">
      <summary>
            Removes all elements from the <c>LevelCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Core.LevelCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Contains(log4net.Core.Level)">
      <summary>
            Determines whether a given <see cref="T:log4net.Core.Level" /> is in the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>LevelCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.IndexOf(log4net.Core.Level)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Core.Level" />
            in the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to locate in the <c>LevelCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>LevelCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Insert(System.Int32,log4net.Core.Level)">
      <summary>
            Inserts an element into the <c>LevelCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.Remove(log4net.Core.Level)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Core.Level" /> from the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to remove from the <c>LevelCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Core.Level" /> was not found in the <c>LevelCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>LevelCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>LevelCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Core.LevelCollection.Enumerator" /> for the entire <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.LevelCollection)">
      <summary>
            Adds the elements of another <c>LevelCollection</c> to the current <c>LevelCollection</c>.
            </summary>
      <param name="x">The <c>LevelCollection</c> whose elements should be added to the end of the current <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.Level[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> array to the current <c>LevelCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Core.Level" /> array whose elements should be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> collection to the current <c>LevelCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements should be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Core.LevelCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>LevelCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <value>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.Level" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>true if the collection is read-only; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>LevelCollection</c> can contain.
            </summary>
    </member>
    <member name="T:log4net.Core.LevelEvaluator">
      <summary>
            An evaluator that triggers at a threshold level
            </summary>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LevelEvaluator.m_threshold">
      <summary>
            The threshold for triggering
            </summary>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.#ctor">
      <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </summary>
      <remarks>
        <para>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </para>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.#ctor(log4net.Core.Level)">
      <summary>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </summary>
      <param name="threshold">the threshold to trigger at</param>
      <remarks>
        <para>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </para>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>This method returns <c>true</c>, if the event level
            is equal or higher than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />. 
            Otherwise it returns <c>false</c></returns>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelEvaluator.Threshold">
      <summary>
            the threshold to trigger at
            </summary>
      <value>
            The <see cref="T:log4net.Core.Level" /> that will cause this evaluator to trigger
            </value>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LevelMap">
      <summary>
            Mapping between string name and Level object
            </summary>
      <remarks>
        <para>
            Mapping between string name and <see cref="T:log4net.Core.Level" /> object.
            This mapping is held separately for each <see cref="T:log4net.Repository.ILoggerRepository" />.
            The level name is case insensitive.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LevelMap.m_mapName2Level">
      <summary>
            Mapping from level name to Level object. The
            level name is case insensitive
            </summary>
    </member>
    <member name="M:log4net.Core.LevelMap.#ctor">
      <summary>
            Construct the level map
            </summary>
      <remarks>
        <para>
            Construct the level map.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Clear">
      <summary>
            Clear the internal maps of all levels
            </summary>
      <remarks>
        <para>
            Clear the internal maps of all levels
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32)">
      <summary>
            Create a new Level and add it to the map
            </summary>
      <param name="name">the string to display for the Level</param>
      <param name="value">the level value to give to the Level</param>
      <remarks>
        <para>
            Create a new Level and add it to the map
            </para>
      </remarks>
      <seealso cref="M:Add(string,int,string)" />
    </member>
    <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32,System.String)">
      <summary>
            Create a new Level and add it to the map
            </summary>
      <param name="name">the string to display for the Level</param>
      <param name="value">the level value to give to the Level</param>
      <param name="displayName">the display name to give to the Level</param>
      <remarks>
        <para>
            Create a new Level and add it to the map
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Add(log4net.Core.Level)">
      <summary>
            Add a Level to the map
            </summary>
      <param name="level">the Level to add</param>
      <remarks>
        <para>
            Add a Level to the map
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.LookupWithDefault(log4net.Core.Level)">
      <summary>
            Lookup a named level from the map
            </summary>
      <param name="defaultLevel">the name of the level to lookup is taken from this level. 
            If the level is not set on the map then this level is added</param>
      <returns>the level in the map with the name specified</returns>
      <remarks>
        <para>
            Lookup a named level from the map. The name of the level to lookup is taken
            from the <see cref="P:log4net.Core.Level.Name" /> property of the <paramref name="defaultLevel" />
            argument.
            </para>
        <para>
            If no level with the specified name is found then the 
            <paramref name="defaultLevel" /> argument is added to the level map
            and returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelMap.Item(System.String)">
      <summary>
            Lookup a <see cref="T:log4net.Core.Level" /> by name
            </summary>
      <param name="name">The name of the Level to lookup</param>
      <returns>a Level from the map with the name specified</returns>
      <remarks>
        <para>
            Returns the <see cref="T:log4net.Core.Level" /> from the
            map with the name specified. If the no level is
            found then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelMap.AllLevels">
      <summary>
            Return all possible levels as a list of Level objects.
            </summary>
      <returns>all possible levels as a list of Level objects</returns>
      <remarks>
        <para>
            Return all possible levels as a list of Level objects.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LocationInfo">
      <summary>
            The internal representation of caller location information.
            </summary>
      <remarks>
        <para>
            This class uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
        <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
        <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
        <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
        <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LocationInfo.NA">
      <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
    </member>
    <member name="F:log4net.Core.LocationInfo.declaringType">
      <summary>
            The fully qualified type of the LocationInfo class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Core.LocationInfo.#ctor(System.Type)">
      <summary>
            Constructor
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class based on the current thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="className">The fully qualified class name.</param>
      <param name="methodName">The method name.</param>
      <param name="fileName">The file name.</param>
      <param name="lineNumber">The line number of the method within the file.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class with the specified data.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.ClassName">
      <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
      <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
      <remarks>
        <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.FileName">
      <summary>
            Gets the file name of the caller.
            </summary>
      <value>
            The file name of the caller.
            </value>
      <remarks>
        <para>
            Gets the file name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.LineNumber">
      <summary>
            Gets the line number of the caller.
            </summary>
      <value>
            The line number of the caller.
            </value>
      <remarks>
        <para>
            Gets the line number of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.MethodName">
      <summary>
            Gets the method name of the caller.
            </summary>
      <value>
            The method name of the caller.
            </value>
      <remarks>
        <para>
            Gets the method name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.FullInfo">
      <summary>
            Gets all available caller information
            </summary>
      <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></value>
      <remarks>
        <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.StackFrames">
      <summary>
            Gets the stack frames from the stack trace of the caller making the log request
            </summary>
    </member>
    <member name="T:log4net.Core.LoggerManager">
      <summary>
            Static manager that controls the creation of repositories
            </summary>
      <remarks>
        <para>
            Static manager that controls the creation of repositories
            </para>
        <para>
            This class is used by the wrapper managers (e.g. <see cref="T:log4net.LogManager" />)
            to provide access to the <see cref="T:log4net.Core.ILogger" /> objects.
            </para>
        <para>
            This manager also holds the <see cref="T:log4net.Core.IRepositorySelector" /> that is used to
            lookup and create repositories. The selector can be set either programmatically using
            the <see cref="P:log4net.Core.LoggerManager.RepositorySelector" /> property, or by setting the <c>log4net.RepositorySelector</c>
            AppSetting in the applications config file to the fully qualified type name of the
            selector to use. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LoggerManager.declaringType">
      <summary>
            The fully qualified type of the LoggerManager class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggerManager.s_repositorySelector">
      <summary>
            Initialize the default repository selector
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerManager.#ctor">
      <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
      <remarks>
        <para>
            Private constructor to prevent instances. Only static methods should be used.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.RegisterAppDomainEvents">
      <summary>
            Register for ProcessExit and DomainUnload events on the AppDomain
            </summary>
      <remarks>
        <para>
            This needs to be in a separate method because the events make
            a LinkDemand for the ControlAppDomain SecurityPermission. Because
            this is a LinkDemand it is demanded at JIT time. Therefore we cannot
            catch the exception in the method itself, we have to catch it in the
            caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.String)">
      <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repository">the repository to lookup in</param>
      <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetRepository(System.String)">
      <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repository">the repository to lookup in</param>
      <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Exists(System.String,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified repository.
            </returns>
      <remarks>
        <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Exists(System.Reflection.Assembly,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified assembly's repository.
            </returns>
      <remarks>
        <para>
            If the named logger exists (in the specified assembly's repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.String)">
      <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <returns>All the defined loggers.</returns>
      <remarks>
        <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.Reflection.Assembly)">
      <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>All the defined loggers.</returns>
      <remarks>
        <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.Type)">
      <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.Type)">
      <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
      <param name="repositoryAssembly">the assembly to use to lookup the repository</param>
      <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Shutdown">
      <summary>
            Shuts down the log4net system.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.String)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <param name="repository">The repository to shutdown.</param>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the <paramref name="repository" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.Reflection.Assembly)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.String)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <param name="repository">The repository to reset.</param>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.Reflection.Assembly)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetAllRepositories">
      <summary>
            Gets an array of all currently defined repositories.
            </summary>
      <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
      <remarks>
        <para>
            Gets an array of all currently defined repositories.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetVersionInfo">
      <summary>
            Internal method to get pertinent version info.
            </summary>
      <returns>A string of version info.</returns>
    </member>
    <member name="M:log4net.Core.LoggerManager.OnDomainUnload(System.Object,System.EventArgs)">
      <summary>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires
            </summary>
      <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
      <param name="e">null</param>
      <remarks>
        <para>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires.
            </para>
        <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.OnProcessExit(System.Object,System.EventArgs)">
      <summary>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires
            </summary>
      <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
      <param name="e">null</param>
      <remarks>
        <para>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires.
            </para>
        <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerManager.RepositorySelector">
      <summary>
            Gets or sets the repository selector used by the <see cref="T:log4net.LogManager" />.
            </summary>
      <value>
            The repository selector used by the <see cref="T:log4net.LogManager" />.
            </value>
      <remarks>
        <para>
            The repository selector (<see cref="T:log4net.Core.IRepositorySelector" />) is used by 
            the <see cref="T:log4net.LogManager" /> to create and select repositories 
            (<see cref="T:log4net.Repository.ILoggerRepository" />).
            </para>
        <para>
            The caller to <see cref="T:log4net.LogManager" /> supplies either a string name 
            or an assembly (if not supplied the assembly is inferred using 
            <see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
        <para>
            This context is used by the selector to lookup a specific repository.
            </para>
        <para>
            For the full .NET Framework, the default repository is <c>DefaultRepositorySelector</c>;
            for the .NET Compact Framework <c>CompactRepositorySelector</c> is the default
            repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerWrapperImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.ILoggerWrapper" /> interface.
            </summary>
      <remarks>
        <para>
            This class should be used as the base for all wrapper implementations.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LoggerWrapperImpl.m_logger">
      <summary>
            The logger that this object is wrapping
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerWrapperImpl.#ctor(log4net.Core.ILogger)">
      <summary>
            Constructs a new wrapper for the specified logger.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <remarks>
        <para>
            Constructs a new wrapper for the specified logger.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerWrapperImpl.Logger">
      <summary>
            Gets the implementation behind this wrapper object.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ILogger" /> object that this object is implementing.
            </value>
      <remarks>
        <para>
            The <c>Logger</c> object may not be the same object as this object 
            because of logger decorators.
            </para>
        <para>
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggingEventData">
      <summary>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LoggingEventData.LoggerName">
      <summary>
            The logger name.
            </summary>
      <remarks>
        <para>
            The logger name.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Level">
      <summary>
            Level of logging event.
            </summary>
      <remarks>
        <para>
            Level of logging event. Level cannot be Serializable
            because it is a flyweight.  Due to its special serialization it
            cannot be declared final either.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Message">
      <summary>
            The application supplied message.
            </summary>
      <remarks>
        <para>
            The application supplied message of logging event.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.ThreadName">
      <summary>
            The name of thread
            </summary>
      <remarks>
        <para>
            The name of thread in which this logging event was generated
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.TimeStamp">
      <summary>
            The time the event was logged
            </summary>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.LocationInfo">
      <summary>
            Location information for the caller.
            </summary>
      <remarks>
        <para>
            Location information for the caller.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.UserName">
      <summary>
            String representation of the user
            </summary>
      <remarks>
        <para>
            String representation of the user's windows name,
            like DOMAIN\username
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Identity">
      <summary>
            String representation of the identity.
            </summary>
      <remarks>
        <para>
            String representation of the current thread's principal identity.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.ExceptionString">
      <summary>
            The string representation of the exception
            </summary>
      <remarks>
        <para>
            The string representation of the exception
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Domain">
      <summary>
            String representation of the AppDomain.
            </summary>
      <remarks>
        <para>
            String representation of the AppDomain.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Properties">
      <summary>
            Additional event specific properties
            </summary>
      <remarks>
        <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.FixFlags">
      <summary>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </summary>
      <remarks>
        <para>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.FixFlags.Mdc">
      <summary>
            Fix the MDC
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Ndc">
      <summary>
            Fix the NDC
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Message">
      <summary>
            Fix the rendered message
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.ThreadName">
      <summary>
            Fix the thread name
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.LocationInfo">
      <summary>
            Fix the callers location information
            </summary>
      <remarks>
            CAUTION: Very slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.UserName">
      <summary>
            Fix the callers windows user name
            </summary>
      <remarks>
            CAUTION: Slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.Domain">
      <summary>
            Fix the domain friendly name
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Identity">
      <summary>
            Fix the callers principal name
            </summary>
      <remarks>
            CAUTION: May be slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.Exception">
      <summary>
            Fix the exception text
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Properties">
      <summary>
            Fix the event properties. Active properties must implement <see cref="T:log4net.Core.IFixingRequired" /> in order to be eligible for fixing.
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.None">
      <summary>
            No fields fixed
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.All">
      <summary>
            All fields fixed
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Partial">
      <summary>
            Partial fields fixed
            </summary>
      <remarks>
        <para>
            This set of partial fields gives good performance. The following fields are fixed:
            </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Message" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.ThreadName" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Exception" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Domain" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Properties" />
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggingEvent">
      <summary>
            The internal representation of logging events. 
            </summary>
      <remarks>
        <para>
            When an affirmative decision is made to log then a 
            <see cref="T:log4net.Core.LoggingEvent" /> instance is created. This instance 
            is passed around to the different log4net components.
            </para>
        <para>
            This class is of concern to those wishing to extend log4net.
            </para>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="F:log4net.Core.LoggingEvent.HostNameProperty">
      <summary>
            The key into the Properties map for the host name value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.IdentityProperty">
      <summary>
            The key into the Properties map for the thread identity value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.UserNameProperty">
      <summary>
            The key into the Properties map for the user name value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_data">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_compositeProperties">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_eventProperties">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_callerStackBoundaryDeclaringType">
      <summary>
            The fully qualified Type of the calling 
            logger class in the stack frame (i.e. the declaring type of the method).
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_message">
      <summary>
            The application supplied message of logging event.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_thrownException">
      <summary>
            The exception that was thrown.
            </summary>
      <remarks>
            This is not serialized. The string representation
            is serialized instead.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_repository">
      <summary>
            The repository that generated the logging event
            </summary>
      <remarks>
            This is not serialized.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_fixFlags">
      <summary>
            The fix state for this event
            </summary>
      <remarks>
            These flags indicate which fields have been fixed.
            Not serialized.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_cacheUpdatable">
      <summary>
            Indicated that the internal cache is updateable (ie not fixed)
            </summary>
      <remarks>
            This is a seperate flag to m_fixFlags as it allows incrementel fixing and simpler
            changes in the caching strategy.
            </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,System.String,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class
            from the supplied parameters.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="loggerName">The name of the logger of this event.</param>
      <param name="level">The level of this event.</param>
      <param name="message">The message of this event.</param>
      <param name="exception">The exception for this event.</param>
      <remarks>
        <para>
            Except <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />, <see cref="P:log4net.Core.LoggingEvent.Level" /> and <see cref="P:log4net.Core.LoggingEvent.LoggerName" />, 
            all fields of <c>LoggingEvent</c> are filled when actually needed. Call
            <see cref="M:FixVolatileData()" /> to cache all data locally
            to prevent inconsistencies.
            </para>
        <para>This method is called by the log4net framework
            to create a logging event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData,log4net.Core.FixFlags)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="data">Data used to initialize the logging event.</param>
      <param name="fixedData">The fields in the <paranref name="data" /> struct that have already been fixed.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            The <paramref name="fixedData" /> parameter should be used to specify which fields in the
            <paramref name="data" /> struct have been preset. Fields not specified in the <paramref name="fixedData" />
            will be captured from the environment if requested or fixed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="data">Data used to initialize the logging event.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(log4net.Core.LoggingEventData)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="data">Data used to initialize the logging event.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.EnsureRepository(log4net.Repository.ILoggerRepository)">
      <summary>
            Ensure that the repository is set.
            </summary>
      <param name="repository">the value for the repository</param>
    </member>
    <member name="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)">
      <summary>
            Write the rendered message to a TextWriter
            </summary>
      <param name="writer">the writer to write the message to</param>
      <remarks>
        <para>
            Unlike the <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property this method
            does store the message data in the internal cache. Therefore 
            if called only once this method should be faster than the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property, however if the message is
            to be accessed multiple times then the property will be more efficient.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
      <remarks>
        <para>
            The data in this event must be fixed before it can be serialized.
            </para>
        <para>
            The <see cref="M:FixVolatileData()" /> method must be called during the
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method call if this event 
            is to be used outside that method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData">
      <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
      <remarks>
        <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
        <para>
            Does a <see cref="F:log4net.Core.FixFlags.Partial" /> fix of the data
            in the logging event before returning the event data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)">
      <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <param name="fixFlags">The set of data to ensure is fixed in the LoggingEventData</param>
      <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
      <remarks>
        <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetExceptionStrRep">
      <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
      <remarks>
        <para>
          <b>Obsolete. Use <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> instead.</b>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetExceptionString">
      <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
      <remarks>
        <para>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData">
      <summary>
            Fix instance fields that hold volatile data.
            </summary>
      <remarks>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
        <para>
            Calling <see cref="M:FixVolatileData()" /> is equivalent to
            calling <see cref="M:FixVolatileData(bool)" /> passing the parameter
            <c>false</c>.
            </para>
        <para>
            See <see cref="M:FixVolatileData(bool)" /> for more
            information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)">
      <summary>
            Fixes instance fields that hold volatile data.
            </summary>
      <param name="fastButLoose">Set to <c>true</c> to not fix data that takes a long time to fix.</param>
      <remarks>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
        <para>
            The <paramref name="fastButLoose" /> param controls the data that
            is fixed. Some of the data that can be fixed takes a long time to 
            generate, therefore if you do not require those settings to be fixed
            they can be ignored by setting the <paramref name="fastButLoose" /> param
            to <c>true</c>. This setting will ignore the <see cref="P:log4net.Core.LoggingEvent.LocationInformation" />
            and <see cref="P:log4net.Core.LoggingEvent.UserName" /> settings.
            </para>
        <para>
            Set <paramref name="fastButLoose" /> to <c>false</c> to ensure that all 
            settings are fixed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)">
      <summary>
            Fix the fields specified by the <see cref="T:log4net.Core.FixFlags" /> parameter
            </summary>
      <param name="flags">the fields to fix</param>
      <remarks>
        <para>
            Only fields specified in the <paramref name="flags" /> will be fixed.
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.LookupProperty(System.String)">
      <summary>
            Lookup a composite property in this event
            </summary>
      <param name="key">the key for the property to lookup</param>
      <returns>the value for the property</returns>
      <remarks>
        <para>
            This event has composite properties that combine together properties from
            several different contexts in the following order:
            <list type="definition"><item><term>this events properties</term><description>
            		This event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            		properties are specific to this event only.
            		</description></item><item><term>the thread properties</term><description>
            		The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            		thread. These properties are shared by all events logged on this thread.
            		</description></item><item><term>the global properties</term><description>
            		The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            		properties are shared by all the threads in the AppDomain.
            		</description></item></list></para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetProperties">
      <summary>
            Get all the composite properties in this event
            </summary>
      <returns>the <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the properties</returns>
      <remarks>
        <para>
            See <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" /> for details of the composite properties 
            stored by the event.
            </para>
        <para>
            This method returns a single <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the
            properties defined for this event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.StartTime">
      <summary>
            Gets the time when the current process started.
            </summary>
      <value>
            This is the time when this process started.
            </value>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
        <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
        <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Level">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </summary>
      <value>
            The <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </value>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.TimeStamp">
      <summary>
            Gets the time of the logging event.
            </summary>
      <value>
            The time of the logging event.
            </value>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.LoggerName">
      <summary>
            Gets the name of the logger that logged the event.
            </summary>
      <value>
            The name of the logger that logged the event.
            </value>
      <remarks>
        <para>
            Gets the name of the logger that logged the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.LocationInformation">
      <summary>
            Gets the location information for this logging event.
            </summary>
      <value>
            The location information for this logging event.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
        <para>
            See the <see cref="T:log4net.Core.LocationInfo" /> class for more information on
            supported frameworks and the different behavior in Debug and
            Release builds.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.MessageObject">
      <summary>
            Gets the message object used to initialize this event.
            </summary>
      <value>
            The message object used to initialize this event.
            </value>
      <remarks>
        <para>
            Gets the message object used to initialize this event.
            Note that this event may not have a valid message object.
            If the event is serialized the message object will not 
            be transferred. To get the text of the message the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property must be used 
            not this property.
            </para>
        <para>
            If there is no defined message object for this event then
            null will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.ExceptionObject">
      <summary>
            Gets the exception object used to initialize this event.
            </summary>
      <value>
            The exception object used to initialize this event.
            </value>
      <remarks>
        <para>
            Gets the exception object used to initialize this event.
            Note that this event may not have a valid exception object.
            If the event is serialized the exception object will not 
            be transferred. To get the text of the exception the
            <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> method must be used 
            not this property.
            </para>
        <para>
            If there is no defined exception object for this event then
            null will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Repository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.RenderedMessage">
      <summary>
            Gets the message, rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <value>
            The message rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.ThreadName">
      <summary>
            Gets the name of the current thread.  
            </summary>
      <value>
            The name of the current thread, or the thread ID when 
            the name is not available.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.UserName">
      <summary>
            Gets the name of the current user.
            </summary>
      <value>
            The name of the current user, or <c>NOT AVAILABLE</c> when the 
            underlying runtime has no support for retrieving the name of the 
            current user.
            </value>
      <remarks>
        <para>
            Calls <c>WindowsIdentity.GetCurrent().Name</c> to get the name of
            the current windows user.
            </para>
        <para>
            To improve performance, we could cache the string representation of 
            the name, and reuse that as long as the identity stayed constant.  
            Once the identity changed, we would need to re-assign and re-render 
            the string.
            </para>
        <para>
            However, the <c>WindowsIdentity.GetCurrent()</c> call seems to 
            return different objects every time, so the current implementation 
            doesn't do this type of caching.
            </para>
        <para>
            Timing for these operations:
            </para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Results</description>
          </listheader>
          <item>
            <term>
              <c>WindowsIdentity.GetCurrent()</c>
            </term>
            <description>10000 loops, 00:00:00.2031250 seconds</description>
          </item>
          <item>
            <term>
              <c>WindowsIdentity.GetCurrent().Name</c>
            </term>
            <description>10000 loops, 00:00:08.0468750 seconds</description>
          </item>
        </list>
        <para>
            This means we could speed things up almost 40 times by caching the 
            value of the <c>WindowsIdentity.GetCurrent().Name</c> property, since 
            this takes (8.04-0.20) = 7.84375 seconds.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Identity">
      <summary>
            Gets the identity of the current thread principal.
            </summary>
      <value>
            The string name of the identity of the current thread principal.
            </value>
      <remarks>
        <para>
            Calls <c>System.Threading.Thread.CurrentPrincipal.Identity.Name</c> to get
            the name of the current thread principal.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Domain">
      <summary>
            Gets the AppDomain friendly name.
            </summary>
      <value>
            The AppDomain friendly name.
            </value>
      <remarks>
        <para>
            Gets the AppDomain friendly name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Properties">
      <summary>
            Additional event specific properties.
            </summary>
      <value>
            Additional event specific properties.
            </value>
      <remarks>
        <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
        <para>
            This property is for events that have been added directly to
            this event. The aggregate properties (which include these
            event properties) can be retrieved using <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" />
            and <see cref="M:log4net.Core.LoggingEvent.GetProperties" />.
            </para>
        <para>
            Once the properties have been fixed <see cref="P:log4net.Core.LoggingEvent.Fix" /> this property
            returns the combined cached properties. This ensures that updates to
            this property are always reflected in the underlying storage. When
            returning the combined properties there may be more keys in the
            Dictionary than expected.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Fix">
      <summary>
            The fixed fields in this event
            </summary>
      <value>
            The set of fields that are fixed in this event
            </value>
      <remarks>
        <para>
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ILog">
      <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
      <remarks>
        <para>
            Use the <see cref="T:log4net.LogManager" /> to obtain logger instances
            that implement this interface. The <see cref="M:LogManager.GetLogger(Assembly,Type)" />
            static method is used to get logger instances.
            </para>
        <para>
            This class contains methods for logging at different levels and also
            has properties for determining if those logging levels are
            enabled in the current configuration.
            </para>
        <para>
            This interface can be implemented in different ways. This documentation
            specifies reasonable behavior that a caller can expect from the actual
            implementation, however different implementations reserve the right to
            do things differently.
            </para>
      </remarks>
      <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
      <seealso cref="T:log4net.LogManager" />
      <seealso cref="M:LogManager.GetLogger(Assembly, Type)" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ILog.Debug(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Debug" /> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:Debug(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object[])">
      <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.Info(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
      <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Info" /> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:Info(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:Info(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Info(object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Info(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Info(object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Info(object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Info(object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Info(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.Warn(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Warn" /> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:Warn(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:Warn(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Warn(object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Warn(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Warn(object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Warn(object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Warn(object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Warn(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.Error(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
      <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Error" /> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:Error(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Error(object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Error(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.Fatal(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Fatal" /> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:Fatal(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:Fatal(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object,Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="P:log4net.ILog.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Debug" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
        <para> For some ILog interface <c>log</c>, when you write:</para>
        <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
        <para>
            You incur the cost constructing the message, string construction and concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
        <para>
            If you are worried about speed (who isn't), then you should write:
            </para>
        <code lang="C#">
            if (log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <see cref="P:log4net.ILog.IsDebugEnabled" /> and once in
            the <see cref="M:Debug(object)" />.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log. This is the preferred style of logging.
            </para>
        <para>Alternatively if your logger is available statically then the is debug
            enabled state can be stored in a static variable like this:
            </para>
        <code lang="C#">
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
        <para>
            Then when you come to log you can write:
            </para>
        <code lang="C#">
            if (isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimized by the JIT compiler.
            </para>
        <para>
            Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
      <seealso cref="M:DebugFormat(IFormatProvider, string, object[])" />
    </member>
    <member name="P:log4net.ILog.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Info" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:Info(object)" />
      <seealso cref="M:InfoFormat(IFormatProvider, string, object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Warn" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:Warn(object)" />
      <seealso cref="M:WarnFormat(IFormatProvider, string, object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Error" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:Error(object)" />
      <seealso cref="M:ErrorFormat(IFormatProvider, string, object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Fatal" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:Fatal(object)" />
      <seealso cref="M:FatalFormat(IFormatProvider, string, object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="T:log4net.Core.LogImpl">
      <summary>
            Implementation of <see cref="T:log4net.ILog" /> wrapper interface.
            </summary>
      <remarks>
        <para>
            This implementation of the <see cref="T:log4net.ILog" /> interface
            forwards to the <see cref="T:log4net.Core.ILogger" /> held by the base class.
            </para>
        <para>
            This logger has methods to allow the caller to log at the following
            levels:
            </para>
        <list type="definition">
          <item>
            <term>DEBUG</term>
            <description>
                The <see cref="M:Debug(object)" /> and <see cref="M:DebugFormat(string, object[])" /> methods log messages
                at the <c>DEBUG</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Debug" />. The <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>INFO</term>
            <description>
                The <see cref="M:Info(object)" /> and <see cref="M:InfoFormat(string, object[])" /> methods log messages
                at the <c>INFO</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Info" />. The <see cref="P:log4net.Core.LogImpl.IsInfoEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>WARN</term>
            <description>
                The <see cref="M:Warn(object)" /> and <see cref="M:WarnFormat(string, object[])" /> methods log messages
                at the <c>WARN</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Warn" />. The <see cref="P:log4net.Core.LogImpl.IsWarnEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>ERROR</term>
            <description>
                The <see cref="M:Error(object)" /> and <see cref="M:ErrorFormat(string, object[])" /> methods log messages
                at the <c>ERROR</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Error" />. The <see cref="P:log4net.Core.LogImpl.IsErrorEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>FATAL</term>
            <description>
                The <see cref="M:Fatal(object)" /> and <see cref="M:FatalFormat(string, object[])" /> methods log messages
                at the <c>FATAL</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Fatal" />. The <see cref="P:log4net.Core.LogImpl.IsFatalEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
        </list>
        <para>
            The values for these levels and their semantic meanings can be changed by 
            configuring the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> for the repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LogImpl.ThisDeclaringType">
      <summary>
            The fully qualified name of this declaring type not the type of any subclass.
            </summary>
    </member>
    <member name="M:log4net.Core.LogImpl.#ctor(log4net.Core.ILogger)">
      <summary>
            Construct a new wrapper for the specified logger.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <remarks>
        <para>
            Construct a new wrapper for the specified logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ReloadLevels(log4net.Repository.ILoggerRepository)">
      <summary>
            Virtual method called when the configuration of the repository changes
            </summary>
      <param name="repository">the repository holding the levels</param>
      <remarks>
        <para>
            Virtual method called when the configuration of the repository changes
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Debug(System.Object)">
      <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <c>DEBUG</c> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Debug(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>DEBUG</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>DEBUG</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> passed
            as a parameter.
            </para>
        <para>
            See the <see cref="M:Debug(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Debug(object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Info(System.Object)">
      <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <c>INFO</c> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Info(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:Info(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Info(object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Warn(System.Object)">
      <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
      <param name="message">the message object to log</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <c>WARN</c> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Warn(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>WARN</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>WARN</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:Warn(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Warn(object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Error(System.Object)">
      <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <c>ERROR</c> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Error(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>ERROR</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>ERROR</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:Error(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Error(object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Fatal(System.Object)">
      <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <c>FATAL</c> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Fatal(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>FATAL</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>FATAL</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:Fatal(object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:Fatal(object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.LoggerRepositoryConfigurationChanged(System.Object,System.EventArgs)">
      <summary>
            Event handler for the <see cref="E:log4net.Repository.ILoggerRepository.ConfigurationChanged" /> event
            </summary>
      <param name="sender">the repository</param>
      <param name="e">Empty</param>
    </member>
    <member name="P:log4net.Core.LogImpl.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <c>DEBUG</c>
            level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>DEBUG</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
        <para>
            For some <c>log</c> Logger object, when you write:
            </para>
        <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
        <para>
            You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
        <para>
            If you are worried about speed, then you should write:
            </para>
        <code lang="C#">
            if (log.IsDebugEnabled())
            { 
             log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LogImpl.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <c>INFO</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>INFO</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <c>WARN</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>WARN</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <c>ERROR</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>ERROR</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <c>FATAL</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>FATAL</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="T:log4net.Core.MethodItem">
      <summary>
            provides method information without actually referencing a System.Reflection.MethodBase
            as that would require that the containing assembly is loaded.
            </summary>
    </member>
    <member name="F:log4net.Core.MethodItem.NA">
      <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
    </member>
    <member name="F:log4net.Core.MethodItem.declaringType">
      <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Core.MethodItem.#ctor">
      <summary>
            constructs a method item for an unknown method.
            </summary>
    </member>
    <member name="M:log4net.Core.MethodItem.#ctor(System.String)">
      <summary>
            constructs a method item from the name of the method.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:log4net.Core.MethodItem.#ctor(System.String,System.String[])">
      <summary>
            constructs a method item from the name of the method and its parameters.
            </summary>
      <param name="name">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="M:log4net.Core.MethodItem.#ctor(System.Reflection.MethodBase)">
      <summary>
            constructs a method item from a method base by determining the method name and its parameters.
            </summary>
      <param name="methodBase">
      </param>
    </member>
    <member name="P:log4net.Core.MethodItem.Name">
      <summary>
            Gets the method name of the caller making the logging 
            request.
            </summary>
      <value>
            The method name of the caller making the logging 
            request.
            </value>
      <remarks>
        <para>
            Gets the method name of the caller making the logging 
            request.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.MethodItem.Parameters">
      <summary>
            Gets the method parameters of the caller making
            the logging request.
            </summary>
      <value>
            The method parameters of the caller making
            the logging request
            </value>
      <remarks>
        <para>
            Gets the method parameters of the caller making
            the logging request.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.SecurityContext">
      <summary>
            A SecurityContext used by log4net when interacting with protected resources
            </summary>
      <remarks>
        <para>
            A SecurityContext used by log4net when interacting with protected resources
            for example with operating system services. This can be used to impersonate
            a principal that has been granted privileges on the system resources.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.SecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate this SecurityContext
            </summary>
      <param name="state">State supplied by the caller</param>
      <returns>An <see cref="T:System.IDisposable" /> instance that will
            revoke the impersonation of this SecurityContext, or <c>null</c></returns>
      <remarks>
        <para>
            Impersonate this security context. Further calls on the current
            thread should now be made in the security context provided
            by this object. When the <see cref="T:System.IDisposable" /> result 
            <see cref="M:System.IDisposable.Dispose" /> method is called the security
            context of the thread should be reverted to the state it was in
            before <see cref="M:log4net.Core.SecurityContext.Impersonate(System.Object)" /> was called.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.SecurityContextProvider">
      <summary>
            The <see cref="T:log4net.Core.SecurityContextProvider" /> providers default <see cref="T:log4net.Core.SecurityContext" /> instances.
            </summary>
      <remarks>
        <para>
            A configured component that interacts with potentially protected system
            resources uses a <see cref="T:log4net.Core.SecurityContext" /> to provide the elevated
            privileges required. If the <see cref="T:log4net.Core.SecurityContext" /> object has
            been not been explicitly provided to the component then the component
            will request one from this <see cref="T:log4net.Core.SecurityContextProvider" />.
            </para>
        <para>
            By default the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is
            an instance of <see cref="T:log4net.Core.SecurityContextProvider" /> which returns only
            <see cref="T:log4net.Util.NullSecurityContext" /> objects. This is a reasonable default
            where the privileges required are not know by the system.
            </para>
        <para>
            This default behavior can be overridden by subclassing the <see cref="T:log4net.Core.SecurityContextProvider" />
            and overriding the <see cref="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)" /> method to return
            the desired <see cref="T:log4net.Core.SecurityContext" /> objects. The default provider
            can be replaced by programmatically setting the value of the 
            <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> property.
            </para>
        <para>
            An alternative is to use the <c>log4net.Config.SecurityContextProviderAttribute</c>
            This attribute can be applied to an assembly in the same way as the
            <c>log4net.Config.XmlConfiguratorAttribute"</c>. The attribute takes
            the type to use as the <see cref="T:log4net.Core.SecurityContextProvider" /> as an argument.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.SecurityContextProvider.s_defaultProvider">
      <summary>
            The default provider
            </summary>
    </member>
    <member name="M:log4net.Core.SecurityContextProvider.#ctor">
      <summary>
            Protected default constructor to allow subclassing
            </summary>
      <remarks>
        <para>
            Protected default constructor to allow subclassing
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)">
      <summary>
            Create a SecurityContext for a consumer
            </summary>
      <param name="consumer">The consumer requesting the SecurityContext</param>
      <returns>An impersonation context</returns>
      <remarks>
        <para>
            The default implementation is to return a <see cref="T:log4net.Util.NullSecurityContext" />.
            </para>
        <para>
            Subclasses should override this method to provide their own
            behavior.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.SecurityContextProvider.DefaultProvider">
      <summary>
            Gets or sets the default SecurityContextProvider
            </summary>
      <value>
            The default SecurityContextProvider
            </value>
      <remarks>
        <para>
            The default provider is used by configured components that
            require a <see cref="T:log4net.Core.SecurityContext" /> and have not had one
            given to them.
            </para>
        <para>
            By default this is an instance of <see cref="T:log4net.Core.SecurityContextProvider" />
            that returns <see cref="T:log4net.Util.NullSecurityContext" /> objects.
            </para>
        <para>
            The default provider can be set programmatically by setting
            the value of this property to a sub class of <see cref="T:log4net.Core.SecurityContextProvider" />
            that has the desired behavior.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.StackFrameItem">
      <summary>
            provides stack frame information without actually referencing a System.Diagnostics.StackFrame
            as that would require that the containing assembly is loaded.
            </summary>
    </member>
    <member name="F:log4net.Core.StackFrameItem.NA">
      <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
    </member>
    <member name="F:log4net.Core.StackFrameItem.declaringType">
      <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Core.StackFrameItem.#ctor(System.Diagnostics.StackFrame)">
      <summary>
            returns a stack frame item from a stack frame. This 
            </summary>
      <param name="frame">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:log4net.Core.StackFrameItem.ClassName">
      <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
      <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
      <remarks>
        <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.StackFrameItem.FileName">
      <summary>
            Gets the file name of the caller.
            </summary>
      <value>
            The file name of the caller.
            </value>
      <remarks>
        <para>
            Gets the file name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.StackFrameItem.LineNumber">
      <summary>
            Gets the line number of the caller.
            </summary>
      <value>
            The line number of the caller.
            </value>
      <remarks>
        <para>
            Gets the line number of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.StackFrameItem.Method">
      <summary>
            Gets the method name of the caller.
            </summary>
      <value>
            The method name of the caller.
            </value>
      <remarks>
        <para>
            Gets the method name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.StackFrameItem.FullInfo">
      <summary>
            Gets all available caller information
            </summary>
      <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></value>
      <remarks>
        <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></para>
      </remarks>
    </member>
    <member name="T:log4net.Core.TimeEvaluator">
      <summary>
            An evaluator that triggers after specified number of seconds.
            </summary>
      <remarks>
        <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
      </remarks>
      <author>Robert Sevcik</author>
    </member>
    <member name="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL">
      <summary>
            The default time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
    </member>
    <member name="F:log4net.Core.TimeEvaluator.m_interval">
      <summary>
            The time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
    </member>
    <member name="F:log4net.Core.TimeEvaluator.m_lasttime">
      <summary>
            The time of last check. This gets updated when the object is created and when the evaluator triggers.
            </summary>
    </member>
    <member name="M:log4net.Core.TimeEvaluator.#ctor">
      <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL" /> time threshold in seconds.
            </summary>
      <remarks>
        <para>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL" /> time threshold in seconds.
            </para>
        <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.TimeEvaluator.#ctor(System.Int32)">
      <summary>
            Create a new evaluator using the specified time threshold in seconds.
            </summary>
      <param name="interval">
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </param>
      <remarks>
        <para>
            Create a new evaluator using the specified time threshold in seconds.
            </para>
        <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.TimeEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>This method returns <c>true</c>, if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.. 
            Otherwise it returns <c>false</c></returns>
      <remarks>
        <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.TimeEvaluator.Interval">
      <summary>
            The time threshold in seconds to trigger after
            </summary>
      <value>
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </value>
      <remarks>
        <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.WrapperCreationHandler">
      <summary>
            Delegate used to handle creation of new wrappers.
            </summary>
      <param name="logger">The logger to wrap in a wrapper.</param>
      <remarks>
        <para>
            Delegate used to handle creation of new wrappers. This delegate
            is called from the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method to construct the wrapper for the specified logger.
            </para>
        <para>
            The delegate to use is supplied to the <see cref="T:log4net.Core.WrapperMap" />
            constructor.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.WrapperMap">
      <summary>
            Maps between logger objects and wrapper objects.
            </summary>
      <remarks>
        <para>
            This class maintains a mapping between <see cref="T:log4net.Core.ILogger" /> objects and
            <see cref="T:log4net.Core.ILoggerWrapper" /> objects. Use the <see cref="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)" /> method to 
            lookup the <see cref="T:log4net.Core.ILoggerWrapper" /> for the specified <see cref="T:log4net.Core.ILogger" />.
            </para>
        <para>
            New wrapper instances are created by the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method. The default behavior is for this method to delegate construction
            of the wrapper to the <see cref="T:log4net.Core.WrapperCreationHandler" /> delegate supplied
            to the constructor. This allows specialization of the behavior without
            requiring subclassing of this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_repositories">
      <summary>
            Map of logger repositories to hashtables of ILogger to ILoggerWrapper mappings
            </summary>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_createWrapperHandler">
      <summary>
            The handler to use to create the extension wrapper objects.
            </summary>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_shutdownHandler">
      <summary>
            Internal reference to the delegate used to register for repository shutdown events.
            </summary>
    </member>
    <member name="M:log4net.Core.WrapperMap.#ctor(log4net.Core.WrapperCreationHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /></summary>
      <param name="createWrapperHandler">The handler to use to create the wrapper objects.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /> class with 
            the specified handler to create the wrapper objects.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)">
      <summary>
            Gets the wrapper object for the specified logger.
            </summary>
      <returns>The wrapper object for the specified logger</returns>
      <remarks>
        <para>
            If the logger is null then the corresponding wrapper is null.
            </para>
        <para>
            Looks up the wrapper it it has previously been requested and
            returns it. If the wrapper has never been requested before then
            the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" /> virtual method is
            called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)">
      <summary>
            Creates the wrapper object for the specified logger.
            </summary>
      <param name="logger">The logger to wrap in a wrapper.</param>
      <returns>The wrapper object for the logger.</returns>
      <remarks>
        <para>
            This implementation uses the <see cref="T:log4net.Core.WrapperCreationHandler" />
            passed to the constructor to create the wrapper. This method
            can be overridden in a subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.RepositoryShutdown(log4net.Repository.ILoggerRepository)">
      <summary>
            Called when a monitored repository shutdown event is received.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down</param>
      <remarks>
        <para>
            This method is called when a <see cref="T:log4net.Repository.ILoggerRepository" /> that this
            <see cref="T:log4net.Core.WrapperMap" /> is holding loggers for has signaled its shutdown
            event <see cref="E:log4net.Repository.ILoggerRepository.ShutdownEvent" />. The default
            behavior of this method is to release the references to the loggers
            and their wrappers generated for this repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.ILoggerRepository_Shutdown(System.Object,System.EventArgs)">
      <summary>
            Event handler for repository shutdown event.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The event args.</param>
    </member>
    <member name="P:log4net.Core.WrapperMap.Repositories">
      <summary>
            Gets the map of logger repositories.
            </summary>
      <value>
            Map of logger repositories.
            </value>
      <remarks>
        <para>
            Gets the hashtable that is keyed on <see cref="T:log4net.Repository.ILoggerRepository" />. The
            values are hashtables keyed on <see cref="T:log4net.Core.ILogger" /> with the
            value being the corresponding <see cref="T:log4net.Core.ILoggerWrapper" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.IDateFormatter">
      <summary>
            Render a <see cref="T:System.DateTime" /> as a string.
            </summary>
      <remarks>
        <para>
            Interface to abstract the rendering of a <see cref="T:System.DateTime" />
            instance into a string.
            </para>
        <para>
            The <see cref="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" /> method is used to render the
            date to a text writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Formats the specified date as a string.
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Format the <see cref="T:System.DateTime" /> as a string and write it
            to the <see cref="T:System.IO.TextWriter" /> provided.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
      <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"HH:mm:ss,fff"</c>.
            </summary>
      <remarks>
        <para>
            Formats a <see cref="T:System.DateTime" /> in the format <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.AbsoluteTimeDateFormat">
      <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DateAndTimeDateFormat">
      <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.Iso8601TimeDateFormat">
      <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeToTheSecond">
      <summary>
            Last stored time with precision up to the second.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeBuf">
      <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeStrings">
      <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
    </member>
    <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Renders the date into a string. Format is <c>"HH:mm:ss"</c>.
            </summary>
      <param name="dateToFormat">The date to render into a string.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Subclasses should override this method to render the date
            into a string using a precision up to the second. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Renders the date into a string. Format is "HH:mm:ss,fff".
            </summary>
      <param name="dateToFormat">The date to render into a string.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> are
            cached and <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> is called at most once
            per second.
            </para>
        <para>
            Sub classes should override <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" />
            rather than <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
      <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"dd MMM yyyy HH:mm:ss,fff"</c></summary>
      <remarks>
        <para>
            Formats a <see cref="T:System.DateTime" /> in the format 
            <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, 
            <c>"06 Nov 1994 15:49:37,459"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Angelika Schnagl</author>
    </member>
    <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_dateTimeFormatInfo">
      <summary>
            The format info for the invariant culture.
            </summary>
    </member>
    <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
      <summary>
            Default constructor.
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Formats the date without the milliseconds part
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Formats a DateTime in the format <c>"dd MMM yyyy HH:mm:ss"</c>
            for example, <c>"06 Nov 1994 15:49:37"</c>.
            </para>
        <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.Iso8601DateFormatter">
      <summary>
            Formats the <see cref="T:System.DateTime" /> as <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </summary>
      <remarks>
        <para>
            Formats the <see cref="T:System.DateTime" /> specified as a string: <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.DateFormatter.Iso8601DateFormatter.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.Iso8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Formats the date without the milliseconds part
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Formats the date specified as a string: <c>"yyyy-MM-dd HH:mm:ss"</c>.
            </para>
        <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.SimpleDateFormatter">
      <summary>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="M:DateTime.ToString(string, IFormatProvider)" /> method.
            </summary>
      <remarks>
        <para>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string, IFormatProvider)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
      <summary>
            The format string used to format the <see cref="T:System.DateTime" />.
            </summary>
      <remarks>
        <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="format">The format string.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> class 
            with the specified format string.
            </para>
        <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Formats the date using <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </summary>
      <param name="dateToFormat">The date to convert to a string.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Uses the date format string supplied to the constructor to call
            the <see cref="M:DateTime.ToString(string, IFormatProvider)" /> method to format the date.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.IFilter">
      <summary>
            Implement this interface to provide customized logging event filtering
            </summary>
      <remarks>
        <para>
            Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
        <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
        <para>
            The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
        <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
      <param name="loggingEvent">The LoggingEvent to decide upon</param>
      <returns>The decision of the filter</returns>
      <remarks>
        <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.IFilter.Next">
      <summary>
            Property to get and set the next filter
            </summary>
      <value>
            The next filter in the chain
            </value>
      <remarks>
        <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.FilterSkeleton">
      <summary>
            Subclass this type to implement customized logging event filtering
            </summary>
      <remarks>
        <para>
            Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
        <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
        <para>
            The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
        <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.FilterSkeleton.m_next">
      <summary>
            Points to the next filter in the filter chain.
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Filter.FilterSkeleton.Next" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
      <summary>
            Initialize the filter with the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> must be called again.
            </para>
        <para>
            Typically filter's options become active immediately on set, 
            however this method must still be called. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Decide if the <see cref="T:log4net.Core.LoggingEvent" /> should be logged through an appender.
            </summary>
      <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> to decide upon</param>
      <returns>The decision of the filter</returns>
      <remarks>
        <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
        <para>
            This method is marked <c>abstract</c> and must be implemented
            in a subclass.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.FilterSkeleton.Next">
      <summary>
            Property to get and set the next filter
            </summary>
      <value>
            The next filter in the chain
            </value>
      <remarks>
        <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.DenyAllFilter">
      <summary>
            This filter drops all <see cref="T:log4net.Core.LoggingEvent" />. 
            </summary>
      <remarks>
        <para>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behavior to a "deny all unless instructed otherwise"
            behavior.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.DenyAllFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterDecision.Deny" /></summary>
      <param name="loggingEvent">the LoggingEvent to filter</param>
      <returns>Always returns <see cref="F:log4net.Filter.FilterDecision.Deny" /></returns>
      <remarks>
        <para>
            Ignores the event being logged and just returns
            <see cref="F:log4net.Filter.FilterDecision.Deny" />. This can be used to change the default filter
            chain behavior from <see cref="F:log4net.Filter.FilterDecision.Accept" /> to <see cref="F:log4net.Filter.FilterDecision.Deny" />. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.FilterDecision">
      <summary>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></summary>
      <remarks>
        <para>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></para>
      </remarks>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Deny">
      <summary>
            The log event must be dropped immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Neutral">
      <summary>
            This filter is neutral with respect to the log event. 
            The remaining filters, if any, should be consulted for a final decision.
            </summary>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Accept">
      <summary>
            The log event must be logged immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
    </member>
    <member name="T:log4net.Filter.LevelMatchFilter">
      <summary>
            This is a very simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
      <remarks>
        <para>
            The filter admits two options <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> and
            <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If there is an exact match between the value
            of the <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> option and the <see cref="T:log4net.Core.Level" /> of the 
            <see cref="T:log4net.Core.LoggingEvent" />, then the <see cref="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.LevelMatchFilter.m_acceptOnMatch">
      <summary>
            flag to indicate if the filter should <see cref="F:log4net.Filter.FilterDecision.Accept" /> on a match
            </summary>
    </member>
    <member name="F:log4net.Filter.LevelMatchFilter.m_levelToMatch">
      <summary>
            the <see cref="T:log4net.Core.Level" /> to match against
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Tests if the <see cref="T:log4net.Core.Level" /> of the logging event matches that of the filter
            </summary>
      <param name="loggingEvent">the event to filter</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            If the <see cref="T:log4net.Core.Level" /> of the event matches the level of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If it is true then
            the function will return <see cref="F:log4net.Filter.FilterDecision.Accept" />, it it is false then it
            will return <see cref="F:log4net.Filter.FilterDecision.Deny" />. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelMatchFilter.LevelToMatch">
      <summary>
            The <see cref="T:log4net.Core.Level" /> that the filter will match
            </summary>
      <remarks>
        <para>
            The level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.LevelRangeFilter">
      <summary>
            This is a simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
      <remarks>
        <para>
            The filter admits three options <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" />
            that determine the range of priorities that are matched, and
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />. If there is a match between the range
            of priorities and the <see cref="T:log4net.Core.Level" /> of the <see cref="T:log4net.Core.LoggingEvent" />, then the 
            <see cref="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in case the <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> 
            option value is set to <c>true</c>, if it is <c>false</c>
            then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If there is no match, <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when matching a <see cref="T:log4net.Core.Level" /></summary>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_levelMin">
      <summary>
            the minimum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_levelMax">
      <summary>
            the maximum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelRangeFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if the event should be logged.
            </summary>
      <param name="loggingEvent">the logging event to check</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            If the <see cref="T:log4net.Core.Level" /> of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterDecision.Deny" />
            is returned. If the <see cref="T:log4net.Core.Level" /> is matched then the value of
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, otherwise
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.LevelMin">
      <summary>
            Set the minimum matched <see cref="T:log4net.Core.Level" /></summary>
      <remarks>
        <para>
            The minimum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.LevelMax">
      <summary>
            Sets the maximum matched <see cref="T:log4net.Core.Level" /></summary>
      <remarks>
        <para>
            The maximum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.LoggerMatchFilter">
      <summary>
            Simple filter to match a string in the event's logger name.
            </summary>
      <remarks>
        <para>
            The works very similar to the <see cref="T:log4net.Filter.LevelMatchFilter" />. It admits two 
            options <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> and <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />. If the 
            <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <see cref="T:log4net.Core.LoggingEvent" /> starts 
            with the value of the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> option, then the 
            <see cref="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> option value is set to <c>true</c>, 
            if it is <c>false</c> then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="F:log4net.Filter.LoggerMatchFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when we have a match
            </summary>
    </member>
    <member name="F:log4net.Filter.LoggerMatchFilter.m_loggerToMatch">
      <summary>
            The logger name string to substring match against the event
            </summary>
    </member>
    <member name="M:log4net.Filter.LoggerMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" />.
            If the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> equals the beginning of 
            the incoming <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> (<see cref="M:String.StartsWith(string)" />)
            then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch">
      <summary>
            The <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> that the filter will match
            </summary>
      <remarks>
        <para>
            This filter will attempt to match this value against logger name in
            the following way. The match will be done against the beginning of the
            logger name (using <see cref="M:String.StartsWith(string)" />). The match is
            case sensitive. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.StringMatchFilter">
      <summary>
            Simple filter to match a string in the rendered message
            </summary>
      <remarks>
        <para>
            Simple filter to match a string in the rendered message
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when we have a match
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
      <summary>
            The string to substring match against the message
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_stringRegexToMatch">
      <summary>
            A string regex to match
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_regexToMatch">
      <summary>
            A regex object to match (generated from m_stringRegexToMatch)
            </summary>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.ActivateOptions">
      <summary>
            Initialize and precompile the Regex if required
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the message then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
      <summary>
            Sets the static string to match
            </summary>
      <remarks>
        <para>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
        <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.RegexToMatch">
      <summary>
            Sets the regular expression to match
            </summary>
      <remarks>
        <para>
            The regular expression pattern that will be matched against
            the rendered message. If the message matches this
            pattern then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
        <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.PropertyFilter">
      <summary>
            Simple filter to match a string an event property
            </summary>
      <remarks>
        <para>
            Simple filter to match a string in the value for a
            specific event property
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Filter.PropertyFilter.m_key">
      <summary>
            The key to use to lookup the string from the event properties
            </summary>
    </member>
    <member name="M:log4net.Filter.PropertyFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.PropertyFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The event property for the <see cref="P:log4net.Filter.PropertyFilter.Key" /> is matched against 
            the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the property value then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.PropertyFilter.Key">
      <summary>
            The key to lookup in the event properties and then match against.
            </summary>
      <remarks>
        <para>
            The key name to use to lookup in the properties map of the
            <see cref="T:log4net.Core.LoggingEvent" />. The match will be performed against 
            the value of this property if it exists.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.MdcFilter">
      <summary>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></summary>
      <remarks>
        <para>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></para>
        <para>
            As the MDC has been replaced with layered properties the
            <see cref="T:log4net.Filter.PropertyFilter" /> should be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Filter.NdcFilter">
      <summary>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></summary>
      <remarks>
        <para>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></para>
        <para>
            As the MDC has been replaced with named stacks stored in the
            properties collections the <see cref="T:log4net.Filter.PropertyFilter" /> should 
            be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.NdcFilter.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Sets the <see cref="P:log4net.Filter.PropertyFilter.Key" /> to <c>"NDC"</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternConverter">
      <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
      <remarks>
        <para>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.PatternConverter.c_renderBufferSize">
      <summary>
            Initial buffer size
            </summary>
    </member>
    <member name="F:log4net.Util.PatternConverter.c_renderBufferMaxCapacity">
      <summary>
            Maximum buffer size before it is recycled
            </summary>
    </member>
    <member name="F:log4net.Util.PatternConverter.m_option">
      <summary>
            The option string to the converter
            </summary>
    </member>
    <member name="M:log4net.Util.PatternConverter.#ctor">
      <summary>
            Protected constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternConverter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Evaluate this pattern converter and write the output to a writer.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
      <remarks>
        <para>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the appropriate way.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.SetNext(log4net.Util.PatternConverter)">
      <summary>
            Set the next pattern converter in the chains
            </summary>
      <param name="patternConverter">the pattern converter that should follow this converter in the chain</param>
      <returns>the next converter</returns>
      <remarks>
        <para>
            The PatternConverter can merge with its neighbor during this method (or a sub class).
            Therefore the return value may or may not be the value of the argument passed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)">
      <summary>
            Write the pattern converter to the writer with appropriate formatting
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
      <remarks>
        <para>
            This method calls <see cref="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)" /> to allow the subclass to perform
            appropriate conversion of the pattern converter. If formatting options have
            been specified via the <see cref="P:log4net.Util.PatternConverter.FormattingInfo" /> then this method will
            apply those formattings before writing the output.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.SpacePad(System.IO.TextWriter,System.Int32)">
      <summary>
            Fast space padding method.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> to which the spaces will be appended.</param>
      <param name="length">The number of spaces to be padded.</param>
      <remarks>
        <para>
            Fast space padding method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionary)">
      <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
      <param name="value">the value to write to the writer</param>
      <remarks>
        <para>
            Writes the <see cref="T:System.Collections.IDictionary" /> to a writer in the form:
            </para>
        <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
        <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionaryEnumerator)">
      <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
      <param name="value">the value to write to the writer</param>
      <remarks>
        <para>
            Writes the <see cref="T:System.Collections.IDictionaryEnumerator" /> to a writer in the form:
            </para>
        <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
        <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.WriteObject(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Object)">
      <summary>
            Write an object to a <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
      <param name="value">the value to write to the writer</param>
      <remarks>
        <para>
            Writes the Object to a writer. If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the object to text, otherwise
            the object's ToString method is called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.Next">
      <summary>
            Get the next pattern converter in the chain
            </summary>
      <value>
            the next pattern converter in the chain
            </value>
      <remarks>
        <para>
            Get the next pattern converter in the chain
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.FormattingInfo">
      <summary>
            Gets or sets the formatting info for this converter
            </summary>
      <value>
            The formatting info for this converter
            </value>
      <remarks>
        <para>
            Gets or sets the formatting info for this converter
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.Option">
      <summary>
            Gets or sets the option value for this converter
            </summary>
      <summary>
            The option for this converter
            </summary>
      <remarks>
        <para>
            Gets or sets the option value for this converter
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.Properties">
      <summary>
      </summary>
    </member>
    <member name="T:log4net.Layout.Pattern.PatternLayoutConverter">
      <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
      <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.PatternLayoutConverter.m_ignoresException">
      <summary>
            Flag indicating if this converter handles exceptions
            </summary>
      <remarks>
        <c>false</c> if this converter handles exceptions
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Layout.Pattern.PatternLayoutConverter" /> class.
            </summary>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
    </member>
    <member name="P:log4net.Layout.Pattern.PatternLayoutConverter.IgnoresException">
      <summary>
            Flag indicating if this converter handles the logging event exception
            </summary>
      <value>
        <c>false</c> if this converter handles the logging event exception</value>
      <remarks>
        <para>
            If this converter handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then this property should be set to
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the property should be set to <c>true</c>.
            </para>
        <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this converter does not handle the exception.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.AppDomainPatternConverter">
      <summary>
            Write the event appdomain name to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output writer.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.AppDomainPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event appdomain name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.DatePatternConverter">
      <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <remarks>
        <para>
            Render the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the writer as a string.
            </para>
        <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,yyyy"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Layout.Pattern.UtcDatePatternConverter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.DatePatternConverter.m_dateFormatter">
      <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.Pattern.DatePatternConverter.declaringType">
      <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter pattern based on the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.DatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern into the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.ExceptionPatternConverter">
      <summary>
            Write the exception text to the output
            </summary>
      <remarks>
        <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
        <para>
            If there is no exception then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the exception text to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
        <para>
            If there is no exception or the exception property specified
            by the Option value does not exist then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
        <para>
            Recognized values for the Option parameter are:
            </para>
        <list type="bullet">
          <item>
            <description>Message</description>
          </item>
          <item>
            <description>Source</description>
          </item>
          <item>
            <description>StackTrace</description>
          </item>
          <item>
            <description>TargetSite</description>
          </item>
          <item>
            <description>HelpLink</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.FileLocationPatternConverter">
      <summary>
            Writes the caller location file name to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the event to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.FileLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location file name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.FullLocationPatternConverter">
      <summary>
            Write the caller location info to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.FullLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location info to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.IdentityPatternConverter">
      <summary>
            Writes the event identity to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output writer.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.IdentityPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Writes the event identity to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LevelPatternConverter">
      <summary>
            Write the event level to the output
            </summary>
      <remarks>
        <para>
            Writes the display name of the event <see cref="P:log4net.Core.LoggingEvent.Level" />
            to the writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LevelPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event level to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.Level.DisplayName" /> of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Level" />
            to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LineLocationPatternConverter">
      <summary>
            Write the caller location line number to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the event to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LineLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location line number to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.NamedPatternConverter">
      <summary>
            Converter to output and truncate <c>'.'</c> separated strings
            </summary>
      <remarks>
        <para>
            This abstract class supports truncating a <c>'.'</c> separated string
            to show a specified number of elements from the right hand side.
            This is used to truncate class names that are fully qualified.
            </para>
        <para>
            Subclasses should override the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> method to
            return the fully qualified string.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.NamedPatternConverter.declaringType">
      <summary>
            The fully qualified type of the NamedPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions">
      <summary>
            Initialize the converter 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Get the fully qualified string data
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>the fully qualified name</returns>
      <remarks>
        <para>
            Overridden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </para>
        <para>
            Return the fully qualified <c>'.'</c> (dot/period) separated string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern to the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
            Render the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> to the precision
            specified by the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LoggerPatternConverter">
      <summary>
            Converter for logger name
            </summary>
      <remarks>
        <para>
            Outputs the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LoggerPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Gets the fully qualified name of the logger
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>The fully qualified logger name</returns>
      <remarks>
        <para>
            Returns the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <paramref name="loggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.MessagePatternConverter">
      <summary>
            Writes the event message to the output
            </summary>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.MessagePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Writes the event message to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.MethodLocationPatternConverter">
      <summary>
            Write the method name to the output
            </summary>
      <remarks>
        <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.MethodLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the method name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.NdcPatternConverter">
      <summary>
            Converter to include event NDC
            </summary>
      <remarks>
        <para>
            Outputs the value of the event property named <c>NDC</c>.
            </para>
        <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.NdcPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event NDC to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            As the thread context stacks are now stored in named event properties
            this converter simply looks up the value of the <c>NDC</c> property.
            </para>
        <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.PropertyPatternConverter">
      <summary>
            Property pattern converter
            </summary>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.PropertyPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the property value to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.RelativeTimePatternConverter">
      <summary>
            Converter to output the relative time of the event
            </summary>
      <remarks>
        <para>
            Converter to output the time of the event relative to the start of the program.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the relative time to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes out the relative time of the event in milliseconds.
            That is the number of milliseconds between the event <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />
            and the <see cref="P:log4net.Core.LoggingEvent.StartTime" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
      <summary>
            Helper method to get the time difference between two DateTime objects
            </summary>
      <param name="start">start time (in the current local time zone)</param>
      <param name="end">end time (in the current local time zone)</param>
      <returns>the time difference in milliseconds</returns>
    </member>
    <member name="T:log4net.Layout.Pattern.StackTracePatternConverter">
      <summary>
            Write the caller stack frames to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer, using format:
            type3.MethodCall3 &gt; type2.MethodCall2 &gt; type1.MethodCall1
            </para>
      </remarks>
      <author>Michael Cromwell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.StackTracePatternConverter.declaringType">
      <summary>
            The fully qualified type of the StackTracePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the strack frames to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.GetMethodInformation(log4net.Core.MethodItem)">
      <summary>
            Returns the Name of the method
            </summary>
      <param name="method">
      </param>
      <remarks>This method was created, so this class could be used as a base class for StackTraceDetailPatternConverter</remarks>
      <returns>string</returns>
    </member>
    <member name="T:log4net.Layout.Pattern.StackTraceDetailPatternConverter">
      <summary>
            Write the caller stack frames to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer, using format:
            type3.MethodCall3(type param,...) &gt; type2.MethodCall2(type param,...) &gt; type1.MethodCall1(type param,...)
            </para>
      </remarks>
      <author>Adam Davies</author>
    </member>
    <member name="F:log4net.Layout.Pattern.StackTraceDetailPatternConverter.declaringType">
      <summary>
            The fully qualified type of the StackTraceDetailPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.ThreadPatternConverter">
      <summary>
            Converter to include event thread name
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.ThreadPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the ThreadName to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.TypeNamePatternConverter">
      <summary>
            Pattern converter for the class name
            </summary>
      <remarks>
        <para>
            Outputs the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Gets the fully qualified name of the class
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>The fully qualified type name for the caller location</returns>
      <remarks>
        <para>
            Returns the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the <paramref name="loggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.UserNamePatternConverter">
      <summary>
            Converter to include event user name
            </summary>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.UserNamePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern to the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
    </member>
    <member name="T:log4net.Layout.Pattern.UtcDatePatternConverter">
      <summary>
            Write the TimeStamp to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
        <para>
            Uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> 
            in Universal time.
            </para>
        <para>
            See the <see cref="T:log4net.Layout.Pattern.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
      </remarks>
      <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.UtcDatePatternConverter.declaringType">
      <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.UtcDatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the TimeStamp to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone, this is converted
            to Universal time before it is rendered.
            </para>
      </remarks>
      <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
    </member>
    <member name="T:log4net.Layout.ILayout">
      <summary>
            Interface implemented by layout objects
            </summary>
      <remarks>
        <para>
            An <see cref="T:log4net.Layout.ILayout" /> object is used to format a <see cref="T:log4net.Core.LoggingEvent" />
            as text. The <see cref="M:Format(TextWriter,LoggingEvent)" /> method is called by an
            appender to transform the <see cref="T:log4net.Core.LoggingEvent" /> into a string.
            </para>
        <para>
            The layout can also supply <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            text that is appender before any events and after all the events respectively.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.ILayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">The event to format</param>
      <remarks>
        <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text and output to a writer.
            </para>
        <para>
            If the caller does not have a <see cref="T:System.IO.TextWriter" /> and prefers the
            event to be formatted as a <see cref="T:System.String" /> then the following
            code can be used to format the event into a <see cref="T:System.IO.StringWriter" />.
            </para>
        <code lang="C#">
            StringWriter writer = new StringWriter();
            Layout.Format(writer, loggingEvent);
            string formattedEvent = writer.ToString();
            </code>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.ContentType">
      <summary>
            The content type output by this layout. 
            </summary>
      <value>The content type</value>
      <remarks>
        <para>
            The content type output by this layout.
            </para>
        <para>
            This is a MIME type e.g. <c>"text/plain"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.Header">
      <summary>
            The header for the layout format.
            </summary>
      <value>the layout header</value>
      <remarks>
        <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.Footer">
      <summary>
            The footer for the layout format.
            </summary>
      <value>the layout footer</value>
      <remarks>
        <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.IgnoresException">
      <summary>
            Flag indicating if this layout handle exceptions
            </summary>
      <value>
        <c>false</c> if this layout handles exceptions</value>
      <remarks>
        <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.LayoutSkeleton">
      <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
      <remarks>
        <para>
            This is the base implementation of the <see cref="T:log4net.Layout.ILayout" />
            interface. Most layout objects should extend this class.
            </para>
      </remarks>
      <remarks>
        <note type="inheritinfo">
          <para>
            Subclasses must implement the <see cref="M:Format(TextWriter,LoggingEvent)" />
            method.
            </para>
          <para>
            Subclasses should set the <see cref="P:log4net.Layout.LayoutSkeleton.IgnoresException" /> in their default
            constructor.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_header">
      <summary>
            The header text
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Header" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_footer">
      <summary>
            The footer text
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Footer" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_ignoresException">
      <summary>
            Flag indicating if this layout handles exceptions
            </summary>
      <remarks>
        <para>
          <c>false</c> if this layout handles exceptions
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.#ctor">
      <summary>
            Empty default constructor
            </summary>
      <remarks>
        <para>
            Empty default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
      <summary>
            Activate component options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> must be called again.
            </para>
        <para>
            This method must be implemented by the subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">The event to format</param>
      <remarks>
        <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.Format(log4net.Core.LoggingEvent)">
      <summary>
            Convenience method for easily formatting the logging event into a string variable.
            </summary>
      <param name="loggingEvent">
      </param>
      <remarks>
            Creates a new StringWriter instance to store the formatted logging event.
            </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
      <summary>
            The content type output by this layout. 
            </summary>
      <value>The content type is <c>"text/plain"</c></value>
      <remarks>
        <para>
            The content type output by this layout.
            </para>
        <para>
            This base class uses the value <c>"text/plain"</c>.
            To change this value a subclass must override this
            property.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.Header">
      <summary>
            The header for the layout format.
            </summary>
      <value>the layout header</value>
      <remarks>
        <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.Footer">
      <summary>
            The footer for the layout format.
            </summary>
      <value>the layout footer</value>
      <remarks>
        <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
      <summary>
            Flag indicating if this layout handles exceptions
            </summary>
      <value>
        <c>false</c> if this layout handles exceptions</value>
      <remarks>
        <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
        <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this layout does not handle the exception.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.PatternLayout">
      <summary>
            A flexible layout configurable with pattern string.
            </summary>
      <remarks>
        <para>
            The goal of this class is to <see cref="M:PatternLayout.Format(TextWriter,LoggingEvent)" /> a 
            <see cref="T:log4net.Core.LoggingEvent" /> as a string. The results
            depend on the <i>conversion pattern</i>.
            </para>
        <para>
            The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.
            </para>
        <para>
          <i>You are free to insert any literal text within the conversion
            pattern.</i>
        </para>
        <para>
            Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            pattern name</i>. The conversion pattern name specifies the type of
            data, e.g. logger, level, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.
            </para>
        <para>
            Let the conversion pattern be <b>"%-5level [%thread]: %message%newline"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements
            </para>
        <code lang="C#">
            ILog log = LogManager.GetLogger(typeof(TestApp));
            log.Debug("Message 1");
            log.Warn("Message 2");   
            </code>
        <para>would yield the output</para>
        <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
        <para>
            Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5level</b> means the level of the logging event should be left
            justified to a width of five characters.
            </para>
        <para>
            The recognized conversion pattern names are:
            </para>
        <list type="table">
          <listheader>
            <term>Conversion Pattern Name</term>
            <description>Effect</description>
          </listheader>
          <item>
            <term>a</term>
            <description>Equivalent to <b>appdomain</b></description>
          </item>
          <item>
            <term>appdomain</term>
            <description>
            			Used to output the friendly name of the AppDomain where the 
            			logging event was generated. 
                    </description>
          </item>
          <item>
            <term>aspnet-cache</term>
            <description>
              <para>
                        Used to output all cache items in the case of <b>%aspnet-cache</b> or just one named item if used as <b>%aspnet-cache{key}</b></para>
              <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>aspnet-context</term>
            <description>
              <para>
                        Used to output all context items in the case of <b>%aspnet-context</b> or just one named item if used as <b>%aspnet-context{key}</b></para>
              <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>aspnet-request</term>
            <description>
              <para>
                        Used to output all request parameters in the case of <b>%aspnet-request</b> or just one named param if used as <b>%aspnet-request{key}</b></para>
              <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>aspnet-session</term>
            <description>
              <para>
                        Used to output all session items in the case of <b>%aspnet-session</b> or just one named item if used as <b>%aspnet-session{key}</b></para>
              <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>c</term>
            <description>Equivalent to <b>logger</b></description>
          </item>
          <item>
            <term>C</term>
            <description>Equivalent to <b>type</b></description>
          </item>
          <item>
            <term>class</term>
            <description>Equivalent to <b>type</b></description>
          </item>
          <item>
            <term>d</term>
            <description>Equivalent to <b>date</b></description>
          </item>
          <item>
            <term>date</term>
            <description>
              <para>
            			Used to output the date of the logging event in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>exception</term>
            <description>
              <para>
            			Used to output the exception passed in with the log message.
            			</para>
              <para>
            			If an exception object is stored in the logging event
            			it will be rendered into the pattern output with a
            			trailing newline.
            			If there is no exception then nothing will be output
            			and no trailing newline will be appended.
            			It is typical to put a newline before the exception
            			and to have the exception as the last data in the pattern.
            			</para>
            </description>
          </item>
          <item>
            <term>F</term>
            <description>Equivalent to <b>file</b></description>
          </item>
          <item>
            <term>file</term>
            <description>
              <para>
            			Used to output the file name where the logging request was
            			issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>identity</term>
            <description>
              <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
              <para>
                <b>WARNING</b> Generating caller information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            </description>
          </item>
          <item>
            <term>l</term>
            <description>Equivalent to <b>location</b></description>
          </item>
          <item>
            <term>L</term>
            <description>Equivalent to <b>line</b></description>
          </item>
          <item>
            <term>location</term>
            <description>
              <para>
            			Used to output location information of the caller which generated
            			the logging event.
            			</para>
              <para>
            			The location information depends on the CLI implementation but
            			usually consists of the fully qualified name of the calling
            			method followed by the callers source the file name and line
            			number between parentheses.
            			</para>
              <para>
            			The location information can be very useful. However, its
            			generation is <b>extremely</b> slow. Its use should be avoided
            			unless execution speed is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>level</term>
            <description>
              <para>
            			Used to output the level of the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>line</term>
            <description>
              <para>
            			Used to output the line number from where the logging request
            			was issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>logger</term>
            <description>
              <para>
            			Used to output the logger of the logging event. The
            			logger conversion specifier can be optionally followed by
            			<i>precision specifier</i>, that is a decimal constant in
            			brackets.
                        </para>
              <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the logger name will be
            			printed. By default the logger name is printed in full.
            			</para>
              <para>
            			For example, for the logger name "a.b.c" the pattern
            			<b>%logger{2}</b> will output "b.c".
            			</para>
            </description>
          </item>
          <item>
            <term>m</term>
            <description>Equivalent to <b>message</b></description>
          </item>
          <item>
            <term>M</term>
            <description>Equivalent to <b>method</b></description>
          </item>
          <item>
            <term>message</term>
            <description>
              <para>
            			Used to output the application supplied message associated with 
            			the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>mdc</term>
            <description>
              <para>
            			The MDC (old name for the ThreadContext.Properties) is now part of the
            			combined event properties. This pattern is supported for compatibility
            			but is equivalent to <b>property</b>.
            			</para>
            </description>
          </item>
          <item>
            <term>method</term>
            <description>
              <para>
            			Used to output the method name where the logging request was
            			issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>n</term>
            <description>Equivalent to <b>newline</b></description>
          </item>
          <item>
            <term>newline</term>
            <description>
              <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
              <para>
            			This conversion pattern offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
            </description>
          </item>
          <item>
            <term>ndc</term>
            <description>
              <para>
            			Used to output the NDC (nested diagnostic context) associated
            			with the thread that generated the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>p</term>
            <description>Equivalent to <b>level</b></description>
          </item>
          <item>
            <term>P</term>
            <description>Equivalent to <b>property</b></description>
          </item>
          <item>
            <term>properties</term>
            <description>Equivalent to <b>property</b></description>
          </item>
          <item>
            <term>property</term>
            <description>
              <para>
            			Used to output the an event specific property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are added to events by loggers or appenders. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
              <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
              <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
              <list type="definition">
                <item>
                  <term>the event properties</term>
                  <description>
            					The event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            					properties are specific to this event only.
            					</description>
                </item>
                <item>
                  <term>the thread properties</term>
                  <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                </item>
                <item>
                  <term>the global properties</term>
                  <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>r</term>
            <description>Equivalent to <b>timestamp</b></description>
          </item>
          <item>
            <term>stacktrace</term>
            <description>
              <para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktrace{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
              <para>
            			Output uses the format:
            			type3.MethodCall3 &gt; type2.MethodCall2 &gt; type1.MethodCall1
            			</para>
              <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>stacktracedetail</term>
            <description>
              <para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktracedetail{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
              <para>
            			Output uses the format:
                        type3.MethodCall3(type param,...) &gt; type2.MethodCall2(type param,...) &gt; type1.MethodCall1(type param,...)
            			</para>
              <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
            </description>
          </item>
          <item>
            <term>t</term>
            <description>Equivalent to <b>thread</b></description>
          </item>
          <item>
            <term>timestamp</term>
            <description>
              <para>
            			Used to output the number of milliseconds elapsed since the start
            			of the application until the creation of the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>thread</term>
            <description>
              <para>
            			Used to output the name of the thread that generated the
            			logging event. Uses the thread number if no name is available.
            			</para>
            </description>
          </item>
          <item>
            <term>type</term>
            <description>
              <para>
            			Used to output the fully qualified type name of the caller
            			issuing the logging request. This conversion specifier
            			can be optionally followed by <i>precision specifier</i>, that
            			is a decimal constant in brackets.
            			</para>
              <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the class name will be
            			printed. By default the class name is output in fully qualified form.
            			</para>
              <para>
            			For example, for the class name "log4net.Layout.PatternLayout", the
            			pattern <b>%type{1}</b> will output "PatternLayout".
            			</para>
              <para>
                <b>WARNING</b> Generating the caller class information is
            			slow. Thus, its use should be avoided unless execution speed is
            			not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>u</term>
            <description>Equivalent to <b>identity</b></description>
          </item>
          <item>
            <term>username</term>
            <description>
              <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
              <para>
                <b>WARNING</b> Generating caller WindowsIdentity information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            </description>
          </item>
          <item>
            <term>utcdate</term>
            <description>
              <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>w</term>
            <description>Equivalent to <b>username</b></description>
          </item>
          <item>
            <term>x</term>
            <description>Equivalent to <b>ndc</b></description>
          </item>
          <item>
            <term>X</term>
            <description>Equivalent to <b>mdc</b></description>
          </item>
          <item>
            <term>%</term>
            <description>
              <para>
            			The sequence %% outputs a single percent sign.
            			</para>
            </description>
          </item>
        </list>
        <para>
            The single letter patterns are deprecated in favor of the 
            longer more descriptive pattern names.
            </para>
        <para>
            By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.
            </para>
        <para>
            The optional format modifier is placed between the percent sign
            and the conversion pattern name.
            </para>
        <para>
            The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.
            </para>
        <para>
            This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.
            </para>
        <para>
            Below are various format modifier examples for the logger
            conversion specifier.
            </para>
        <div class="tablediv">
          <table class="dtTABLE" cellspacing="0">
            <tr>
              <th>Format modifier</th>
              <th>left justify</th>
              <th>minimum width</th>
              <th>maximum width</th>
              <th>comment</th>
            </tr>
            <tr>
              <td align="center">%20logger</td>
              <td align="center">false</td>
              <td align="center">20</td>
              <td align="center">none</td>
              <td>
                <para>
            				Left pad with spaces if the logger name is less than 20
            				characters long.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%-20logger</td>
              <td align="center">true</td>
              <td align="center">20</td>
              <td align="center">none</td>
              <td>
                <para>
            				Right pad with spaces if the logger 
            				name is less than 20 characters long.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%.30logger</td>
              <td align="center">NA</td>
              <td align="center">none</td>
              <td align="center">30</td>
              <td>
                <para>
            				Truncate from the beginning if the logger 
            				name is longer than 30 characters.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">
                <nobr>%20.30logger</nobr>
              </td>
              <td align="center">false</td>
              <td align="center">20</td>
              <td align="center">30</td>
              <td>
                <para>
            				Left pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%-20.30logger</td>
              <td align="center">true</td>
              <td align="center">20</td>
              <td align="center">30</td>
              <td>
                <para>
            				Right pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
              </td>
            </tr>
          </table>
        </div>
        <para>
          <b>Note about caller location information.</b>
          <br />
            The following patterns <c>%type %file %line %method %location %class %C %F %L %l %M</c> 
            all generate caller location information.
            Location information uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
        <note type="caution">
          <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
        </note>
        <note type="caution">
          <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
          <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
          <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
        </note>
        <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Layout.PatternLayout" />
            instance using the <see cref="M:AddConverter(string, Type)" /> method.
            </para>
      </remarks>
      <example>
            This is a more detailed pattern.
            <code><b>%timestamp [%thread] %level %logger %ndc - %message%newline</b></code></example>
      <example>
            A similar pattern except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the logger
            name is left padded if shorter than 30 characters and truncated if
            longer.
            <code><b>%-6timestamp [%15.15thread] %-5level %30.30logger %ndc - %message%newline</b></code></example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="F:log4net.Layout.PatternLayout.DefaultConversionPattern">
      <summary>
            Default pattern string for log output. 
            </summary>
      <remarks>
        <para>
            Default pattern string for log output. 
            Currently set to the string <b>"%message%newline"</b> 
            which just prints the application supplied message. 
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.DetailConversionPattern">
      <summary>
            A detailed conversion pattern
            </summary>
      <remarks>
        <para>
            A conversion pattern which includes Time, Thread, Logger, and Nested Context.
            Current value is <b>%timestamp [%thread] %level %logger %ndc - %message%newline</b>.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.s_globalRulesRegistry">
      <summary>
            Internal map of converter identifiers to converter types.
            </summary>
      <remarks>
        <para>
            This static map is overridden by the m_converterRegistry instance map
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_pattern">
      <summary>
            the pattern
            </summary>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_head">
      <summary>
            the head of the pattern converter chain
            </summary>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_instanceRulesRegistry">
      <summary>
            patterns defined on this PatternLayout only
            </summary>
    </member>
    <member name="M:log4net.Layout.PatternLayout.#ctor">
      <summary>
            Constructs a PatternLayout using the DefaultConversionPattern
            </summary>
      <remarks>
        <para>
            The default pattern just produces the application supplied message.
            </para>
        <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
        <para>
            As per the <see cref="T:log4net.Core.IOptionHandler" /> contract the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />
            method must be called after the properties on this object have been
            configured.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
      <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
      <param name="pattern">the pattern to use</param>
      <remarks>
        <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
        <para>
            When using this constructor the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method 
            need not be called. This may not be the case when using a subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
      <summary>
            Create the pattern parser instance
            </summary>
      <param name="pattern">the pattern to parse</param>
      <returns>The <see cref="T:log4net.Util.PatternParser" /> that will format the event</returns>
      <remarks>
        <para>
            Creates the <see cref="T:log4net.Util.PatternParser" /> used to parse the conversion string. Sets the
            global and instance rules on the <see cref="T:log4net.Util.PatternParser" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Parse the <see cref="T:log4net.Core.LoggingEvent" /> using the patter format
            specified in the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.AddConverter(log4net.Util.ConverterInfo)">
      <summary>
            Add a converter to this PatternLayout
            </summary>
      <param name="converterInfo">the converter info</param>
      <remarks>
        <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)">
      <summary>
            Add a converter to this PatternLayout
            </summary>
      <param name="name">the name of the conversion pattern for this converter</param>
      <param name="type">the type of the converter</param>
      <remarks>
        <para>
            Add a named pattern converter to this instance. This
            converter will be used in the formatting of the event.
            This method must be called before <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />.
            </para>
        <para>
            The <paramref name="type" /> specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
      <summary>
            The pattern formatting string
            </summary>
      <remarks>
        <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.DynamicPatternLayout">
      <summary>
            A flexible layout configurable with pattern string that re-evaluates on each call.
            </summary>
      <remarks>
        <para>This class is built on <see cref="T:log4net.Layout.PatternLayout"></see> and provides all the
            features and capabilities of PatternLayout.  PatternLayout is a 'static' class
            in that its layout is done once at configuration time.  This class will recreate
            the layout on each reference.</para>
        <para>One important difference between PatternLayout and DynamicPatternLayout is the
            treatment of the Header and Footer parameters in the configuration.  The Header and Footer
            parameters for DynamicPatternLayout must be syntactically in the form of a PatternString,
            but should not be marked as type log4net.Util.PatternString.  Doing so causes the
            pattern to be statically converted at configuration time and causes DynamicPatternLayout
            to perform the same as PatternLayout.</para>
        <para>Please see <see cref="T:log4net.Layout.PatternLayout" /> for complete documentation.</para>
        <example>
            &lt;layout type="log4net.Layout.DynamicPatternLayout"&gt;
              &lt;param name="Header" value="%newline**** Trace Opened     Local: %date{yyyy-MM-dd HH:mm:ss.fff}     UTC: %utcdate{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
              &lt;param name="Footer" value="**** Trace Closed %date{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
            &lt;/layout&gt;
            </example>
      </remarks>
    </member>
    <member name="F:log4net.Layout.DynamicPatternLayout.m_headerPatternString">
      <summary>
            The header PatternString
            </summary>
    </member>
    <member name="F:log4net.Layout.DynamicPatternLayout.m_footerPatternString">
      <summary>
            The footer PatternString
            </summary>
    </member>
    <member name="M:log4net.Layout.DynamicPatternLayout.#ctor">
      <summary>
            Constructs a DynamicPatternLayout using the DefaultConversionPattern
            </summary>
      <remarks>
        <para>
            The default pattern just produces the application supplied message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.DynamicPatternLayout.#ctor(System.String)">
      <summary>
            Constructs a DynamicPatternLayout using the supplied conversion pattern
            </summary>
      <param name="pattern">the pattern to use</param>
      <remarks>
      </remarks>
    </member>
    <member name="P:log4net.Layout.DynamicPatternLayout.Header">
      <summary>
            The header for the layout format.
            </summary>
      <value>the layout header</value>
      <remarks>
        <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
    </member>
    <member name="P:log4net.Layout.DynamicPatternLayout.Footer">
      <summary>
            The footer for the layout format.
            </summary>
      <value>the layout footer</value>
      <remarks>
        <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
    </member>
    <member name="T:log4net.Layout.ExceptionLayout">
      <summary>
            A Layout that renders only the Exception text from the logging event
            </summary>
      <remarks>
        <para>
            A Layout that renders only the Exception text from the logging event.
            </para>
        <para>
            This Layout should only be used with appenders that utilize multiple
            layouts (e.g. <see cref="T:log4net.Appender.AdoNetAppender" />).
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Constructs a ExceptionLayout
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.ActivateOptions">
      <summary>
            Activate component options
            </summary>
      <remarks>
        <para>
            Part of the <see cref="T:log4net.Core.IOptionHandler" /> component activation
            framework.
            </para>
        <para>
            This method does nothing as options become effective immediately.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Gets the exception text from the logging event
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Write the exception string to the <see cref="T:System.IO.TextWriter" />.
            The exception string is retrieved from <see cref="M:LoggingEvent.GetExceptionString()" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.IRawLayout">
      <summary>
            Interface for raw layout objects
            </summary>
      <remarks>
        <para>
            Interface used to format a <see cref="T:log4net.Core.LoggingEvent" />
            to an object.
            </para>
        <para>
            This interface should not be confused with the
            <see cref="T:log4net.Layout.ILayout" /> interface. This interface is used in
            only certain specialized situations where a raw object is
            required rather than a formatted string. The <see cref="T:log4net.Layout.ILayout" />
            is not generally useful than this interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.IRawLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the formatted event</returns>
      <remarks>
        <para>
            Implement this method to create your own layout format.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Layout2RawLayoutAdapter">
      <summary>
            Adapts any <see cref="T:log4net.Layout.ILayout" /> to a <see cref="T:log4net.Layout.IRawLayout" /></summary>
      <remarks>
        <para>
            Where an <see cref="T:log4net.Layout.IRawLayout" /> is required this adapter
            allows a <see cref="T:log4net.Layout.ILayout" /> to be specified.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.Layout2RawLayoutAdapter.m_layout">
      <summary>
            The layout to adapt
            </summary>
    </member>
    <member name="M:log4net.Layout.Layout2RawLayoutAdapter.#ctor(log4net.Layout.ILayout)">
      <summary>
            Construct a new adapter
            </summary>
      <param name="layout">the layout to adapt</param>
      <remarks>
        <para>
            Create the adapter for the specified <paramref name="layout" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Layout2RawLayoutAdapter.Format(log4net.Core.LoggingEvent)">
      <summary>
            Format the logging event as an object.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the formatted event</returns>
      <remarks>
        <para>
            Format the logging event as an object.
            </para>
        <para>
            Uses the <see cref="T:log4net.Layout.ILayout" /> object supplied to 
            the constructor to perform the formatting.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.IConvertFrom">
      <summary>
            Interface supported by type converters
            </summary>
      <remarks>
        <para>
            This interface supports conversion from arbitrary types
            to a single target type. See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertFrom.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Test if the <paramref name="sourceType" /> can be converted to the
            type supported by this converter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(System.Object)">
      <summary>
            Convert the source object to the type supported by this object
            </summary>
      <param name="source">the object to convert</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Converts the <paramref name="source" /> to the type supported
            by this converter.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawLayoutConverter">
      <summary>
            Type converter for the <see cref="T:log4net.Layout.IRawLayout" /> interface
            </summary>
      <remarks>
        <para>
            Used to convert objects to the <see cref="T:log4net.Layout.IRawLayout" /> interface.
            Supports converting from the <see cref="T:log4net.Layout.ILayout" /> interface to
            the <see cref="T:log4net.Layout.IRawLayout" /> interface using the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawLayoutConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the sourceType be converted to an <see cref="T:log4net.Layout.IRawLayout" /></summary>
      <param name="sourceType">the source to be to be converted</param>
      <returns>
        <c>true</c> if the source type can be converted to <see cref="T:log4net.Layout.IRawLayout" /></returns>
      <remarks>
        <para>
            Test if the <paramref name="sourceType" /> can be converted to a
            <see cref="T:log4net.Layout.IRawLayout" />. Only <see cref="T:log4net.Layout.ILayout" /> is supported
            as the <paramref name="sourceType" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.RawLayoutConverter.ConvertFrom(System.Object)">
      <summary>
            Convert the value to a <see cref="T:log4net.Layout.IRawLayout" /> object
            </summary>
      <param name="source">the value to convert</param>
      <returns>the <see cref="T:log4net.Layout.IRawLayout" /> object</returns>
      <remarks>
        <para>
            Convert the <paramref name="source" /> object to a 
            <see cref="T:log4net.Layout.IRawLayout" /> object. If the <paramref name="source" /> object
            is a <see cref="T:log4net.Layout.ILayout" /> then the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />
            is used to adapt between the two interfaces, otherwise an
            exception is thrown.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawPropertyLayout">
      <summary>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.RawPropertyLayout.#ctor">
      <summary>
            Constructs a RawPropertyLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawPropertyLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Lookup the property for <see cref="P:log4net.Layout.RawPropertyLayout.Key" /></summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns property value</returns>
      <remarks>
        <para>
            Looks up and returns the object value of the property
            named <see cref="P:log4net.Layout.RawPropertyLayout.Key" />. If there is no property defined
            with than name then <c>null</c> will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.RawPropertyLayout.Key">
      <summary>
            The name of the value to lookup in the LoggingEvent Properties collection.
            </summary>
      <value>
            Value to lookup in the LoggingEvent Properties collection
            </value>
      <remarks>
        <para>
            String name of the property to lookup in the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawTimeStampLayout">
      <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawTimeStampLayout.#ctor">
      <summary>
            Constructs a RawTimeStampLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawTimeStampLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the time stamp</returns>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
        <para>
            The time stamp is in local time. To format the time stamp
            in universal time use <see cref="T:log4net.Layout.RawUtcTimeStampLayout" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawUtcTimeStampLayout">
      <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawUtcTimeStampLayout.#ctor">
      <summary>
            Constructs a RawUtcTimeStampLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawUtcTimeStampLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the time stamp</returns>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
        <para>
            The time stamp is in universal time. To format the time stamp
            in local time use <see cref="T:log4net.Layout.RawTimeStampLayout" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.SimpleLayout">
      <summary>
            A very simple layout
            </summary>
      <remarks>
        <para>
            SimpleLayout consists of the level of the log statement,
            followed by " - " and then the log message itself. For example,
            <code>
            DEBUG - Hello world
            </code></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.#ctor">
      <summary>
            Constructs a SimpleLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a simple formatted output.
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Formats the event as the level of the even,
            followed by " - " and then the log message itself. The
            output is terminated by a newline.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayoutBase">
      <summary>
            Layout that formats the log events as XML elements.
            </summary>
      <remarks>
        <para>
            This is an abstract class that must be subclassed by an implementation 
            to conform to a specific schema.
            </para>
        <para>
            Deriving classes must implement the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.XmlLayoutBase.m_locationInfo">
      <summary>
            Flag to indicate if location information should be included in
            the XML events.
            </summary>
    </member>
    <member name="F:log4net.Layout.XmlLayoutBase.m_invalidCharReplacement">
      <summary>
            The string to replace invalid chars with
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.#ctor">
      <summary>
            Protected constructor to support subclasses
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Layout.XmlLayoutBase" /> class
            with no location info.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.#ctor(System.Boolean)">
      <summary>
            Protected constructor to support subclasses
            </summary>
      <remarks>
        <para>
            The <paramref name="locationInfo" /> parameter determines whether 
            location information will be output by the layout. If 
            <paramref name="locationInfo" /> is set to <c>true</c>, then the 
            file name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a formatted string.
            </summary>
      <param name="loggingEvent">The event being logged.</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Format the <see cref="T:log4net.Core.LoggingEvent" /> and write it to the <see cref="T:System.IO.TextWriter" />.
            </para>
        <para>
            This method creates an <see cref="T:System.Xml.XmlTextWriter" /> that writes to the
            <paramref name="writer" />. The <see cref="T:System.Xml.XmlTextWriter" /> is passed 
            to the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method. Subclasses should override the
            <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method rather than this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Does the actual writing of the XML.
            </summary>
      <param name="writer">The writer to use to output the event to.</param>
      <param name="loggingEvent">The event to write.</param>
      <remarks>
        <para>
            Subclasses should override this method to format
            the <see cref="T:log4net.Core.LoggingEvent" /> as XML.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.LocationInfo">
      <summary>
            Gets a value indicating whether to include location information in 
            the XML events.
            </summary>
      <value>
        <c>true</c> if location information should be included in the XML 
            events; otherwise, <c>false</c>.
            </value>
      <remarks>
        <para>
            If <see cref="P:log4net.Layout.XmlLayoutBase.LocationInfo" /> is set to <c>true</c>, then the file 
            name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an <c>SMTPAppender</c>
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement">
      <summary>
            The string to replace characters that can not be expressed in XML with.
            <remarks><para>
            Not all characters may be expressed in XML. This property contains the
            string to replace those that can not with. This defaults to a ?. Set it
            to the empty string to simply remove offending characters. For more
            details on the allowed character ranges see http://www.w3.org/TR/REC-xml/#charsets
            Character replacement will occur in  the log message, the property names 
            and the property values.
            </para></remarks></summary>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.ContentType">
      <summary>
            Gets the content type output by this layout. 
            </summary>
      <value>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </value>
      <remarks>
        <para>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayout">
      <summary>
             Layout that formats the log events as XML elements.
             </summary>
      <remarks>
        <para>
             The output of the <see cref="T:log4net.Layout.XmlLayout" /> consists of a series of 
             log4net:event elements. It does not output a complete well-formed XML 
             file. The output is designed to be included as an <em>external entity</em>
             in a separate file to form a correct XML file.
             </para>
        <para>
             For example, if <c>abc</c> is the name of the file where
             the <see cref="T:log4net.Layout.XmlLayout" /> output goes, then a well-formed XML file would 
             be:
             </para>
        <code lang="XML">
             &lt;?xml version="1.0" ?&gt;
             
             &lt;!DOCTYPE log4net:events SYSTEM "log4net-events.dtd" [&lt;!ENTITY data SYSTEM "abc"&gt;]&gt;
            
             &lt;log4net:events version="1.2" xmlns:log4net="http://logging.apache.org/log4net/schemas/log4net-events-1.2&gt;
                 &amp;data;
             &lt;/log4net:events&gt;
             </code>
        <para>
             This approach enforces the independence of the <see cref="T:log4net.Layout.XmlLayout" /> 
             and the appender where it is embedded.
             </para>
        <para>
             The <c>version</c> attribute helps components to correctly
             interpret output generated by <see cref="T:log4net.Layout.XmlLayout" />. The value of 
             this attribute should be "1.2" for release 1.2 and later.
             </para>
        <para>
             Alternatively the <c>Header</c> and <c>Footer</c> properties can be
             configured to output the correct XML header, open tag and close tag.
             When setting the <c>Header</c> and <c>Footer</c> properties it is essential
             that the underlying data store not be appendable otherwise the data
             will become invalid XML.
             </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.XmlLayout.m_prefix">
      <summary>
            The prefix to use for all generated element names
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayout.#ctor">
      <summary>
            Constructs an XmlLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayout.#ctor(System.Boolean)">
      <summary>
            Constructs an XmlLayout.
            </summary>
      <remarks>
        <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SmtpAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> must be called again.
            </para>
        <para>
            Builds a cache of the element names
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayout.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Does the actual writing of the XML.
            </summary>
      <param name="writer">The writer to use to output the event to.</param>
      <param name="loggingEvent">The event to write.</param>
      <remarks>
        <para>
            Override the base class <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method
            to write the <see cref="T:log4net.Core.LoggingEvent" /> to the <see cref="T:System.Xml.XmlWriter" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Prefix">
      <summary>
            The prefix to use for all element names
            </summary>
      <remarks>
        <para>
            The default prefix is <b>log4net</b>. Set this property
            to change the prefix. If the prefix is set to an empty string
            then no prefix will be written.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Base64EncodeMessage">
      <summary>
            Set whether or not to base64 encode the message.
            </summary>
      <remarks>
        <para>
            By default the log message will be written as text to the xml
            output. This can cause problems when the message contains binary
            data. By setting this to true the contents of the message will be
            base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the log message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Base64EncodeProperties">
      <summary>
            Set whether or not to base64 encode the property values.
            </summary>
      <remarks>
        <para>
            By default the properties will be written as text to the xml
            output. This can cause problems when one or more properties contain
            binary data. By setting this to true the values of the properties
            will be base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the property values.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayoutSchemaLog4j">
      <summary>
            Layout that formats the log events as XML elements compatible with the log4j schema
            </summary>
      <remarks>
        <para>
            Formats the log events according to the http://logging.apache.org/log4j schema.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.XmlLayoutSchemaLog4j.s_date1970">
      <summary>
            The 1st of January 1970 in UTC
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor">
      <summary>
            Constructs an XMLLayoutSchemaLog4j
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor(System.Boolean)">
      <summary>
            Constructs an XMLLayoutSchemaLog4j.
            </summary>
      <remarks>
        <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Actually do the writing of the xml
            </summary>
      <param name="writer">the writer to use</param>
      <param name="loggingEvent">the event to write</param>
      <remarks>
        <para>
            Generate XML that is compatible with the log4j schema.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutSchemaLog4j.Version">
      <summary>
            The version of the log4j schema to use.
            </summary>
      <remarks>
        <para>
            Only version 1.2 of the log4j schema is supported.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.IObjectRenderer">
      <summary>
            Implement this interface in order to render objects as strings
            </summary>
      <remarks>
        <para>
            Certain types require special case conversion to
            string form. This conversion is done by an object renderer.
            Object renderers implement the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />
            interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.IObjectRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
      <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="obj">The object to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the object <paramref name="obj" /> to a 
            string.
            </para>
        <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object, TextWriter)" />
            method can be used to render these objects.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.DefaultRenderer">
      <summary>
            The default object Renderer.
            </summary>
      <remarks>
        <para>
            The default renderer supports rendering objects and collections to strings.
            </para>
        <para>
            See the <see cref="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)" /> method for details of the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
      <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="obj">The object to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the object <paramref name="obj" /> to a string.
            </para>
        <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object)" />
            method can be used to render these objects.
            </para>
        <para>
            The default renderer supports rendering objects to strings as follows:
            </para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Rendered String</description>
          </listheader>
          <item>
            <term>
              <c>null</c>
            </term>
            <description>
              <para>"(null)"</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Array" />
            </term>
            <description>
              <para>
            		For a one dimensional array this is the
            		array type name, an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace. 
            		</para>
              <para>
            		For example: <c>int[] {1, 2, 3}</c>.
            		</para>
              <para>
            		If the array is not one dimensional the 
            		<c>Array.ToString()</c> is returned.
            		</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Collections.IEnumerable" />, <see cref="T:System.Collections.ICollection" /> &amp; <see cref="T:System.Collections.IEnumerator" /></term>
            <description>
              <para>
            		Rendered as an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace.
            		</para>
              <para>
            		For example: <c>{a, b, c}</c>.
            		</para>
              <para>
            		All collection classes that implement <see cref="T:System.Collections.ICollection" /> its subclasses, 
            		or generic equivalents all implement the <see cref="T:System.Collections.IEnumerable" /> interface.
            		</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Collections.DictionaryEntry" />
            </term>
            <description>
              <para>
            		Rendered as the key, an equals sign ('='), and the value (using the appropriate
            		renderer). 
            		</para>
              <para>
            		For example: <c>key=value</c>.
            		</para>
            </description>
          </item>
          <item>
            <term>other</term>
            <description>
              <para>
                <c>Object.ToString()</c>
              </para>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderArray(log4net.ObjectRenderer.RendererMap,System.Array,System.IO.TextWriter)">
      <summary>
            Render the array argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="array">the array to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            For a one dimensional array this is the
            array type name, an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>int[] {1, 2, 3}</c>.
            </para>
        <para>
            If the array is not one dimensional the 
            <c>Array.ToString()</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderEnumerator(log4net.ObjectRenderer.RendererMap,System.Collections.IEnumerator,System.IO.TextWriter)">
      <summary>
            Render the enumerator argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="enumerator">the enumerator to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Rendered as an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>{a, b, c}</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderDictionaryEntry(log4net.ObjectRenderer.RendererMap,System.Collections.DictionaryEntry,System.IO.TextWriter)">
      <summary>
            Render the DictionaryEntry argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="entry">the DictionaryEntry to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the key, an equals sign ('='), and the value (using the appropriate
            renderer). For example: <c>key=value</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.RendererMap">
      <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            </summary>
      <remarks>
        <para>
            Maintains a mapping between types that require special
            rendering and the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> that
            is used to render them.
            </para>
        <para>
            The <see cref="M:FindAndRender(object)" /> method is used to render an
            <c>object</c> using the appropriate renderers defined in this map.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
      <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
      <param name="obj">the object to render to a string</param>
      <returns>the object rendered as a string</returns>
      <remarks>
        <para>
            This is a convenience method used to render an object to a string.
            The alternative method <see cref="M:FindAndRender(object,TextWriter)" />
            should be used when streaming output to a <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)">
      <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
      <param name="obj">the object to render to a string</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Find the appropriate renderer for the type of the
            <paramref name="obj" /> parameter. This is accomplished by calling the
            <see cref="M:Get(Type)" /> method. Once a renderer is found, it is
            applied on the object <paramref name="obj" /> and the result is returned
            as a <see cref="T:System.String" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
      <summary>
            Gets the renderer for the specified object type
            </summary>
      <param name="obj">the object to lookup the renderer for</param>
      <returns>the renderer for <paramref name="obj" /></returns>
      <remarks>
        <param>
            Gets the renderer for the specified object type.
            </param>
        <param>
            Syntactic sugar method that calls <see cref="M:Get(Type)" /> 
            with the type of the object parameter.
            </param>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
      <summary>
            Gets the renderer for the specified type
            </summary>
      <param name="type">the type to lookup the renderer for</param>
      <returns>the renderer for the specified type</returns>
      <remarks>
        <para>
            Returns the renderer for the specified type.
            If no specific renderer has been defined the
            <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" /> will be returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.SearchTypeAndInterfaces(System.Type)">
      <summary>
            Internal function to recursively search interfaces
            </summary>
      <param name="type">the type to lookup the renderer for</param>
      <returns>the renderer for the specified type</returns>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
      <summary>
            Clear the map of renderers
            </summary>
      <remarks>
        <para>
            Clear the custom renderers defined by using
            <see cref="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)" />. The <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" />
            cannot be removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
      <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> for <paramref name="typeToRender" />. 
            </summary>
      <param name="typeToRender">the type that will be rendered by <paramref name="renderer" /></param>
      <param name="renderer">the renderer for <paramref name="typeToRender" /></param>
      <remarks>
        <para>
            Register an object renderer for a specific source type.
            This renderer will be returned from a call to <see cref="M:Get(Type)" />
            specifying the same <paramref name="typeToRender" /> as an argument.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
      <summary>
            Get the default renderer instance
            </summary>
      <value>the default renderer</value>
      <remarks>
        <para>
            Get the default renderer
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.IPlugin">
      <summary>
            Interface implemented by logger repository plugins.
            </summary>
      <remarks>
        <para>
            Plugins define additional behavior that can be associated
            with a <see cref="T:log4net.Repository.ILoggerRepository" />.
            The <see cref="T:log4net.Plugin.PluginMap" /> held by the <see cref="P:log4net.Repository.ILoggerRepository.PluginMap" />
            property is used to store the plugins for a repository.
            </para>
        <para>
            The <c>log4net.Config.PluginAttribute</c> can be used to
            attach plugins to repositories created using configuration
            attributes.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.IPlugin.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches the plugin to the specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.IPlugin.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.IPlugin.Name">
      <summary>
            Gets the name of the plugin.
            </summary>
      <value>
            The name of the plugin.
            </value>
      <remarks>
        <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.PluginCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
      <exclude />
    </member>
    <member name="T:log4net.Plugin.PluginCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.#ctor(log4net.Plugin.PluginCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <value>
            The current element in the collection.
            </value>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.ReadOnlyPluginCollection">
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ReadOnly(log4net.Plugin.PluginCollection)">
      <summary>
            Creates a read-only wrapper for a <c>PluginCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            A <c>PluginCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>PluginCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <c>PluginCollection</c>.
            </summary>
      <param name="c">The <c>PluginCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.IPlugin[])">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[])">
      <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[],System.Int32)">
      <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Add(log4net.Plugin.IPlugin)">
      <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the end of the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Clear">
      <summary>
            Removes all elements from the <c>PluginCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Plugin.PluginCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Contains(log4net.Plugin.IPlugin)">
      <summary>
            Determines whether a given <see cref="T:log4net.Plugin.IPlugin" /> is in the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>PluginCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IndexOf(log4net.Plugin.IPlugin)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Plugin.IPlugin" />
            in the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to locate in the <c>PluginCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>PluginCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Insert(System.Int32,log4net.Plugin.IPlugin)">
      <summary>
            Inserts an element into the <c>PluginCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Remove(log4net.Plugin.IPlugin)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Plugin.IPlugin" /> from the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the <c>PluginCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Plugin.IPlugin" /> was not found in the <c>PluginCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>PluginCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>PluginCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Plugin.PluginCollection.Enumerator" /> for the entire <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.PluginCollection)">
      <summary>
            Adds the elements of another <c>PluginCollection</c> to the current <c>PluginCollection</c>.
            </summary>
      <param name="x">The <c>PluginCollection</c> whose elements should be added to the end of the current <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.IPlugin[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> array to the current <c>PluginCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements should be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> collection to the current <c>PluginCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements should be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="i" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>PluginCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
      <value>
            An object that can be used to synchronize access to the collection.
            </value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </summary>
      <value>
            The <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </value>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>
        <c>true</c> if the collection has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>
        <c>true</c> if the collection is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>PluginCollection</c> can contain.
            </summary>
      <value>
            The number of elements the <c>PluginCollection</c> can contain.
            </value>
    </member>
    <member name="T:log4net.Plugin.PluginMap">
      <summary>
            Map of repository plugins.
            </summary>
      <remarks>
        <para>
            This class is a name keyed map of the plugins that are
            attached to a repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.PluginMap.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Constructor
            </summary>
      <param name="repository">The repository that the plugins should be attached to.</param>
      <remarks>
        <para>
            Initialize a new instance of the <see cref="T:log4net.Plugin.PluginMap" /> class with a 
            repository that the plugins should be attached to.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginMap.Add(log4net.Plugin.IPlugin)">
      <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the map.
            </summary>
      <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to add to the map.</param>
      <remarks>
        <para>
            The <see cref="T:log4net.Plugin.IPlugin" /> will be attached to the repository when added.
            </para>
        <para>
            If there already exists a plugin with the same name 
            attached to the repository then the old plugin will
            be <see cref="M:log4net.Plugin.IPlugin.Shutdown" /> and replaced with
            the new plugin.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginMap.Remove(log4net.Plugin.IPlugin)">
      <summary>
            Removes a <see cref="T:log4net.Plugin.IPlugin" /> from the map.
            </summary>
      <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the map.</param>
      <remarks>
        <para>
            Remove a specific plugin from this map.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginMap.Item(System.String)">
      <summary>
            Gets a <see cref="T:log4net.Plugin.IPlugin" /> by name.
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Plugin.IPlugin" /> to lookup.</param>
      <returns>
            The <see cref="T:log4net.Plugin.IPlugin" /> from the map with the name specified, or 
            <c>null</c> if no plugin is found.
            </returns>
      <remarks>
        <para>
            Lookup a plugin by name. If the plugin is not found <c>null</c>
            will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginMap.AllPlugins">
      <summary>
            Gets all possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
      <value>All possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.</value>
      <remarks>
        <para>
            Get a collection of all the plugins defined in this map.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.PluginSkeleton">
      <summary>
            Base implementation of <see cref="T:log4net.Plugin.IPlugin" /></summary>
      <remarks>
        <para>
            Default abstract implementation of the <see cref="T:log4net.Plugin.IPlugin" />
            interface. This base class can be used by implementors
            of the <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Plugin.PluginSkeleton.m_name">
      <summary>
            The name of this plugin.
            </summary>
    </member>
    <member name="F:log4net.Plugin.PluginSkeleton.m_repository">
      <summary>
            The repository this plugin is attached to.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="name">the name of the plugin</param>
      <remarks>
            Initializes a new Plugin with the specified name.
            </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginSkeleton.Name">
      <summary>
            Gets or sets the name of the plugin.
            </summary>
      <value>
            The name of the plugin.
            </value>
      <remarks>
        <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
        <para>
            The name of the plugin must not change one the 
            plugin has been attached to a repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginSkeleton.LoggerRepository">
      <summary>
            The repository for this plugin
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is attached to.
            </value>
      <remarks>
        <para>
            Gets or sets the <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is 
            attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.RemoteLoggingServerPlugin">
      <summary>
            Plugin that listens for events from the <see cref="T:log4net.Appender.RemotingAppender" /></summary>
      <remarks>
        <para>
            This plugin publishes an instance of <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" /> 
            on a specified <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" />. This listens for logging events delivered from
            a remote <see cref="T:log4net.Appender.RemotingAppender" />.
            </para>
        <para>
            When an event is received it is relogged within the attached repository
            as if it had been raised locally.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl">
      <summary>
            Delivers <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
      <remarks>
        <para>
            Internal class used to listen for logging events
            and deliver them to the local repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Constructor
            </summary>
      <param name="repository">The repository to log to.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl" /> for the
            specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.LogEvents(log4net.Core.LoggingEvent[])">
      <summary>
            Logs the events to the repository.
            </summary>
      <param name="events">The events to log.</param>
      <remarks>
        <para>
            The events passed are logged to the <see cref="T:log4net.Repository.ILoggerRepository" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.InitializeLifetimeService">
      <summary>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance.
            </summary>
      <returns>
        <c>null</c> to indicate that this instance should live forever.</returns>
      <remarks>
        <para>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance. This object should live forever
            therefore this implementation returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Plugin.RemoteLoggingServerPlugin.declaringType">
      <summary>
            The fully qualified type of the RemoteLoggingServerPlugin class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class.
            </para>
        <para>
            The <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> property must be set.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor(System.String)">
      <summary>
            Construct with sink Uri.
            </summary>
      <param name="sinkUri">The name to publish the sink under in the remoting infrastructure. 
            See <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> for more details.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class
            with specified name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            When the plugin is shutdown the remote logging
            sink is disconnected.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri">
      <summary>
            Gets or sets the URI of this sink.
            </summary>
      <value>
            The URI of this sink.
            </value>
      <remarks>
        <para>
            This is the name under which the object is marshaled.
            <see cref="M:RemotingServices.Marshal(MarshalByRefObject,String,Type)" /></para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.ILoggerFactory">
      <summary>
            Interface abstracts creation of <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances
            </summary>
      <remarks>
        <para>
            This interface is used by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to 
            create new <see cref="T:log4net.Repository.Hierarchy.Logger" /> objects.
            </para>
        <para>
            The <see cref="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)" /> method is called
            to create a named <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
        <para>
            Implement this interface to create new subclasses of <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
      <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
      <remarks>
        <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
        <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
        <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory">
      <summary>
            Default implementation of <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></summary>
      <remarks>
        <para>
            This default implementation of the <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            interface is used to create the default subclass
            of the <see cref="T:log4net.Repository.Hierarchy.Logger" /> object.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl">
      <summary>
            Default internal subclass of <see cref="T:log4net.Repository.Hierarchy.Logger" /></summary>
      <remarks>
        <para>
            This subclass has no additional behavior over the
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> class but does allow instances
            to be created.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl.#ctor(System.String)">
      <summary>
            Construct a new Logger
            </summary>
      <param name="name">the name of the logger</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl" /> class
            with the specified name. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
      <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
      <remarks>
        <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
        <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
        <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Logger">
      <summary>
            Implementation of <see cref="T:log4net.Core.ILogger" /> used by <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /></summary>
      <remarks>
        <para>
            Internal class used to provide implementation of <see cref="T:log4net.Core.ILogger" />
            interface. Applications should use <see cref="T:log4net.LogManager" /> to get
            logger instances.
            </para>
        <para>
            This is one of the central classes in the log4net implementation. One of the
            distinctive features of log4net are hierarchical loggers and their
            evaluation. The <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> organizes the <see cref="T:log4net.Repository.Hierarchy.Logger" />
            instances into a rooted tree hierarchy.
            </para>
        <para>
            The <see cref="T:log4net.Repository.Hierarchy.Logger" /> class is abstract. Only concrete subclasses of
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> can be created. The <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            is used to create instances of this type for the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.declaringType">
      <summary>
            The fully qualified type of the Logger class.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_name">
      <summary>
            The name of this logger.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_level">
      <summary>
            The assigned level of this logger. 
            </summary>
      <remarks>
        <para>
            The <c>level</c> variable need not be 
            assigned a value in which case it is inherited 
            form the hierarchy.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_parent">
      <summary>
            The parent of this logger.
            </summary>
      <remarks>
        <para>
            The parent of this logger. 
            All loggers have at least one ancestor which is the root logger.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_hierarchy">
      <summary>
            Loggers need to know what Hierarchy they are in.
            </summary>
      <remarks>
        <para>
            Loggers need to know what Hierarchy they are in.
            The hierarchy that this logger is a member of is stored
            here.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderAttachedImpl">
      <summary>
            Helper implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_additive">
      <summary>
            Flag indicating if child loggers inherit their parents appenders
            </summary>
      <remarks>
        <para>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderLock">
      <summary>
            Lock to protect AppenderAttachedImpl variable m_appenderAttachedImpl
            </summary>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.#ctor(System.String)">
      <summary>
            This constructor created a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance and
            sets its name.
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <remarks>
        <para>
            This constructor is protected and designed to be used by
            a subclass that is not abstract.
            </para>
        <para>
            Loggers are constructed by <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> 
            objects. See <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> for the default
            logger creator.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </summary>
      <param name="newAppender">An appender to add to this logger</param>
      <remarks>
        <para>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </para>
        <para>
            If <paramref name="newAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.GetAppender(System.String)">
      <summary>
            Look for the appender named as <c>name</c></summary>
      <param name="name">The name of the appender to lookup</param>
      <returns>The appender with the name specified, or <c>null</c>.</returns>
      <remarks>
        <para>
            Returns the named appender, or null if the appender is not found.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAllAppenders">
      <summary>
            Remove all previously added appenders from this Logger instance.
            </summary>
      <remarks>
        <para>
            Remove all previously added appenders from this Logger instance.
            </para>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
      <param name="appender">The appender to remove</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            Remove the appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(System.String)">
      <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            Remove the named appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This generic form is intended to be used by wrappers.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.LoggingEvent)">
      <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Logs the specified logging event through this logger.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.IsEnabledFor(log4net.Core.Level)">
      <summary>
            Checks if this logger is enabled for a given <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> passed as parameter.
            </summary>
      <param name="level">The level to check.</param>
      <returns>
        <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
      <remarks>
        <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)">
      <summary>
            Deliver the <see cref="T:log4net.Core.LoggingEvent" /> to the attached appenders.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Call the appenders in the hierarchy starting at
            <c>this</c>. If no appenders could be found, emit a
            warning.
            </para>
        <para>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.CloseNestedAppenders">
      <summary>
            Closes all attached appenders implementing the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
      <remarks>
        <para>
            Used to ensure that the appenders are correctly shutdown.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generates a logging event and delivers it to the attached
            appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(log4net.Core.LoggingEvent)">
      <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Delivers the logging event to the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Parent">
      <summary>
            Gets or sets the parent logger in the hierarchy.
            </summary>
      <value>
            The parent logger in the hierarchy.
            </value>
      <remarks>
        <para>
            Part of the Composite pattern that makes the hierarchy.
            The hierarchy is parent linked rather than child linked.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Additivity">
      <summary>
            Gets or sets a value indicating if child loggers inherit their parent's appenders.
            </summary>
      <value>
        <c>true</c> if child loggers inherit their parent's appenders.
            </value>
      <remarks>
        <para>
            Additivity is set to <c>true</c> by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.EffectiveLevel">
      <summary>
            Gets the effective level for this logger.
            </summary>
      <returns>The nearest level in the logger hierarchy.</returns>
      <remarks>
        <para>
            Starting from this logger, searches the logger hierarchy for a
            non-null level and returns it. Otherwise, returns the level of the
            root logger.
            </para>
        <para>The Logger class is designed so that this method executes as
            quickly as possible.</para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Hierarchy">
      <summary>
            Gets or sets the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>The hierarchy that this logger belongs to.</value>
      <remarks>
        <para>
            This logger must be attached to a single <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Level">
      <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />, if any, for this Logger.  
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> of this logger.
            </value>
      <remarks>
        <para>
            The assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> can be <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Appenders">
      <summary>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <returns>A collection of the appenders in this logger</returns>
      <remarks>
        <para>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />. If no appenders 
            can be found, then a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Name">
      <summary>
            Gets the logger name.
            </summary>
      <value>
            The name of the logger.
            </value>
      <remarks>
        <para>
            The name of this logger
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Repository">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventHandler">
      <summary>
            Delegate used to handle logger creation event notifications.
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> in which the <see cref="T:log4net.Repository.Hierarchy.Logger" /> has been created.</param>
      <param name="e">The <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event args that hold the <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance that has been created.</param>
      <remarks>
        <para>
            Delegate used to handle logger creation event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs">
      <summary>
            Provides data for the <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event.
            </summary>
      <remarks>
        <para>
            A <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event is raised every time a
            <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> is created.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.LoggerCreationEventArgs.m_log">
      <summary>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> created
            </summary>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerCreationEventArgs.#ctor(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Constructor
            </summary>
      <param name="log">The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event argument 
            class,with the specified <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger">
      <summary>
            Gets the <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.ILoggerRepository">
      <summary>
            Interface implemented by logger repositories.
            </summary>
      <remarks>
        <para>
            This interface is implemented by logger repositories. e.g. 
            <see cref="N:log4net.Repository.Hierarchy" />.
            </para>
        <para>
            This interface is used by the <see cref="T:log4net.LogManager" />
            to obtain <see cref="T:log4net.ILog" /> interfaces.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Exists(System.String)">
      <summary>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            If the names logger exists it is returned, otherwise
            <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers as an Array.
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetLogger(System.String)">
      <summary>
            Returns a named logger instance
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            Returns a named logger instance.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Shutdown">
      <summary>Shutdown the repository</summary>
      <remarks>
        <para>
            Shutting down a repository will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
        <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
        <para>
            The <see cref="M:Shutdown()" /> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.ResetConfiguration">
      <summary>
            Reset the repositories configuration to a default state
            </summary>
      <remarks>
        <para>
            Reset all values contained in this instance to their
            default state.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the <see cref="T:log4net.Core.LoggingEvent" /> through this repository.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetAppenders">
      <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
      <returns>All the Appenders</returns>
      <remarks>
        <para>
            Returns all the Appenders that are configured as an Array.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Name">
      <summary>
            The name of the repository
            </summary>
      <value>
            The name of the repository
            </value>
      <remarks>
        <para>
            The name of the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.RendererMap">
      <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
      <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
      <remarks>
        <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
        <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.PluginMap">
      <summary>
            The plugin map for this repository.
            </summary>
      <value>
            The plugin map for this repository.
            </value>
      <remarks>
        <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.LevelMap">
      <summary>
            Get the level map for the Repository.
            </summary>
      <remarks>
        <para>
            Get the level map for the Repository.
            </para>
        <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Threshold">
      <summary>
            The threshold for all events in this repository
            </summary>
      <value>
            The threshold for all events in this repository
            </value>
      <remarks>
        <para>
            The threshold for all events in this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Configured">
      <summary>
            Flag indicates if this repository has been configured.
            </summary>
      <value>
            Flag indicates if this repository has been configured.
            </value>
      <remarks>
        <para>
            Flag indicates if this repository has been configured.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.ConfigurationMessages">
      <summary>
            Collection of internal messages captured during the most 
            recent configuration process.
            </summary>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Properties">
      <summary>
            Repository specific properties
            </summary>
      <value>
            Repository specific properties
            </value>
      <remarks>
        <para>
            These properties can be specified on a repository specific basis.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ShutdownEvent">
      <summary>
            Event to notify that the repository has been shutdown.
            </summary>
      <value>
            Event to notify that the repository has been shutdown.
            </value>
      <remarks>
        <para>
            Event raised when the repository has been shutdown.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ConfigurationReset">
      <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
      <value>
            Event to notify that the repository has had its configuration reset.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ConfigurationChanged">
      <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
      <value>
            Event to notify that the repository has had its configuration changed.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been changed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositorySkeleton">
      <summary>
            Base implementation of <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
      <remarks>
        <para>
            Default abstract implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
        <para>
            Skeleton implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            All <see cref="T:log4net.Repository.ILoggerRepository" /> types can extend this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Repository.LoggerRepositorySkeleton.declaringType">
      <summary>
            The fully qualified type of the LoggerRepositorySkeleton class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Initializes the repository with default (empty) properties.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor(log4net.Util.PropertiesDictionary)">
      <summary>
            Construct the repository using specific properties
            </summary>
      <param name="properties">the properties to set for this repository</param>
      <remarks>
        <para>
            Initializes the repository with specified properties.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Exists(System.String)">
      <summary>
            Test if logger exists
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers in the repository
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers in the repository as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetLogger(System.String)">
      <summary>
            Return a new logger instance
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            Return a new logger instance.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Shutdown">
      <summary>
            Shutdown the repository
            </summary>
      <remarks>
        <para>
            Shutdown the repository. Can be overridden in a subclass.
            This base class implementation notifies the <see cref="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent" />
            listeners and all attached plugins of the shutdown event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.ResetConfiguration">
      <summary>
            Reset the repositories configuration to a default state
            </summary>
      <remarks>
        <para>
            Reset all values contained in this instance to their
            default state.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the logEvent through this repository.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetAppenders">
      <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
      <returns>All the Appenders</returns>
      <remarks>
        <para>
            Returns all the Appenders that are configured as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
      <summary>
            Adds an object renderer for a specific class. 
            </summary>
      <param name="typeToRender">The type that will be rendered by the renderer supplied.</param>
      <param name="rendererInstance">The object renderer used to render the object.</param>
      <remarks>
        <para>
            Adds an object renderer for a specific class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnShutdown(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository is shutting down
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository is shutting down.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationReset(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository has had its configuration reset
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository's configuration has been reset.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationChanged(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository has had its configuration changed
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository's configuration has changed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.RaiseConfigurationChanged(System.EventArgs)">
      <summary>
            Raise a configuration changed event on this repository
            </summary>
      <param name="e">EventArgs.Empty</param>
      <remarks>
        <para>
            Applications that programmatically change the configuration of the repository should
            raise this event notification to notify listeners.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Name">
      <summary>
            The name of the repository
            </summary>
      <value>
            The string name of the repository
            </value>
      <remarks>
        <para>
            The name of this repository. The name is
            used to store and lookup the repositories 
            stored by the <see cref="T:log4net.Core.IRepositorySelector" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Threshold">
      <summary>
            The threshold for all events in this repository
            </summary>
      <value>
            The threshold for all events in this repository
            </value>
      <remarks>
        <para>
            The threshold for all events in this repository
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.RendererMap">
      <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
      <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
      <remarks>
        <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
        <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.PluginMap">
      <summary>
            The plugin map for this repository.
            </summary>
      <value>
            The plugin map for this repository.
            </value>
      <remarks>
        <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.LevelMap">
      <summary>
            Get the level map for the Repository.
            </summary>
      <remarks>
        <para>
            Get the level map for the Repository.
            </para>
        <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Configured">
      <summary>
            Flag indicates if this repository has been configured.
            </summary>
      <value>
            Flag indicates if this repository has been configured.
            </value>
      <remarks>
        <para>
            Flag indicates if this repository has been configured.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.ConfigurationMessages">
      <summary>
            Contains a list of internal messages captures during the 
            last configuration.
            </summary>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Properties">
      <summary>
            Repository specific properties
            </summary>
      <value>
            Repository specific properties
            </value>
      <remarks>
            These properties can be specified on a repository specific basis
            </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent">
      <summary>
            Event to notify that the repository has been shutdown.
            </summary>
      <value>
            Event to notify that the repository has been shutdown.
            </value>
      <remarks>
        <para>
            Event raised when the repository has been shutdown.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationReset">
      <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
      <value>
            Event to notify that the repository has had its configuration reset.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationChanged">
      <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
      <value>
            Event to notify that the repository has had its configuration changed.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been changed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.IBasicRepositoryConfigurator">
      <summary>
            Basic Configurator interface for repositories
            </summary>
      <remarks>
        <para>
            Interface used by basic configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />
            with a default <see cref="T:log4net.Appender.IAppender" />.
            </para>
        <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.BasicConfigurator" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)">
      <summary>
            Initialize the repository using the specified appender
            </summary>
      <param name="appender">the appender to use to log all logging events</param>
      <remarks>
        <para>
            Configure the repository to route all logging events to the
            specified appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender[])">
      <summary>
            Initialize the repository using the specified appenders
            </summary>
      <param name="appenders">the appenders to use to log all logging events</param>
      <remarks>
        <para>
            Configure the repository to route all logging events to the
            specified appenders.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.IXmlRepositoryConfigurator">
      <summary>
            Configure repository using XML
            </summary>
      <remarks>
        <para>
            Interface used by Xml configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
        <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.XmlConfigurator" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Initialize the repository using the specified config
            </summary>
      <param name="element">the element containing the root of the config</param>
      <remarks>
        <para>
            The schema for the XML configuration data is defined by
            the implementation.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Hierarchy">
      <summary>
            Hierarchical organization of loggers
            </summary>
      <remarks>
        <para>
          <i>The casual user should not have to deal with this class
            directly.</i>
        </para>
        <para>
            This class is specialized in retrieving loggers by name and
            also maintaining the logger hierarchy. Implements the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
        <para>
            The structure of the logger hierarchy is maintained by the
            <see cref="M:GetLogger(string)" /> method. The hierarchy is such that children
            link to their parent but parents do not have any references to their
            children. Moreover, loggers can be instantiated in any order, in
            particular descendant before ancestor.
            </para>
        <para>
            In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry">
      <summary>
            A class to hold the value, name and display name for a level
            </summary>
      <remarks>
        <para>
            A class to hold the value, name and display name for a level
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.ToString">
      <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
      <returns>string info about this object</returns>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Value">
      <summary>
            Value of the level
            </summary>
      <remarks>
        <para>
            If the value is not set (defaults to -1) the value will be looked
            up for the current level with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Name">
      <summary>
            Name of the level
            </summary>
      <value>
            The name of the level
            </value>
      <remarks>
        <para>
            The name of the level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.DisplayName">
      <summary>
            Display name for the level
            </summary>
      <value>
            The display name of the level
            </value>
      <remarks>
        <para>
            The display name of the level.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Hierarchy.declaringType">
      <summary>
            The fully qualified type of the Hierarchy class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary)">
      <summary>
            Construct with properties
            </summary>
      <param name="properties">The properties to pass to this repository.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Construct with a logger factory
            </summary>
      <param name="loggerFactory">The factory to use to create new logger instances.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary,log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Construct with properties and a logger factory
            </summary>
      <param name="properties">The properties to pass to this repository.</param>
      <param name="loggerFactory">The factory to use to create new logger instances.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Exists(System.String)">
      <summary>
            Test if a logger exists
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            Check if the named logger exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers in the hierarchy as an Array
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers in the hierarchy as an Array.
            The root logger is <b>not</b> included in the returned
            enumeration.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String)">
      <summary>
            Return a new logger instance named as the first parameter using
            the default factory.
            </summary>
      <remarks>
        <para>
            Return a new logger instance named as the first parameter using
            the default factory.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Shutdown">
      <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </summary>
      <remarks>
        <para>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
        <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
        <para>
            The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.ResetConfiguration">
      <summary>
            Reset all values contained in this hierarchy instance to their default.
            </summary>
      <remarks>
        <para>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the logEvent through this hierarchy.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetAppenders">
      <summary>
            Returns all the Appenders that are currently configured
            </summary>
      <returns>An array containing all the currently configured appenders</returns>
      <remarks>
        <para>
            Returns all the <see cref="T:log4net.Appender.IAppender" /> instances that are currently configured.
            All the loggers are searched for appenders. The appenders may also be containers
            for appenders and these are also searched for additional loggers.
            </para>
        <para>
            The list returned is unordered but does not contain duplicates.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppender(System.Collections.ArrayList,log4net.Appender.IAppender)">
      <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" />.
            The appender may also be a container.
            </summary>
      <param name="appenderList">
      </param>
      <param name="appender">
      </param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppenders(System.Collections.ArrayList,log4net.Core.IAppenderAttachable)">
      <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" /> container
            </summary>
      <param name="appenderList">
      </param>
      <param name="container">
      </param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.BasicRepositoryConfigure(log4net.Appender.IAppender[])">
      <summary>
            Initialize the log4net system using the specified appenders
            </summary>
      <param name="appenders">the appenders to use to log all logging events</param>
      <remarks>
        <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.XmlRepositoryConfigure(System.Xml.XmlElement)">
      <summary>
            Initialize the log4net system using the specified config
            </summary>
      <param name="element">the element containing the root of the config</param>
      <remarks>
        <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.IsDisabled(log4net.Core.Level)">
      <summary>
            Test if this hierarchy is disabled for the specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="level">The level to check against.</param>
      <returns>
        <c>true</c> if the repository is disabled for the level argument, <c>false</c> otherwise.
            </returns>
      <remarks>
        <para>
            If this hierarchy has not been configured then this method will
            always return <c>true</c>.
            </para>
        <para>
            This method will return <c>true</c> if this repository is
            disabled for <c>level</c> object passed as parameter and
            <c>false</c> otherwise.
            </para>
        <para>
            See also the <see cref="P:log4net.Repository.ILoggerRepository.Threshold" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Clear">
      <summary>
            Clear all logger definitions from the internal hashtable
            </summary>
      <remarks>
        <para>
            This call will clear all logger definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            logger hierarchy.
            </para>
        <para>
            You should <b>really</b> know what you are doing before
            invoking this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String,log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Return a new logger instance named as the first parameter using
            <paramref name="factory" />.
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <param name="factory">The factory that will make the new logger instance</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated by the
            <paramref name="factory" /> parameter and linked with its existing
            ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.OnLoggerCreationEvent(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Sends a logger creation event to all registered listeners
            </summary>
      <param name="logger">The newly created logger</param>
      <remarks>
            Raises the logger creation event.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateParents(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Updates all the parents of the specified logger
            </summary>
      <param name="log">The logger to update the parents for</param>
      <remarks>
        <para>
            This method loops through all the <i>potential</i> parents of
            <paramref name="log" />. There 3 possible cases:
            </para>
        <list type="number">
          <item>
            <term>No entry for the potential parent of <paramref name="log" /> exists</term>
            <description>
            		We create a ProvisionNode for this potential 
            		parent and insert <paramref name="log" /> in that provision node.
            		</description>
          </item>
          <item>
            <term>The entry is of type Logger for the potential parent.</term>
            <description>
            		The entry is <paramref name="log" />'s nearest existing parent. We 
            		update <paramref name="log" />'s parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.
            		</description>
          </item>
          <item>
            <term>The entry is of type ProvisionNode for this potential parent.</term>
            <description>
            		We add <paramref name="log" /> to the list of children for this 
            		potential parent.
            		</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateChildren(log4net.Repository.Hierarchy.ProvisionNode,log4net.Repository.Hierarchy.Logger)">
      <summary>
            Replace a <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> with a <see cref="T:log4net.Repository.Hierarchy.Logger" /> in the hierarchy.
            </summary>
      <param name="pn">
      </param>
      <param name="log">
      </param>
      <remarks>
        <para>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'log' is a
            reference for the newly created Logger, parent of all the
            children in 'pn'.
            </para>
        <para>
            We loop on all the children 'c' in 'pn'.
            </para>
        <para>
            If the child 'c' has been already linked to a child of
            'log' then there is no need to update 'c'.
            </para>
        <para>
            Otherwise, we set log's parent field to c's parent and set
            c's parent field to log.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddLevel(log4net.Repository.Hierarchy.Hierarchy.LevelEntry)">
      <summary>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
      <param name="levelEntry">the level values</param>
      <remarks>
        <para>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </para>
        <para>
            Supports setting levels via the configuration file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddProperty(log4net.Util.PropertyEntry)">
      <summary>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
      <param name="propertyEntry">the property value</param>
      <remarks>
        <para>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument.
            </para>
        <para>
            Supports setting property values via the configuration file.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.EmittedNoAppenderWarning">
      <summary>
            Has no appender warning been emitted
            </summary>
      <remarks>
        <para>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.Root">
      <summary>
            Get the root of this hierarchy
            </summary>
      <remarks>
        <para>
            Get the root of this hierarchy.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LoggerFactory">
      <summary>
            Gets or sets the default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> instance.
            </summary>
      <value>The default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></value>
      <remarks>
        <para>
            The logger factory is used to create logger instances.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent">
      <summary>
            Event used to notify that a logger has been created.
            </summary>
      <remarks>
        <para>
            Event raised when a logger is created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerKey">
      <summary>
            Used internally to accelerate hash table searches.
            </summary>
      <remarks>
        <para>
            Internal class used to improve performance of 
            string keyed hashtables.
            </para>
        <para>
            The hashcode of the string is cached for reuse.
            The string is stored as an interned value.
            When comparing two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> objects for equality 
            the reference equality of the interned strings is compared.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.#ctor(System.String)">
      <summary>
            Construct key with string name
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> class 
            with the specified name.
            </para>
        <para>
            Stores the hashcode of the string and interns
            the string key to optimize comparisons.
            </para>
        <note>
            The Compact Framework 1.0 the <see cref="M:System.String.Intern(System.String)" />
            method does not work. On the Compact Framework
            the string keys are not interned nor are they
            compared by reference.
            </note>
      </remarks>
      <param name="name">The name of the logger.</param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.GetHashCode">
      <summary>
            Returns a hash code for the current instance.
            </summary>
      <returns>A hash code for the current instance.</returns>
      <remarks>
        <para>
            Returns the cached hashcode.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.Equals(System.Object)">
      <summary>
            Determines whether two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> instances 
            are equal.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares the references of the interned strings.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.ProvisionNode">
      <summary>
            Provision nodes are used where no logger instance has been specified
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> instances are used in the 
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> when there is no specified 
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> for that node.
            </para>
        <para>
            A provision node holds a list of child loggers on behalf of
            a logger that does not exist.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.ProvisionNode.#ctor(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Create a new provision node with child node
            </summary>
      <param name="log">A child logger to add to this node.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> class 
            with the specified child logger.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.RootLogger">
      <summary>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> sits at the root of the logger hierarchy tree. 
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> is a regular <see cref="T:log4net.Repository.Hierarchy.Logger" /> except 
            that it provides several guarantees.
            </para>
        <para>
            First, it cannot be assigned a <c>null</c>
            level. Second, since the root logger cannot have a parent, the
            <see cref="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel" /> property always returns the value of the
            level field without walking the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Repository.Hierarchy.RootLogger.declaringType">
      <summary>
            The fully qualified type of the RootLogger class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.RootLogger.#ctor(log4net.Core.Level)">
      <summary>
            Construct a <see cref="T:log4net.Repository.Hierarchy.RootLogger" /></summary>
      <param name="level">The level to assign to the root logger.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> class with
            the specified logging level.
            </para>
        <para>
            The root logger names itself as "root". However, the root
            logger cannot be retrieved by name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel">
      <summary>
            Gets the assigned level value without walking the logger hierarchy.
            </summary>
      <value>The assigned level value without walking the logger hierarchy.</value>
      <remarks>
        <para>
            Because the root logger cannot have a parent and its level
            must not be <c>null</c> this property just returns the
            value of <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.RootLogger.Level">
      <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> for the root logger.  
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> of the root logger.
            </value>
      <remarks>
        <para>
            Setting the level of the root logger to a <c>null</c> reference
            may have catastrophic results. We prevent this here.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator">
      <summary>
            Initializes the log4net environment using an XML DOM.
            </summary>
      <remarks>
        <para>
            Configures a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> using an XML DOM.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_appenderBag">
      <summary>
            key: appenderName, value: appender.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_hierarchy">
      <summary>
            The Hierarchy being configured.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.declaringType">
      <summary>
            The fully qualified type of the XmlHierarchyConfigurator class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.#ctor(log4net.Repository.Hierarchy.Hierarchy)">
      <summary>
            Construct the configurator for a hierarchy
            </summary>
      <param name="hierarchy">The hierarchy to build.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator" /> class
            with the specified <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </summary>
      <param name="element">The root element to parse.</param>
      <remarks>
        <para>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
      <summary>
            Parse appenders by IDREF.
            </summary>
      <param name="appenderRef">The appender ref element.</param>
      <returns>The instance of the appender that the ref refers to.</returns>
      <remarks>
        <para>
            Parse an XML element that represents an appender and return 
            the appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement)">
      <summary>
            Parses an appender element.
            </summary>
      <param name="appenderElement">The appender element.</param>
      <returns>The appender instance or <c>null</c> when parsing failed.</returns>
      <remarks>
        <para>
            Parse an XML element that represents an appender and return
            the appender instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLogger(System.Xml.XmlElement)">
      <summary>
            Parses a logger element.
            </summary>
      <param name="loggerElement">The logger element.</param>
      <remarks>
        <para>
            Parse an XML element that represents a logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRoot(System.Xml.XmlElement)">
      <summary>
            Parses the root logger element.
            </summary>
      <param name="rootElement">The root element.</param>
      <remarks>
        <para>
            Parse an XML element that represents the root logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseChildrenOfLoggerElement(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
      <summary>
            Parses the children of a logger element.
            </summary>
      <param name="catElement">The category element.</param>
      <param name="log">The logger instance.</param>
      <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
      <remarks>
        <para>
            Parse the child elements of a &lt;logger&gt; element.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRenderer(System.Xml.XmlElement)">
      <summary>
            Parses an object renderer.
            </summary>
      <param name="element">The renderer element.</param>
      <remarks>
        <para>
            Parse an XML element that represents a renderer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLevel(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
      <summary>
            Parses a level element.
            </summary>
      <param name="element">The level element.</param>
      <param name="log">The logger object to set the level on.</param>
      <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
      <remarks>
        <para>
            Parse an XML element that represents a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
      <summary>
            Sets a parameter on an object.
            </summary>
      <param name="element">The parameter element.</param>
      <param name="target">The object to set the parameter on.</param>
      <remarks>
            The parameter name must correspond to a writable property
            on the object. The value of the parameter is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called <c>Parse</c> on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.HasAttributesOrElements(System.Xml.XmlElement)">
      <summary>
            Test if an element has no attributes or child elements
            </summary>
      <param name="element">the element to inspect</param>
      <returns>
        <c>true</c> if the element has any attributes or child elements, <c>false</c> otherwise</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.IsTypeConstructible(System.Type)">
      <summary>
            Test if a <see cref="T:System.Type" /> is constructible with <c>Activator.CreateInstance</c>.
            </summary>
      <param name="type">the type to inspect</param>
      <returns>
        <c>true</c> if the type is creatable using a default constructor, <c>false</c> otherwise</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindMethodInfo(System.Type,System.String)">
      <summary>
            Look for a method on the <paramref name="targetType" /> that matches the <paramref name="name" /> supplied
            </summary>
      <param name="targetType">the type that has the method</param>
      <param name="name">the name of the method</param>
      <returns>the method info found</returns>
      <remarks>
        <para>
            The method must be a public instance method on the <paramref name="targetType" />.
            The method must be named <paramref name="name" /> or "Add" followed by <paramref name="name" />.
            The method must take a single parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ConvertStringTo(System.Type,System.String)">
      <summary>
            Converts a string value to a target type.
            </summary>
      <param name="type">The type of object to convert the string to.</param>
      <param name="value">The string value to use as the value of the object.</param>
      <returns>
        <para>
            An object of type <paramref name="type" /> with value <paramref name="value" /> or 
            <c>null</c> when the conversion could not be performed.
            </para>
      </returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(System.Xml.XmlElement,System.Type,System.Type)">
      <summary>
            Creates an object as specified in XML.
            </summary>
      <param name="element">The XML element that contains the definition of the object.</param>
      <param name="defaultTargetType">The object type to use if not explicitly specified.</param>
      <param name="typeConstraint">The type that the returned object must be or must inherit from.</param>
      <returns>The object or <c>null</c></returns>
      <remarks>
        <para>
            Parse an XML element and create an object instance based on the configuration
            data.
            </para>
        <para>
            The type of the instance may be specified in the XML. If not
            specified then the <paramref name="defaultTargetType" /> is used
            as the type. However the type is specified it must support the
            <paramref name="typeConstraint" /> type.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.ConfigurationChangedEventArgs">
      <summary>
      </summary>
    </member>
    <member name="M:log4net.Repository.ConfigurationChangedEventArgs.#ctor(System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="configurationMessages">
      </param>
    </member>
    <member name="P:log4net.Repository.ConfigurationChangedEventArgs.ConfigurationMessages">
      <summary>
      </summary>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryShutdownEventHandler">
      <summary>
            Delegate used to handle logger repository shutdown event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down.</param>
      <param name="e">Empty event args</param>
      <remarks>
        <para>
            Delegate used to handle logger repository shutdown event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryConfigurationResetEventHandler">
      <summary>
            Delegate used to handle logger repository configuration reset event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration reset.</param>
      <param name="e">Empty event args</param>
      <remarks>
        <para>
            Delegate used to handle logger repository configuration reset event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler">
      <summary>
            Delegate used to handle event notifications for logger repository configuration changes.
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration changed.</param>
      <param name="e">Empty event arguments.</param>
      <remarks>
        <para>
            Delegate used to handle event notifications for logger repository configuration changes.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.AppDomainPatternConverter">
      <summary>
            Write the name of the current AppDomain to the output
            </summary>
      <remarks>
        <para>
            Write the name of the current AppDomain to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.AppDomainPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the name of the current AppDomain to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes name of the current AppDomain to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.DatePatternConverter">
      <summary>
            Write the current date to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time to the writer as a string.
            </para>
        <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
        <para>
            The date and time is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.m_dateFormatter">
      <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.declaringType">
      <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current date to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The date and time passed is in the local time zone.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter">
      <summary>
            Write an <see cref="T:System.Environment.SpecialFolder" /> folder path to the output
            </summary>
      <remarks>
        <para>
            Write an special path environment folder path to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the name of the variable to output. <see cref="P:log4net.Util.PatternConverter.Option" />
            should be a value in the <see cref="T:System.Environment.SpecialFolder" /> enumeration.
            </para>
      </remarks>
      <author>Ron Grabowski</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.declaringType">
      <summary>
            The fully qualified type of the EnvironmentFolderPathPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write an special path environment folder path to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes the special path environment folder path to the output <paramref name="writer" />.
            The name of the special path environment folder path to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.EnvironmentPatternConverter">
      <summary>
            Write an environment variable to the output
            </summary>
      <remarks>
        <para>
            Write an environment variable to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the name of the variable to output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.declaringType">
      <summary>
            The fully qualified type of the EnvironmentPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write an environment variable to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes the environment variable to the output <paramref name="writer" />.
            The name of the environment variable to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.IdentityPatternConverter">
      <summary>
            Write the current thread identity to the output
            </summary>
      <remarks>
        <para>
            Write the current thread identity to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.IdentityPatternConverter.declaringType">
      <summary>
            The fully qualified type of the IdentityPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.IdentityPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current thread identity to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes the current thread identity to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.LiteralPatternConverter">
      <summary>
            Pattern converter for literal string instances in the pattern
            </summary>
      <remarks>
        <para>
            Writes the literal string value specified in the 
            <see cref="P:log4net.Util.PatternConverter.Option" /> property to 
            the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.SetNext(log4net.Util.PatternConverter)">
      <summary>
            Set the next converter in the chain
            </summary>
      <param name="pc">The next pattern converter in the chain</param>
      <returns>The next pattern converter</returns>
      <remarks>
        <para>
            Special case the building of the pattern converter chain
            for <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> instances. Two adjacent
            literals in the pattern can be represented by a single combined
            pattern converter. This implementation detects when a 
            <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> is added to the chain
            after this converter and combines its value with this converter's
            literal value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Format(System.IO.TextWriter,System.Object)">
      <summary>
            Write the literal to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, not set</param>
      <remarks>
        <para>
            Override the formatting behavior to ignore the FormattingInfo
            because we have a literal instead.
            </para>
        <para>
            Writes the value of <see cref="P:log4net.Util.PatternConverter.Option" />
            to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Convert this pattern into the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, not set</param>
      <remarks>
        <para>
            This method is not used.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.NewLinePatternConverter">
      <summary>
            Writes a newline to the output
            </summary>
      <remarks>
        <para>
            Writes the system dependent line terminator to the output.
            This behavior can be overridden by setting the <see cref="P:log4net.Util.PatternConverter.Option" />:
            </para>
        <list type="definition">
          <listheader>
            <term>Option Value</term>
            <description>Output</description>
          </listheader>
          <item>
            <term>DOS</term>
            <description>DOS or Windows line terminator <c>"\r\n"</c></description>
          </item>
          <item>
            <term>UNIX</term>
            <description>UNIX line terminator <c>"\n"</c></description>
          </item>
        </list>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.ProcessIdPatternConverter">
      <summary>
            Write the current process ID to the output
            </summary>
      <remarks>
        <para>
            Write the current process ID to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.declaringType">
      <summary>
            The fully qualified type of the ProcessIdPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current process ID to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write the current process ID to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.PropertyPatternConverter">
      <summary>
            Property pattern converter
            </summary>
      <remarks>
        <para>
            This pattern converter reads the thread and global properties.
            The thread properties take priority over global properties.
            See <see cref="P:log4net.ThreadContext.Properties" /> for details of the 
            thread properties. See <see cref="P:log4net.GlobalContext.Properties" /> for
            details of the global properties.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is specified then that will be used to
            lookup a single property. If no <see cref="P:log4net.Util.PatternConverter.Option" /> is specified
            then all properties will be dumped as a list of key value pairs.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.PropertyPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the property value to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.RandomStringPatternConverter">
      <summary>
            A Pattern converter that generates a string of random characters
            </summary>
      <remarks>
        <para>
            The converter generates a string of random characters. By default
            the string is length 4. This can be changed by setting the <see cref="P:log4net.Util.PatternConverter.Option" />
            to the string value of the length required.
            </para>
        <para>
            The random characters in the string are limited to uppercase letters
            and numbers only.
            </para>
        <para>
            The random number generator used by this class is not cryptographically secure.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.s_random">
      <summary>
            Shared random number generator
            </summary>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.m_length">
      <summary>
            Length of random string to generate. Default length 4.
            </summary>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.declaringType">
      <summary>
            The fully qualified type of the RandomStringPatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions">
      <summary>
            Initialize the converter options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write a randoim string to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write a randoim string to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.UserNamePatternConverter">
      <summary>
            Write the current threads username to the output
            </summary>
      <remarks>
        <para>
            Write the current threads username to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.UserNamePatternConverter.declaringType">
      <summary>
            The fully qualified type of the UserNamePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.UserNamePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current threads username to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write the current threads username to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter">
      <summary>
            Write the UTC date time to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time in Universal time.
            </para>
        <para>
            See the <see cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.UtcDatePatternConverter.declaringType">
      <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.UtcDatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current date and time to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The date is in Universal time when it is rendered.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
    </member>
    <member name="T:log4net.Util.TypeConverters.BooleanConverter">
      <summary>
            Type converter for Boolean.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <c>bool</c> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.BooleanConverter.ConvertFrom(System.Object)">
      <summary>
            Convert the source object to the type supported by this object
            </summary>
      <param name="source">the object to convert</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Boolean.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Boolean" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
      <summary>
            Exception base type for conversion errors.
            </summary>
      <remarks>
        <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <param name="innerException">A nested exception to include.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message and inner exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
      <param name="destinationType">The conversion destination type.</param>
      <param name="sourceValue">The value to convert.</param>
      <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object,System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
      <param name="destinationType">The conversion destination type.</param>
      <param name="sourceValue">The value to convert.</param>
      <param name="innerException">A nested exception to include.</param>
      <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.ConverterRegistry">
      <summary>
            Register of type converters for specific types.
            </summary>
      <remarks>
        <para>
            Maintains a registry of type converters used to convert between
            types.
            </para>
        <para>
            Use the <see cref="M:AddConverter(Type, object)" /> and 
            <see cref="M:AddConverter(Type, Type)" /> methods to register new converters.
            The <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)" /> and <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)" /> methods
            lookup appropriate converters to use.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.ConverterRegistry.declaringType">
      <summary>
            The fully qualified type of the ConverterRegistry class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="F:log4net.Util.TypeConverters.ConverterRegistry.s_type2converter">
      <summary>
            Mapping from <see cref="T:System.Type" /> to type converter.
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#ctor">
      <summary>
            Private constructor
            </summary>
      <remarks>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry" /> class.
            </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)">
      <summary>
            Adds a converter for a specific type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <param name="converter">The type converter to use to convert to the destination type.</param>
      <remarks>
        <para>
            Adds a converter instance for a specific type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)">
      <summary>
            Adds a converter for a specific type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <param name="converterType">The type of the type converter to use to convert to the destination type.</param>
      <remarks>
        <para>
            Adds a converter <see cref="T:System.Type" /> for a specific type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)">
      <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
      <param name="sourceType">The type being converted from.</param>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)">
      <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConverterFromAttribute(System.Type)">
      <summary>
            Lookups the type converter to use as specified by the attributes on the 
            destination type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.CreateConverterInstance(System.Type)">
      <summary>
            Creates the instance of the type converter.
            </summary>
      <param name="converterType">The type of the type converter.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            The type specified for the type converter must implement 
            the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> or <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces 
            and must have a public default (no argument) constructor.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.EncodingConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.EncodingConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to an encoding</param>
      <returns>the encoding</returns>
      <remarks>
        <para>
            Uses the <see cref="M:Encoding.GetEncoding(string)" /> method to 
            convert the <see cref="T:System.String" /> argument to an <see cref="T:System.Text.Encoding" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.IConvertTo">
      <summary>
            Interface supported by type converters
            </summary>
      <remarks>
        <para>
            This interface supports conversion from a single type to arbitrary types.
            See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertTo.CanConvertTo(System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type
            </summary>
      <param name="targetType">A Type that represents the type you want to convert to</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Test if the type supported by this converter can be converted to the
            <paramref name="targetType" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertTo.ConvertTo(System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
      <param name="source">the object to convert</param>
      <param name="targetType">The Type to convert the value parameter to</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Converts the <paramref name="source" /> (which must be of the type supported
            by this converter) to the <paramref name="targetType" /> specified..
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.IPAddressConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.IPAddressConverter.validIpAddressChars">
      <summary>
            Valid characters in an IPv4 or IPv6 address string. (Does not support subnets)
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IPAddressConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to an IPAddress</param>
      <returns>the IPAddress</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Net.IPAddress.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to an <see cref="T:System.Net.IPAddress" />.
            If that fails then the string is resolved as a DNS hostname.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.PatternLayoutConverter">
      <summary>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </para>
        <para>
            The string is used as the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> 
            of the <see cref="T:log4net.Layout.PatternLayout" />.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a PatternLayout</param>
      <returns>the PatternLayout</returns>
      <remarks>
        <para>
            Creates and returns a new <see cref="T:log4net.Layout.PatternLayout" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.PatternStringConverter">
      <summary>
            Convert between string and <see cref="T:log4net.Util.PatternString" /></summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:log4net.Util.PatternString" /> type, 
            and from a <see cref="T:log4net.Util.PatternString" /> type to a string.
            </para>
        <para>
            The string is used as the <see cref="P:log4net.Util.PatternString.ConversionPattern" /> 
            of the <see cref="T:log4net.Util.PatternString" />.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)">
      <summary>
            Can the target type be converted to the type supported by this object
            </summary>
      <param name="targetType">A <see cref="T:System.Type" /> that represents the type you want to convert to</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="targetType" /> is
            assignable from a <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertTo(System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
      <param name="source">the object to convert</param>
      <param name="targetType">The Type to convert the value parameter to</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Uses the <see cref="M:PatternString.Format()" /> method to convert the
            <see cref="T:log4net.Util.PatternString" /> argument to a <see cref="T:System.String" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            <paramref name="targetType" />. To check for this condition use the 
            <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)" /> method.
            </exception>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a PatternString</param>
      <returns>the PatternString</returns>
      <remarks>
        <para>
            Creates and returns a new <see cref="T:log4net.Util.PatternString" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Util.PatternString.ConversionPattern" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.TypeConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a Type</param>
      <returns>the Type</returns>
      <remarks>
        <para>
            Uses the <see cref="M:Type.GetType(string,bool)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Type" />.
            Additional effort is made to locate partially specified types
            by searching the loaded assemblies.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.TypeConverterAttribute">
      <summary>
            Attribute used to associate a type converter
            </summary>
      <remarks>
        <para>
            Class and Interface level attribute that specifies a type converter
            to use with the associated type.
            </para>
        <para>
            To associate a type converter with a target type apply a
            <c>TypeConverterAttribute</c> to the target type. Specify the
            type of the type converter on the attribute.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.TypeConverterAttribute.m_typeName">
      <summary>
            The string type name of the type converter
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.String)">
      <summary>
            Create a new type converter attribute for the specified type name
            </summary>
      <param name="typeName">The string type name of the type converter</param>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.Type)">
      <summary>
            Create a new type converter attribute for the specified type
            </summary>
      <param name="converterType">The type of the type converter</param>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TypeConverters.TypeConverterAttribute.ConverterTypeName">
      <summary>
            The string type name of the type converter 
            </summary>
      <value>
            The string type name of the type converter 
            </value>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.AppenderAttachedImpl">
      <summary>
            A straightforward implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
      <remarks>
        <para>
            This is the default implementation of the <see cref="T:log4net.Core.IAppenderAttachable" />
            interface. Implementors of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            should aggregate an instance of this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderList">
      <summary>
            List of appenders
            </summary>
    </member>
    <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderArray">
      <summary>
            Array of appenders, used to cache the m_appenderList
            </summary>
    </member>
    <member name="F:log4net.Util.AppenderAttachedImpl.declaringType">
      <summary>
            The fully qualified type of the AppenderAttachedImpl class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.AppenderAttachedImpl" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent)">
      <summary>
            Append on on all attached appenders.
            </summary>
      <param name="loggingEvent">The event being logged.</param>
      <returns>The number of appenders called.</returns>
      <remarks>
        <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent[])">
      <summary>
            Append on on all attached appenders.
            </summary>
      <param name="loggingEvents">The array of events being logged.</param>
      <returns>The number of appenders called.</returns>
      <remarks>
        <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.CallAppend(log4net.Appender.IAppender,log4net.Core.LoggingEvent[])">
      <summary>
            Calls the DoAppende method on the <see cref="T:log4net.Appender.IAppender" /> with 
            the <see cref="T:log4net.Core.LoggingEvent" /> objects supplied.
            </summary>
      <param name="appender">The appender</param>
      <param name="loggingEvents">The events</param>
      <remarks>
        <para>
            If the <paramref name="appender" /> supports the <see cref="T:log4net.Appender.IBulkAppender" />
            interface then the <paramref name="loggingEvents" /> will be passed 
            through using that interface. Otherwise the <see cref="T:log4net.Core.LoggingEvent" />
            objects in the array will be passed one at a time.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Attaches an appender.
            </summary>
      <param name="newAppender">The appender to add.</param>
      <remarks>
        <para>
            If the appender is already in the list it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.GetAppender(System.String)">
      <summary>
            Gets an attached appender with the specified name.
            </summary>
      <param name="name">The name of the appender to get.</param>
      <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
      <remarks>
        <para>
            Lookup an attached appender by name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAllAppenders">
      <summary>
            Removes all attached appenders.
            </summary>
      <remarks>
        <para>
            Removes and closes all attached appenders
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.AppenderAttachedImpl.Appenders">
      <summary>
            Gets all attached appenders.
            </summary>
      <returns>
            A collection of attached appenders, or <c>null</c> if there
            are no attached appenders.
            </returns>
      <remarks>
        <para>
            The read only collection of all currently attached appenders.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CompositeProperties">
      <summary>
            This class aggregates several PropertiesDictionary collections together.
            </summary>
      <remarks>
        <para>
            Provides a dictionary style lookup over an ordered list of
            <see cref="T:log4net.Util.PropertiesDictionary" /> collections.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.CompositeProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CompositeProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CompositeProperties.Add(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Add a Properties Dictionary to this composite collection
            </summary>
      <param name="properties">the properties to add</param>
      <remarks>
        <para>
            Properties dictionaries added first take precedence over dictionaries added
            later.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CompositeProperties.Flatten">
      <summary>
            Flatten this composite collection into a single properties dictionary
            </summary>
      <returns>the flattened dictionary</returns>
      <remarks>
        <para>
            Reduces the collection of ordered dictionaries to a single dictionary
            containing the resultant values for the keys.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CompositeProperties.Item(System.String)">
      <summary>
            Gets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Looks up the value for the <paramref name="key" /> specified.
            The <see cref="T:log4net.Util.PropertiesDictionary" /> collections are searched
            in the order in which they were added to this collection. The value
            returned is the value held by the first collection that contains
            the specified key.
            </para>
        <para>
            If none of the collections contain the specified key then
            <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ContextPropertiesBase">
      <summary>
            Base class for Context Properties implementations
            </summary>
      <remarks>
        <para>
            This class defines a basic property get set accessor
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="P:log4net.Util.ContextPropertiesBase.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Gets or sets the value of a property
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ConverterInfo">
      <summary>
            Wrapper class used to map converter names to converter types
            </summary>
      <remarks>
        <para>
            Pattern converter info class used during configuration by custom
            PatternString and PatternLayer converters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ConverterInfo.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="M:log4net.Util.ConverterInfo.AddProperty(log4net.Util.PropertyEntry)">
      <summary>
      </summary>
      <param name="entry">
      </param>
    </member>
    <member name="P:log4net.Util.ConverterInfo.Name">
      <summary>
            Gets or sets the name of the conversion pattern
            </summary>
      <remarks>
        <para>
            The name of the pattern in the format string
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ConverterInfo.Type">
      <summary>
            Gets or sets the type of the converter
            </summary>
      <remarks>
        <para>
            The value specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ConverterInfo.Properties">
      <summary>
      </summary>
    </member>
    <member name="T:log4net.Util.TextWriterAdapter">
      <summary>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.TextWriterAdapter.m_writer">
      <summary>
            The writer to forward messages to
            </summary>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.#ctor(System.IO.TextWriter)">
      <summary>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to forward to</param>
      <remarks>
        <para>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Close">
      <summary>
            Closes the writer and releases any system resources associated with the writer
            </summary>
      <remarks>
        <para>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Dispose(System.Boolean)">
      <summary>
            Dispose this writer
            </summary>
      <param name="disposing">flag indicating if we are being disposed</param>
      <remarks>
        <para>
            Dispose this writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Flush">
      <summary>
            Flushes any buffered output
            </summary>
      <remarks>
        <para>
            Clears all buffers for the writer and causes any buffered data to be written 
            to the underlying device
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char)">
      <summary>
            Writes a character to the wrapped TextWriter
            </summary>
      <param name="value">the value to write to the TextWriter</param>
      <remarks>
        <para>
            Writes a character to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a character buffer to the wrapped TextWriter
            </summary>
      <param name="buffer">the data buffer</param>
      <param name="index">the start index</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Writes a character buffer to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.String)">
      <summary>
            Writes a string to the wrapped TextWriter
            </summary>
      <param name="value">the value to write to the TextWriter</param>
      <remarks>
        <para>
            Writes a string to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.Writer">
      <summary>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <value>
            The underlying <see cref="T:System.IO.TextWriter" />.
            </value>
      <remarks>
        <para>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.Encoding">
      <summary>
            The Encoding in which the output is written
            </summary>
      <value>
            The <see cref="P:log4net.Util.TextWriterAdapter.Encoding" /></value>
      <remarks>
        <para>
            The Encoding in which the output is written
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.FormatProvider">
      <summary>
            Gets an object that controls formatting
            </summary>
      <value>
            The format provider
            </value>
      <remarks>
        <para>
            Gets an object that controls formatting
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.NewLine">
      <summary>
            Gets or sets the line terminator string used by the TextWriter
            </summary>
      <value>
            The line terminator to use
            </value>
      <remarks>
        <para>
            Gets or sets the line terminator string used by the TextWriter
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.QuietTextWriter">
      <summary>
        <see cref="T:System.IO.TextWriter" /> that does not leak exceptions
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Util.QuietTextWriter" /> does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.QuietTextWriter.m_errorHandler">
      <summary>
            The error handler instance to pass all errors to
            </summary>
    </member>
    <member name="F:log4net.Util.QuietTextWriter.m_closed">
      <summary>
            Flag to indicate if this writer is closed
            </summary>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
      <summary>
            Constructor
            </summary>
      <param name="writer">the writer to actually write to</param>
      <param name="errorHandler">the error handler to report error to</param>
      <remarks>
        <para>
            Create a new QuietTextWriter using a writer and error handler
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.Char)">
      <summary>
            Writes a character to the underlying writer
            </summary>
      <param name="value">the char to write</param>
      <remarks>
        <para>
            Writes a character to the underlying writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a buffer to the underlying writer
            </summary>
      <param name="buffer">the buffer to write</param>
      <param name="index">the start index to write from</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Writes a buffer to the underlying writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.String)">
      <summary>
            Writes a string to the output.
            </summary>
      <param name="value">The string data to write to the output.</param>
      <remarks>
        <para>
            Writes a string to the output.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Close">
      <summary>
            Closes the underlying output writer.
            </summary>
      <remarks>
        <para>
            Closes the underlying output writer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.QuietTextWriter.ErrorHandler">
      <summary>
            Gets or sets the error handler that all errors are passed to.
            </summary>
      <value>
            The error handler that all errors are passed to.
            </value>
      <remarks>
        <para>
            Gets or sets the error handler that all errors are passed to.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.QuietTextWriter.Closed">
      <summary>
            Gets a value indicating whether this writer is closed.
            </summary>
      <value>
        <c>true</c> if this writer is closed, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            Gets a value indicating whether this writer is closed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CountingQuietTextWriter">
      <summary>
            Subclass of <see cref="T:log4net.Util.QuietTextWriter" /> that maintains a count of 
            the number of bytes written.
            </summary>
      <remarks>
        <para>
            This writer counts the number of bytes written.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.CountingQuietTextWriter.m_countBytes">
      <summary>
            Total number of bytes written.
            </summary>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
      <summary>
            Constructor
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to actually write to.</param>
      <param name="errorHandler">The <see cref="T:log4net.Core.IErrorHandler" /> to report errors to.</param>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.CountingQuietTextWriter" /> class 
            with the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char)">
      <summary>
            Writes a character to the underlying writer and counts the number of bytes written.
            </summary>
      <param name="value">the char to write</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a buffer to the underlying writer and counts the number of bytes written.
            </summary>
      <param name="buffer">the buffer to write</param>
      <param name="index">the start index to write from</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.String)">
      <summary>
            Writes a string to the output and counts the number of bytes written.
            </summary>
      <param name="str">The string data to write to the output.</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CountingQuietTextWriter.Count">
      <summary>
            Gets or sets the total number of bytes written.
            </summary>
      <value>
            The total number of bytes written.
            </value>
      <remarks>
        <para>
            Gets or sets the total number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CyclicBuffer">
      <summary>
            A fixed size rolling buffer of logging events.
            </summary>
      <remarks>
        <para>
            An array backed fixed size leaky bucket.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="maxSize">The maximum number of logging events in the buffer.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CyclicBuffer" /> class with 
            the specified maximum number of buffered logging events.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxSize" /> argument is not a positive integer.</exception>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.Append(log4net.Core.LoggingEvent)">
      <summary>
            Appends a <paramref name="loggingEvent" /> to the buffer.
            </summary>
      <param name="loggingEvent">The event to append to the buffer.</param>
      <returns>The event discarded from the buffer, if the buffer is full, otherwise <c>null</c>.</returns>
      <remarks>
        <para>
            Append an event to the buffer. If the buffer still contains free space then
            <c>null</c> is returned. If the buffer is full then an event will be dropped
            to make space for the new event, the event dropped is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.PopOldest">
      <summary>
            Get and remove the oldest event in the buffer.
            </summary>
      <returns>The oldest logging event in the buffer</returns>
      <remarks>
        <para>
            Gets the oldest (first) logging event in the buffer and removes it 
            from the buffer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.PopAll">
      <summary>
            Pops all the logging events from the buffer into an array.
            </summary>
      <returns>An array of all the logging events in the buffer.</returns>
      <remarks>
        <para>
            Get all the events in the buffer and clear the buffer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.Clear">
      <summary>
            Clear the buffer
            </summary>
      <remarks>
        <para>
            Clear the buffer of all events. The events in the buffer are lost.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.Item(System.Int32)">
      <summary>
            Gets the <paramref name="i" />th oldest event currently in the buffer.
            </summary>
      <value>The <paramref name="i" />th oldest event currently in the buffer.</value>
      <remarks>
        <para>
            If <paramref name="i" /> is outside the range 0 to the number of events
            currently in the buffer, then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.MaxSize">
      <summary>
            Gets the maximum size of the buffer.
            </summary>
      <value>The maximum size of the buffer.</value>
      <remarks>
        <para>
            Gets the maximum size of the buffer
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.Length">
      <summary>
            Gets the number of logging events in the buffer.
            </summary>
      <value>The number of logging events in the buffer.</value>
      <remarks>
        <para>
            This number is guaranteed to be in the range 0 to <see cref="P:log4net.Util.CyclicBuffer.MaxSize" />
            (inclusive).
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.EmptyCollection">
      <summary>
            An always empty <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.ICollection" />
            interface that always represents an empty collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.EmptyCollection.s_instance">
      <summary>
            The singleton instance of the empty collection.
            </summary>
    </member>
    <member name="M:log4net.Util.EmptyCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyCollection" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
      <param name="index">The zero-based index in array at which 
            copying begins.</param>
      <remarks>
        <para>
            As the collection is empty no values are copied into the array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.Instance">
      <summary>
            Gets the singleton instance of the empty collection.
            </summary>
      <returns>The singleton instance of the empty collection.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the empty collection.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.IsSynchronized">
      <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
      <value>
        <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
      <remarks>
        <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyCollection.Count" /> is always <c>0</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyCollection.SyncRoot" /> object.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.EmptyDictionary">
      <summary>
            An always empty <see cref="T:System.Collections.IDictionary" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionary" />
            interface that always represents an empty collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.EmptyDictionary.s_instance">
      <summary>
            The singleton instance of the empty dictionary.
            </summary>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyDictionary" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
      <param name="index">The zero-based index in array at which 
            copying begins.</param>
      <remarks>
        <para>
            As the collection is empty no values are copied into the array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
      <remarks>
        <para>
            As the collection is empty no new values can be added. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Clear">
      <summary>
            Removes all elements from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <remarks>
        <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:log4net.Util.EmptyDictionary" /> contains an element 
            with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:log4net.Util.EmptyDictionary" />.</param>
      <returns>
        <c>false</c>
      </returns>
      <remarks>
        <para>
            As the collection is empty the <see cref="M:log4net.Util.EmptyDictionary.Contains(System.Object)" /> method always returns <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <remarks>
        <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Instance">
      <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsSynchronized">
      <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
      <value>
        <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
      <remarks>
        <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <b>true</b>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" /></summary>
      <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyDictionary.Count" /> is always <c>0</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyDictionary.SyncRoot" /> object.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> has a fixed size.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsFixedSize" /> always returns <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> is read-only.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsReadOnly" /> always returns <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <value>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Values">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <value>An <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Item(System.Object)">
      <summary>
            Gets or sets the element with the specified key.
            </summary>
      <param name="key">The key of the element to get or set.</param>
      <value>
        <c>null</c>
      </value>
      <remarks>
        <para>
            As the collection is empty no values can be looked up or stored. 
            If the index getter is called then <c>null</c> is returned.
            A <see cref="T:System.InvalidOperationException" /> is thrown if the setter is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="T:log4net.Util.FormattingInfo">
      <summary>
            Contain the information obtained when parsing formatting modifiers 
            in conversion modifiers.
            </summary>
      <remarks>
        <para>
            Holds the formatting information extracted from the format string by
            the <see cref="T:log4net.Util.PatternParser" />. This is used by the <see cref="T:log4net.Util.PatternConverter" />
            objects when rendering the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.FormattingInfo.#ctor">
      <summary>
            Defaut Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.FormattingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class
            with the specified parameters.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.Min">
      <summary>
            Gets or sets the minimum value.
            </summary>
      <value>
            The minimum value.
            </value>
      <remarks>
        <para>
            Gets or sets the minimum value.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.Max">
      <summary>
            Gets or sets the maximum value.
            </summary>
      <value>
            The maximum value.
            </value>
      <remarks>
        <para>
            Gets or sets the maximum value.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.LeftAlign">
      <summary>
            Gets or sets a flag indicating whether left align is enabled
            or not.
            </summary>
      <value>
            A flag indicating whether left align is enabled or not.
            </value>
      <remarks>
        <para>
            Gets or sets a flag indicating whether left align is enabled or not.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.GlobalContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.GlobalContext" /></summary>
      <remarks>
        <para>
            This class implements a properties collection that is thread safe and supports both
            storing properties and capturing a read only copy of the current propertied.
            </para>
        <para>
            This class is optimized to the scenario where the properties are read frequently
            and are modified infrequently.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.GlobalContextProperties.m_readOnlyProperties">
      <summary>
            The read only copy of the properties.
            </summary>
      <remarks>
        <para>
            This variable is declared <c>volatile</c> to prevent the compiler and JIT from
            reordering reads and writes of this thread performed on different threads.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.GlobalContextProperties.m_syncRoot">
      <summary>
            Lock object used to synchronize updates within this instance
            </summary>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.GlobalContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.Remove(System.String)">
      <summary>
            Remove a property from the global context
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Removing an entry from the global context properties is relatively expensive compared
            with reading a value. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.Clear">
      <summary>
            Clear the global context properties
            </summary>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.GetReadOnlyProperties">
      <summary>
            Get a readonly immutable copy of the properties
            </summary>
      <returns>the current global context properties</returns>
      <remarks>
        <para>
            This implementation is fast because the GlobalContextProperties class
            stores a readonly copy of the properties.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.GlobalContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Reading the value for a key is faster than setting the value.
            When the value is written a new read only copy of 
            the properties is created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ILogExtensions">
      <summary>
            The static class ILogExtensions contains a set of widely used
            methods that ease the interaction with the ILog interface implementations.
            </summary>
      <remarks>
        <para>
            This class contains methods for logging at different levels and checks the
            properties for determining if those logging levels are enabled in the current
            configuration.
            </para>
      </remarks>
      <example>Simple example of logging messages
            <code lang="C#">
            using log4net.Util;
            
            ILog log = LogManager.GetLogger("application-log");
            
            log.InfoExt("Application Start");
            log.DebugExt("This is a debug message");
            </code></example>
    </member>
    <member name="F:log4net.Util.ILogExtensions.declaringType">
      <summary>
            The fully qualified type of the Logger class.
            </summary>
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object})">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Debug(System.Object)" /><seealso cref="P:log4net.ILog.IsDebugEnabled" /></member>
    <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object})">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Info(System.Object)" /><seealso cref="P:log4net.ILog.IsInfoEnabled" /></member>
    <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object})">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>WARN</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>WARN</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Warn(System.Object)" /><seealso cref="P:log4net.ILog.IsWarnEnabled" /></member>
    <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object})">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Error(System.Object)" /><seealso cref="P:log4net.ILog.IsErrorEnabled" /></member>
    <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object})">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="callback">The lambda expression that gets the object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Fatal(System.Object)" /><seealso cref="P:log4net.ILog.IsFatalEnabled" /></member>
    <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="logger">The logger on which the message is logged.</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="T:log4net.Util.LevelMapping">
      <summary>
            Manages a mapping from levels to <see cref="T:log4net.Util.LevelMappingEntry" /></summary>
      <remarks>
        <para>
            Manages an ordered mapping from <see cref="T:log4net.Core.Level" /> instances 
            to <see cref="T:log4net.Util.LevelMappingEntry" /> subclasses.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.LevelMapping.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initialise a new instance of <see cref="T:log4net.Util.LevelMapping" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.Add(log4net.Util.LevelMappingEntry)">
      <summary>
            Add a <see cref="T:log4net.Util.LevelMappingEntry" /> to this mapping
            </summary>
      <param name="entry">the entry to add</param>
      <remarks>
        <para>
            If a <see cref="T:log4net.Util.LevelMappingEntry" /> has previously been added
            for the same <see cref="T:log4net.Core.Level" /> then that entry will be 
            overwritten.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.Lookup(log4net.Core.Level)">
      <summary>
            Lookup the mapping for the specified level
            </summary>
      <param name="level">the level to lookup</param>
      <returns>the <see cref="T:log4net.Util.LevelMappingEntry" /> for the level or <c>null</c> if no mapping found</returns>
      <remarks>
        <para>
            Lookup the value for the specified level. Finds the nearest
            mapping value for the level that is equal to or less than the
            <paramref name="level" /> specified.
            </para>
        <para>
            If no mapping could be found then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.ActivateOptions">
      <summary>
            Initialize options
            </summary>
      <remarks>
        <para>
            Caches the sorted list of <see cref="T:log4net.Util.LevelMappingEntry" /> in an array
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LogicalThreadContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.LogicalThreadContext" /></summary>
      <remarks>
        <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
        <para>
            This class stores its properties in a slot on the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> named
            <c>log4net.Util.LogicalThreadContextProperties</c>.
            </para>
        <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission" /> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.LogicalThreadContextProperties.m_disabled">
      <summary>
            Flag used to disable this context if we don't have permission to access the CallContext.
            </summary>
    </member>
    <member name="F:log4net.Util.LogicalThreadContextProperties.declaringType">
      <summary>
            The fully qualified type of the LogicalThreadContextProperties class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.Remove(System.String)">
      <summary>
            Remove a property
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove the value for the specified <paramref name="key" /> from the context.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.Clear">
      <summary>
            Clear all the context properties
            </summary>
      <remarks>
        <para>
            Clear all the context properties
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.GetProperties(System.Boolean)">
      <summary>
            Get the PropertiesDictionary stored in the LocalDataStoreSlot for this thread.
            </summary>
      <param name="create">create the dictionary if it does not exist, otherwise return null if is does not exist</param>
      <returns>the properties for this thread</returns>
      <remarks>
        <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doings so.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.GetCallContextData">
      <summary>
            Gets the call context get data.
            </summary>
      <returns>The peroperties dictionary stored in the call context</returns>
      <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)" /> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.SetCallContextData(log4net.Util.PropertiesDictionary)">
      <summary>
            Sets the call context data.
            </summary>
      <param name="properties">The properties.</param>
      <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)" /> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
    </member>
    <member name="P:log4net.Util.LogicalThreadContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Get or set the property value for the <paramref name="key" /> specified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LogReceivedEventHandler">
      <summary>
      </summary>
      <param name="source">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:log4net.Util.LogLog">
      <summary>
            Outputs log statements from within the log4net assembly.
            </summary>
      <remarks>
        <para>
            Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing.
            </para>
        <para>
            All log4net internal debug calls go to the standard output stream
            whereas internal error messages are sent to the standard error output 
            stream.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Util.LogLog.LogReceivedAdapter">
      <summary>
            Subscribes to the LogLog.LogReceived event and stores messages
            to the supplied IList instance.
            </summary>
    </member>
    <member name="M:log4net.Util.LogLog.LogReceivedAdapter.#ctor(System.Collections.IList)">
      <summary>
      </summary>
      <param name="items">
      </param>
    </member>
    <member name="M:log4net.Util.LogLog.LogReceivedAdapter.Dispose">
      <summary>
      </summary>
    </member>
    <member name="P:log4net.Util.LogLog.LogReceivedAdapter.Items">
      <summary>
      </summary>
    </member>
    <member name="F:log4net.Util.LogLog.s_debugEnabled">
      <summary>
             Default debug level
            </summary>
    </member>
    <member name="F:log4net.Util.LogLog.s_quietMode">
      <summary>
            In quietMode not even errors generate any output.
            </summary>
    </member>
    <member name="M:log4net.Util.LogLog.ToString">
      <summary>
            Formats Prefix, Source, and Message in the same format as the value
            sent to Console.Out and Trace.Write.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Util.LogLog.#ctor(System.Type,System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.LogLog" /> class. 
            </summary>
      <param name="source">
      </param>
      <param name="prefix">
      </param>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:log4net.Util.LogLog.OnLogReceived(System.Type,System.String,System.String,System.Exception)">
      <summary>
            Raises the LogReceived event when an internal messages is received.
            </summary>
      <param name="source">
      </param>
      <param name="prefix">
      </param>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String)">
      <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
      <param name="source">
      </param>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String,System.Exception)">
      <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
      <param name="source">The Type that generated this message.</param>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String)">
      <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
      <param name="source">The Type that generated this message.</param>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String,System.Exception)">
      <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
      <param name="source">The Type that generated this message.</param>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Error(System.Type,System.String)">
      <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
      <param name="source">The Type that generated this message.</param>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal error messages are prepended with 
            the string "log4net:ERROR ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Error(System.Type,System.String,System.Exception)">
      <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
      <param name="source">The Type that generated this message.</param>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net:ERROR ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.EmitOutLine(System.String)">
      <summary>
            Writes output to the standard output stream.  
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            Writes to both Console.Out and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
        <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.EmitErrorLine(System.String)">
      <summary>
            Writes output to the standard error stream.  
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            Writes to both Console.Error and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
        <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.Source">
      <summary>
            The Type that generated the internal message.
            </summary>
    </member>
    <member name="P:log4net.Util.LogLog.TimeStamp">
      <summary>
            The DateTime stamp of when the internal message was received.
            </summary>
    </member>
    <member name="P:log4net.Util.LogLog.Prefix">
      <summary>
            A string indicating the severity of the internal message.
            </summary>
      <remarks>
            "log4net: ", 
            "log4net:ERROR ", 
            "log4net:WARN "
            </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.Message">
      <summary>
            The internal log message.
            </summary>
    </member>
    <member name="P:log4net.Util.LogLog.Exception">
      <summary>
            The Exception related to the message.
            </summary>
      <remarks>
            Optional. Will be null if no Exception was passed.
            </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.InternalDebugging">
      <summary>
            Gets or sets a value indicating whether log4net internal logging
            is enabled or disabled.
            </summary>
      <value>
        <c>true</c> if log4net internal logging is enabled, otherwise 
            <c>false</c>.
            </value>
      <remarks>
        <para>
            When set to <c>true</c>, internal debug level logging will be 
            displayed.
            </para>
        <para>
            This value can be set by setting the application setting 
            <c>log4net.Internal.Debug</c> in the application configuration
            file.
            </para>
        <para>
            The default value is <c>false</c>, i.e. debugging is
            disabled.
            </para>
      </remarks>
      <example>
        <para>
            The following example enables internal debugging using the 
            application configuration file :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net.Internal.Debug" value="true" />
            </appSettings>
          </configuration>
        </code>
      </example>
    </member>
    <member name="P:log4net.Util.LogLog.QuietMode">
      <summary>
            Gets or sets a value indicating whether log4net should generate no output
            from internal logging, not even for errors. 
            </summary>
      <value>
        <c>true</c> if log4net should generate no output at all from internal 
            logging, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            When set to <c>true</c> will cause internal logging at all levels to be 
            suppressed. This means that no warning or error reports will be logged. 
            This option overrides the <see cref="P:log4net.Util.LogLog.InternalDebugging" /> setting and 
            disables all debug also.
            </para>
        <para>This value can be set by setting the application setting
            <c>log4net.Internal.Quiet</c> in the application configuration file.
            </para>
        <para>
            The default value is <c>false</c>, i.e. internal logging is not
            disabled.
            </para>
      </remarks>
      <example>
            The following example disables internal logging using the 
            application configuration file :
            <code lang="XML" escaped="true"><configuration><appSettings><add key="log4net.Internal.Quiet" value="true" /></appSettings></configuration></code></example>
    </member>
    <member name="P:log4net.Util.LogLog.EmitInternalMessages">
      <summary>
      </summary>
    </member>
    <member name="P:log4net.Util.LogLog.IsDebugEnabled">
      <summary>
            Test if LogLog.Debug is enabled for output.
            </summary>
      <value>
        <c>true</c> if Debug is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Debug is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.IsWarnEnabled">
      <summary>
            Test if LogLog.Warn is enabled for output.
            </summary>
      <value>
        <c>true</c> if Warn is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Warn is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.IsErrorEnabled">
      <summary>
            Test if LogLog.Error is enabled for output.
            </summary>
      <value>
        <c>true</c> if Error is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Error is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Util.LogLog.LogReceived">
      <summary>
            The event raised when an internal message has been received.
            </summary>
    </member>
    <member name="T:log4net.Util.LogReceivedEventArgs">
      <summary>
      </summary>
    </member>
    <member name="M:log4net.Util.LogReceivedEventArgs.#ctor(log4net.Util.LogLog)">
      <summary>
      </summary>
      <param name="loglog">
      </param>
    </member>
    <member name="P:log4net.Util.LogReceivedEventArgs.LogLog">
      <summary>
      </summary>
    </member>
    <member name="T:log4net.Util.NativeError">
      <summary>
            Represents a native error code and message.
            </summary>
      <remarks>
        <para>
            Represents a Win32 platform native error.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.NativeError.#ctor(System.Int32,System.String)">
      <summary>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </summary>
      <param name="number">The number of the native error.</param>
      <param name="message">The message of the native error.</param>
      <remarks>
        <para>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetLastError">
      <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class for the last Windows error.
            </summary>
      <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the last windows error.
            </returns>
      <remarks>
        <para>
            The message for the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" /> error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetError(System.Int32)">
      <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class.
            </summary>
      <param name="number">the error number for the native error</param>
      <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the specified 
            error number.
            </returns>
      <remarks>
        <para>
            The message for the specified error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetErrorMessage(System.Int32)">
      <summary>
            Retrieves the message corresponding with a Win32 message identifier.
            </summary>
      <param name="messageId">Message identifier for the requested message.</param>
      <returns>
            The message corresponding with the specified message identifier.
            </returns>
      <remarks>
        <para>
            The message will be searched for in system message-table resource(s)
            using the native <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.ToString">
      <summary>
            Return error information string
            </summary>
      <returns>error information string</returns>
      <remarks>
        <para>
            Return error information string
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr)">
      <summary>
            Formats a message string.
            </summary>
      <param name="dwFlags">Formatting options, and how to interpret the <paramref name="lpSource" /> parameter.</param>
      <param name="lpSource">Location of the message definition.</param>
      <param name="dwMessageId">Message identifier for the requested message.</param>
      <param name="dwLanguageId">Language identifier for the requested message.</param>
      <param name="lpBuffer">If <paramref name="dwFlags" /> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the function allocates a buffer using the <c>LocalAlloc</c> function, and places the pointer to the buffer at the address specified in <paramref name="lpBuffer" />.</param>
      <param name="nSize">If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of TCHARs that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</param>
      <param name="Arguments">Pointer to an array of values that are used as insert values in the formatted message.</param>
      <remarks>
        <para>
            The function requires a message definition as input. The message definition can come from a 
            buffer passed into the function. It can come from a message table resource in an 
            already-loaded module. Or the caller can ask the function to search the system's message 
            table resource(s) for the message definition. The function finds the message definition 
            in a message table resource based on a message identifier and a language identifier. 
            The function copies the formatted message text to an output buffer, processing any embedded 
            insert sequences if requested.
            </para>
        <para>
            To prevent the usage of unsafe code, this stub does not support inserting values in the formatted message.
            </para>
      </remarks>
      <returns>
        <para>
            If the function succeeds, the return value is the number of TCHARs stored in the output 
            buffer, excluding the terminating null character.
            </para>
        <para>
            If the function fails, the return value is zero. To get extended error information, 
            call <see cref="M:Marshal.GetLastWin32Error()" />.
            </para>
      </returns>
    </member>
    <member name="P:log4net.Util.NativeError.Number">
      <summary>
            Gets the number of the native error.
            </summary>
      <value>
            The number of the native error.
            </value>
      <remarks>
        <para>
            Gets the number of the native error.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NativeError.Message">
      <summary>
            Gets the message of the native error.
            </summary>
      <value>
            The message of the native error.
            </value>
      <remarks>
        <para>
        </para>
            Gets the message of the native error.
            </remarks>
    </member>
    <member name="T:log4net.Util.NullDictionaryEnumerator">
      <summary>
            An always empty <see cref="T:System.Collections.IDictionaryEnumerator" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionaryEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.NullDictionaryEnumerator.s_instance">
      <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.MoveNext">
      <summary>
            Test if the enumerator can advance, if so advance.
            </summary>
      <returns>
        <c>false</c> as the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> cannot advance.</returns>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullDictionaryEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.Reset">
      <summary>
            Resets the enumerator back to the start.
            </summary>
      <remarks>
        <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullDictionaryEnumerator.Reset" /> does nothing.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Instance">
      <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Current">
      <summary>
            Gets the current object from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Key">
      <summary>
            Gets the current key from the enumerator.
            </summary>
      <remarks>
            Throws an exception because the <see cref="T:log4net.Util.NullDictionaryEnumerator" />
            never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Key" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Value">
      <summary>
            Gets the current value from the enumerator.
            </summary>
      <value>The current value from the enumerator.</value>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Value" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Entry">
      <summary>
            Gets the current entry from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current entry.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Entry" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="T:log4net.Util.NullEnumerator">
      <summary>
            An always empty <see cref="T:System.Collections.IEnumerator" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.NullEnumerator.s_instance">
      <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
    </member>
    <member name="M:log4net.Util.NullEnumerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullEnumerator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullEnumerator.MoveNext">
      <summary>
            Test if the enumerator can advance, if so advance
            </summary>
      <returns>
        <c>false</c> as the <see cref="T:log4net.Util.NullEnumerator" /> cannot advance.</returns>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullEnumerator.Reset">
      <summary>
            Resets the enumerator back to the start.
            </summary>
      <remarks>
        <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullEnumerator.Reset" /> does nothing.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullEnumerator.Instance">
      <summary>
            Get the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullEnumerator.Current">
      <summary>
            Gets the current object from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="T:log4net.Util.NullSecurityContext">
      <summary>
            A SecurityContext used when a SecurityContext is not required
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Util.NullSecurityContext" /> is a no-op implementation of the
            <see cref="T:log4net.Core.SecurityContext" /> base class. It is used where a <see cref="T:log4net.Core.SecurityContext" />
            is required but one has not been provided.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.NullSecurityContext.Instance">
      <summary>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></summary>
      <remarks>
        <para>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullSecurityContext.#ctor">
      <summary>
            Private constructor
            </summary>
      <remarks>
        <para>
            Private constructor for singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullSecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate this SecurityContext
            </summary>
      <param name="state">State supplied by the caller</param>
      <returns>
        <c>null</c>
      </returns>
      <remarks>
        <para>
            No impersonation is done and <c>null</c> is always returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.OnlyOnceErrorHandler">
      <summary>
            Implements log4net's default error handling policy which consists 
            of emitting a message for the first error in an appender and 
            ignoring all subsequent errors.
            </summary>
      <remarks>
        <para>
            The error message is processed using the LogLog sub-system by default.
            </para>
        <para>
            This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Ron Grabowski</author>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_enabledDate">
      <summary>
            The date the error was recorded.
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_firstTime">
      <summary>
            Flag to indicate if it is the first error
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_message">
      <summary>
            The message recorded during the first error.
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_exception">
      <summary>
            The exception recorded during the first error.
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_errorCode">
      <summary>
            The error code recorded during the first error.
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_prefix">
      <summary>
            String to prefix each message with
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.declaringType">
      <summary>
            The fully qualified type of the OnlyOnceErrorHandler class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="prefix">The prefix to use for each message.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class
            with the specified prefix.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Reset">
      <summary>
            Reset the error handler back to its initial disabled state.
            </summary>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
      <summary>
            Log an Error
            </summary>
      <param name="message">The error message.</param>
      <param name="e">The exception.</param>
      <param name="errorCode">The internal error code.</param>
      <remarks>
        <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)">
      <summary>
            Log the very first error
            </summary>
      <param name="message">The error message.</param>
      <param name="e">The exception.</param>
      <param name="errorCode">The internal error code.</param>
      <remarks>
        <para>
            Sends the error information to <see cref="T:log4net.Util.LogLog" />'s Error method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception)">
      <summary>
            Log an Error
            </summary>
      <param name="message">The error message.</param>
      <param name="e">The exception.</param>
      <remarks>
        <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String)">
      <summary>
            Log an error
            </summary>
      <param name="message">The error message.</param>
      <remarks>
        <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.IsEnabled">
      <summary>
            Is error logging enabled
            </summary>
      <remarks>
        <para>
            Is error logging enabled. Logging is only enabled for the
            first error delivered to the <see cref="T:log4net.Util.OnlyOnceErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.EnabledDate">
      <summary>
            The date the first error that trigged this error handler occured.
            </summary>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorMessage">
      <summary>
            The message from the first error that trigged this error handler.
            </summary>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.Exception">
      <summary>
            The exception from the first error that trigged this error handler.
            </summary>
      <remarks>
            May be <see langword="null" />.
            </remarks>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorCode">
      <summary>
            The error code from the first error that trigged this error handler.
            </summary>
      <remarks>
            Defaults to <see cref="F:log4net.Core.ErrorCode.GenericFailure" /></remarks>
    </member>
    <member name="T:log4net.Util.OptionConverter">
      <summary>
            A convenience class to convert property values to specific types.
            </summary>
      <remarks>
        <para>
            Utility functions for converting types and parsing values.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.OptionConverter.declaringType">
      <summary>
            The fully qualified type of the OptionConverter class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.OptionConverter" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ToBoolean(System.String,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="argValue">String to convert.</param>
      <param name="defaultValue">The default value.</param>
      <returns>The <see cref="T:System.Boolean" /> value of <paramref name="argValue" />.</returns>
      <remarks>
        <para>
            If <paramref name="argValue" /> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue" /> is "false", then <c>false</c> is returned. 
            Otherwise, <paramref name="defaultValue" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ToFileSize(System.String,System.Int64)">
      <summary>
            Parses a file size into a number.
            </summary>
      <param name="argValue">String to parse.</param>
      <param name="defaultValue">The default value.</param>
      <returns>The <see cref="T:System.Int64" /> value of <paramref name="argValue" />.</returns>
      <remarks>
        <para>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </para>
        <para>
          <paramref name="defaultValue" /> is returned when <paramref name="argValue" />
            cannot be converted to a <see cref="T:System.Int64" /> value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ConvertStringTo(System.Type,System.String)">
      <summary>
            Converts a string to an object.
            </summary>
      <param name="target">The target type to convert to.</param>
      <param name="txt">The string to convert to an object.</param>
      <returns>
            The object converted from a string or <c>null</c> when the 
            conversion failed.
            </returns>
      <remarks>
        <para>
            Converts a string to an object. Uses the converter registry to try
            to convert the string value into the specified target type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.CanConvertTypeTo(System.Type,System.Type)">
      <summary>
            Checks if there is an appropriate type conversion from the source type to the target type.
            </summary>
      <param name="sourceType">The type to convert from.</param>
      <param name="targetType">The type to convert to.</param>
      <returns>
        <c>true</c> if there is a conversion from the source type to the target type.</returns>
      <remarks>
            Checks if there is an appropriate type conversion from the source type to the target type.
            <para></para></remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ConvertTypeTo(System.Object,System.Type)">
      <summary>
            Converts an object to the target type.
            </summary>
      <param name="sourceInstance">The object to convert to the target type.</param>
      <param name="targetType">The type to convert to.</param>
      <returns>The converted object.</returns>
      <remarks>
        <para>
            Converts an object to the target type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
      <summary>
            Instantiates an object given a class name.
            </summary>
      <param name="className">The fully qualified class name of the object to instantiate.</param>
      <param name="superClass">The class to which the new object should belong.</param>
      <param name="defaultValue">The object to return in case of non-fulfillment.</param>
      <returns>
            An instance of the <paramref name="className" /> or <paramref name="defaultValue" />
            if the object could not be instantiated.
            </returns>
      <remarks>
        <para>
            Checks that the <paramref name="className" /> is a subclass of
            <paramref name="superClass" />. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.SubstituteVariables(System.String,System.Collections.IDictionary)">
      <summary>
            Performs variable substitution in string <paramref name="value" /> from the 
            values of keys found in <paramref name="props" />.
            </summary>
      <param name="value">The string on which variable substitution is performed.</param>
      <param name="props">The dictionary to use to lookup variables.</param>
      <returns>The result of the substitutions.</returns>
      <remarks>
        <para>
            The variable substitution delimiters are <b>${</b> and <b>}</b>.
            </para>
        <para>
            For example, if props contains <c>key=value</c>, then the call
            </para>
        <para>
          <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of key is ${key}.");
            </code>
        </para>
        <para>
            will set the variable <c>s</c> to "Value of key is value.".
            </para>
        <para>
            If no value could be found for the specified key, then substitution 
            defaults to an empty string.
            </para>
        <para>
            For example, if system properties contains no value for the key
            "nonExistentKey", then the call
            </para>
        <para>
          <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of nonExistentKey is [${nonExistentKey}]");
            </code>
        </para>
        <para>
            will set <s>s</s> to "Value of nonExistentKey is []".	 
            </para>
        <para>
            An Exception is thrown if <paramref name="value" /> contains a start 
            delimiter "${" which is not balanced by a stop delimiter "}". 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ParseEnum(System.Type,System.String,System.Boolean)">
      <summary>
            Converts the string representation of the name or numeric value of one or 
            more enumerated constants to an equivalent enumerated object.
            </summary>
      <param name="enumType">The type to convert to.</param>
      <param name="value">The enum string value.</param>
      <param name="ignoreCase">If <c>true</c>, ignore case; otherwise, regard case.</param>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="T:log4net.Util.PatternParser">
      <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout" /> class
            is delegated to the PatternParser class.
            </summary>
      <remarks>
        <para>
            The <c>PatternParser</c> processes a pattern string and
            returns a chain of <see cref="T:log4net.Util.PatternConverter" /> objects.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Util.PatternParser.StringLengthComparer">
      <summary>
            Sort strings by length
            </summary>
      <remarks>
        <para>
          <see cref="T:System.Collections.IComparer" /> that orders strings by string length.
            The longest strings are placed first
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.PatternParser.m_head">
      <summary>
            The first pattern converter in the chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_tail">
      <summary>
             the last pattern converter in the chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_pattern">
      <summary>
            The pattern
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_patternConverters">
      <summary>
            Internal map of converter identifiers to converter types
            </summary>
      <remarks>
        <para>
            This map overrides the static s_globalRulesRegistry map.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.PatternParser.declaringType">
      <summary>
            The fully qualified type of the PatternParser class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="pattern">The pattern to parse.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternParser" /> class 
            with the specified pattern string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.Parse">
      <summary>
            Parses the pattern into a chain of pattern converters.
            </summary>
      <returns>The head of a chain of pattern converters.</returns>
      <remarks>
        <para>
            Parses the pattern into a chain of pattern converters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.BuildCache">
      <summary>
            Build the unified cache of converters from the static and instance maps
            </summary>
      <returns>the list of all the converter names</returns>
      <remarks>
        <para>
            Build the unified cache of converters from the static and instance maps
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.ParseInternal(System.String,System.String[])">
      <summary>
            Internal method to parse the specified pattern to find specified matches
            </summary>
      <param name="pattern">the pattern to parse</param>
      <param name="matches">the converter names to match in the pattern</param>
      <remarks>
        <para>
            The matches param must be sorted such that longer strings come before shorter ones.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.ProcessLiteral(System.String)">
      <summary>
            Process a parsed literal
            </summary>
      <param name="text">the literal text</param>
    </member>
    <member name="M:log4net.Util.PatternParser.ProcessConverter(System.String,System.String,log4net.Util.FormattingInfo)">
      <summary>
            Process a parsed converter pattern
            </summary>
      <param name="converterName">the name of the converter</param>
      <param name="option">the optional option for the converter</param>
      <param name="formattingInfo">the formatting info for the converter</param>
    </member>
    <member name="M:log4net.Util.PatternParser.AddConverter(log4net.Util.PatternConverter)">
      <summary>
            Resets the internal state of the parser and adds the specified pattern converter 
            to the chain.
            </summary>
      <param name="pc">The pattern converter to add.</param>
    </member>
    <member name="P:log4net.Util.PatternParser.PatternConverters">
      <summary>
            Get the converter registry used by this parser
            </summary>
      <value>
            The converter registry used by this parser
            </value>
      <remarks>
        <para>
            Get the converter registry used by this parser
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternString">
      <summary>
            This class implements a patterned string.
            </summary>
      <remarks>
        <para>
            This string has embedded patterns that are resolved and expanded
            when the string is formatted.
            </para>
        <para>
            This class functions similarly to the <see cref="T:log4net.Layout.PatternLayout" />
            in that it accepts a pattern and renders it to a string. Unlike the 
            <see cref="T:log4net.Layout.PatternLayout" /> however the <c>PatternString</c>
            does not render the properties of a specific <see cref="T:log4net.Core.LoggingEvent" /> but
            of the process in general.
            </para>
        <para>
            The recognized conversion pattern names are:
            </para>
        <list type="table">
          <listheader>
            <term>Conversion Pattern Name</term>
            <description>Effect</description>
          </listheader>
          <item>
            <term>appdomain</term>
            <description>
              <para>
                        Used to output the friendly name of the current AppDomain.
                        </para>
            </description>
          </item>
          <item>
            <term>date</term>
            <description>
              <para>
            			Used to output the current date and time in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>env</term>
            <description>
              <para>
            			Used to output the a specific environment variable. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%env{COMPUTERNAME}</b> would include the value
            			of the <c>COMPUTERNAME</c> environment variable.
                        </para>
              <para>
                        The <c>env</c> pattern is not supported on the .NET Compact Framework.
                        </para>
            </description>
          </item>
          <item>
            <term>identity</term>
            <description>
              <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
            </description>
          </item>
          <item>
            <term>newline</term>
            <description>
              <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
              <para>
            			This conversion pattern name offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
            </description>
          </item>
          <item>
            <term>processid</term>
            <description>
              <para>
            			Used to output the system process ID for the current process.
                        </para>
            </description>
          </item>
          <item>
            <term>property</term>
            <description>
              <para>
            			Used to output a specific context property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are stored in logging contexts. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
              <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
              <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
              <list type="definition">
                <item>
                  <term>the thread properties</term>
                  <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                </item>
                <item>
                  <term>the global properties</term>
                  <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>random</term>
            <description>
              <para>
                        Used to output a random string of characters. The string is made up of
                        uppercase letters and numbers. By default the string is 4 characters long.
                        The length of the string can be specified within braces directly following the
            			pattern specifier, e.g. <b>%random{8}</b> would output an 8 character string.
                        </para>
            </description>
          </item>
          <item>
            <term>username</term>
            <description>
              <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
            </description>
          </item>
          <item>
            <term>utcdate</term>
            <description>
              <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>%</term>
            <description>
              <para>
            			The sequence %% outputs a single percent sign.
            			</para>
            </description>
          </item>
        </list>
        <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Util.PatternString" />
            instance using <see cref="M:AddConverter(ConverterInfo)" /> or
            <see cref="M:AddConverter(string, Type)" />.
            </para>
        <para>
            See the <see cref="T:log4net.Layout.PatternLayout" /> for details on the 
            <i>format modifiers</i> supported by the patterns.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternString.s_globalRulesRegistry">
      <summary>
            Internal map of converter identifiers to converter types.
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_pattern">
      <summary>
            the pattern
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_head">
      <summary>
            the head of the pattern converter chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_instanceRulesRegistry">
      <summary>
            patterns defined on this PatternString only
            </summary>
    </member>
    <member name="M:log4net.Util.PatternString.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.#ctor(System.String)">
      <summary>
            Constructs a PatternString
            </summary>
      <param name="pattern">The pattern to use with this PatternString</param>
      <remarks>
        <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /> with the pattern specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.ActivateOptions">
      <summary>
            Initialize object options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternString.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternString.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternString.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.CreatePatternParser(System.String)">
      <summary>
            Create the <see cref="T:log4net.Util.PatternParser" /> used to parse the pattern
            </summary>
      <param name="pattern">the pattern to parse</param>
      <returns>The <see cref="T:log4net.Util.PatternParser" /></returns>
      <remarks>
        <para>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion pattern name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.Format(System.IO.TextWriter)">
      <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Format the pattern to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.Format">
      <summary>
            Format the pattern as a string
            </summary>
      <returns>the pattern formatted as a string</returns>
      <remarks>
        <para>
            Format the pattern to a string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.AddConverter(log4net.Util.ConverterInfo)">
      <summary>
            Add a converter to this PatternString
            </summary>
      <param name="converterInfo">the converter info</param>
      <remarks>
        <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)">
      <summary>
            Add a converter to this PatternString
            </summary>
      <param name="name">the name of the conversion pattern for this converter</param>
      <param name="type">the type of the converter</param>
      <remarks>
        <para>
            Add a converter to this PatternString
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternString.ConversionPattern">
      <summary>
            Gets or sets the pattern formatting string
            </summary>
      <value>
            The pattern formatting string
            </value>
      <remarks>
        <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReadOnlyPropertiesDictionary">
      <summary>
            String keyed object map that is read only.
            </summary>
      <remarks>
        <para>
            This collection is readonly and cannot be modified.
            </para>
        <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.ReadOnlyPropertiesDictionary.m_hashtable">
      <summary>
            The Hashtable used to store the properties data
            </summary>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Copy Constructor
            </summary>
      <param name="propertiesDictionary">properties to copy</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetKeys">
      <summary>
            Gets the key names.
            </summary>
      <returns>An array of all the keys.</returns>
      <remarks>
        <para>
            Gets the key names.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Contains(System.String)">
      <summary>
            Test if the dictionary contains a specified key
            </summary>
      <param name="key">the key to look for</param>
      <returns>true if the dictionary contains the specified key</returns>
      <remarks>
        <para>
            Test if the dictionary contains a specified key
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
      <remarks>
        <para>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Clear">
      <summary>
            Remove all properties from the properties collection
            </summary>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Item(System.String)">
      <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
      <value>
            The value of the property with the specified key.
            </value>
      <param name="key">The key of the property to get or set.</param>
      <remarks>
        <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.InnerHashtable">
      <summary>
            The hashtable used to store the properties
            </summary>
      <value>
            The internal collection used to store the properties
            </value>
      <remarks>
        <para>
            The hashtable used to store the properties
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Count">
      <summary>
            The number of properties in this collection
            </summary>
    </member>
    <member name="T:log4net.Util.PropertiesDictionary">
      <summary>
            String keyed object map.
            </summary>
      <remarks>
        <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Constructor
            </summary>
      <param name="propertiesDictionary">properties to copy</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class 
            with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Because this class is sealed the serialization constructor is private.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.Remove(System.String)">
      <summary>
            Remove the entry with the specified key from this dictionary
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove the entry with the specified key from this dictionary
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.Clear">
      <summary>
            Remove all properties from the properties collection
            </summary>
      <remarks>
        <para>
            Remove all properties from the properties collection
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PropertiesDictionary.Item(System.String)">
      <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
      <value>
            The value of the property with the specified key.
            </value>
      <param name="key">The key of the property to get or set.</param>
      <remarks>
        <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PropertyEntry">
      <summary>
            A class to hold the key and data for a property set in the config file
            </summary>
      <remarks>
        <para>
            A class to hold the key and data for a property set in the config file
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertyEntry.ToString">
      <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
      <returns>string info about this object</returns>
    </member>
    <member name="P:log4net.Util.PropertyEntry.Key">
      <summary>
            Property Key
            </summary>
      <value>
            Property Key
            </value>
      <remarks>
        <para>
            Property Key.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PropertyEntry.Value">
      <summary>
            Property Value
            </summary>
      <value>
            Property Value
            </value>
      <remarks>
        <para>
            Property Value.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ProtectCloseTextWriter">
      <summary>
            A <see cref="T:System.IO.TextWriter" /> that ignores the <see cref="M:log4net.Util.ProtectCloseTextWriter.Close" /> message
            </summary>
      <remarks>
        <para>
            This writer is used in special cases where it is necessary 
            to protect a writer from being closed by a client.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Constructor
            </summary>
      <param name="writer">the writer to actually write to</param>
      <remarks>
        <para>
            Create a new ProtectCloseTextWriter using a writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.Attach(System.IO.TextWriter)">
      <summary>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to attach to</param>
      <remarks>
        <para>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.Close">
      <summary>
            Does not close the underlying output writer.
            </summary>
      <remarks>
        <para>
            Does not close the underlying output writer.
            This method does nothing.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReaderWriterLock">
      <summary>
            Defines a lock that supports single writers and multiple readers
            </summary>
      <remarks>
        <para>
          <c>ReaderWriterLock</c> is used to synchronize access to a resource. 
            At any given time, it allows either concurrent read access for 
            multiple threads, or write access for a single thread. In a 
            situation where a resource is changed infrequently, a 
            <c>ReaderWriterLock</c> provides better throughput than a simple 
            one-at-a-time lock, such as <see cref="T:System.Threading.Monitor" />.
            </para>
        <para>
            If a platform does not support a <c>System.Threading.ReaderWriterLock</c> 
            implementation then all readers and writers are serialized. Therefore 
            the caller must not rely on multiple simultaneous readers.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReaderWriterLock" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.AcquireReaderLock">
      <summary>
            Acquires a reader lock
            </summary>
      <remarks>
        <para>
          <see cref="M:log4net.Util.ReaderWriterLock.AcquireReaderLock" /> blocks if a different thread has the writer 
            lock, or if at least one thread is waiting for the writer lock.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock">
      <summary>
            Decrements the lock count
            </summary>
      <remarks>
        <para>
          <see cref="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock" /> decrements the lock count. When the count 
            reaches zero, the lock is released.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.AcquireWriterLock">
      <summary>
            Acquires the writer lock
            </summary>
      <remarks>
        <para>
            This method blocks if another thread has a reader lock or writer lock.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.ReleaseWriterLock">
      <summary>
            Decrements the lock count on the writer lock
            </summary>
      <remarks>
        <para>
            ReleaseWriterLock decrements the writer lock count. 
            When the count reaches zero, the writer lock is released.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReusableStringWriter">
      <summary>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused
            </summary>
      <remarks>
        <para>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused.
            This uses a single buffer for string operations.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.#ctor(System.IFormatProvider)">
      <summary>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></summary>
      <param name="formatProvider">the format provider to use</param>
      <remarks>
        <para>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.Dispose(System.Boolean)">
      <summary>
            Override Dispose to prevent closing of writer
            </summary>
      <param name="disposing">flag</param>
      <remarks>
        <para>
            Override Dispose to prevent closing of writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)">
      <summary>
            Reset this string writer so that it can be reused.
            </summary>
      <param name="maxCapacity">the maximum buffer capacity before it is trimmed</param>
      <param name="defaultSize">the default size to make the buffer</param>
      <remarks>
        <para>
            Reset this string writer so that it can be reused.
            The internal buffers are cleared and reset.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.SystemInfo">
      <summary>
            Utility class for system specific information.
            </summary>
      <remarks>
        <para>
            Utility class of static methods for system specific information.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Alexey Solofnenko</author>
    </member>
    <member name="F:log4net.Util.SystemInfo.EmptyTypes">
      <summary>
            Gets an empty array of types.
            </summary>
      <remarks>
        <para>
            The <c>Type.EmptyTypes</c> field is not available on
            the .NET Compact Framework 1.0.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.SystemInfo.declaringType">
      <summary>
            The fully qualified type of the SystemInfo class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_hostName">
      <summary>
            Cache the host name for the current machine
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_appFriendlyName">
      <summary>
            Cache the application friendly name
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_nullText">
      <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_notAvailableText">
      <summary>
            Text to output when an unsupported feature is requested.
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_processStartTime">
      <summary>
            Start time for the current process.
            </summary>
    </member>
    <member name="M:log4net.Util.SystemInfo.#ctor">
      <summary>
            Private constructor to prevent instances.
            </summary>
      <remarks>
        <para>
            Only static methods are exposed from this type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
      <summary>
            Gets the assembly location path for the specified assembly.
            </summary>
      <param name="myAssembly">The assembly to get the location for.</param>
      <returns>The location of the assembly.</returns>
      <remarks>
        <para>
            This method does not guarantee to return the correct path
            to the assembly. If only tries to give an indication as to
            where the assembly was loaded from.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
      <summary>
            Gets the fully qualified name of the <see cref="T:System.Type" />, including 
            the name of the assembly from which the <see cref="T:System.Type" /> was 
            loaded.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to get the fully qualified name for.</param>
      <returns>The fully qualified name for the <see cref="T:System.Type" />.</returns>
      <remarks>
        <para>
            This is equivalent to the <c>Type.AssemblyQualifiedName</c> property,
            but this method works on the .NET Compact Framework 1.0 as well as
            the full .NET runtime.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
      <summary>
            Gets the short name of the <see cref="T:System.Reflection.Assembly" />.
            </summary>
      <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the name for.</param>
      <returns>The short name of the <see cref="T:System.Reflection.Assembly" />.</returns>
      <remarks>
        <para>
            The short name of the assembly is the <see cref="P:System.Reflection.Assembly.FullName" /> 
            without the version, culture, or public key. i.e. it is just the 
            assembly's file name without the extension.
            </para>
        <para>
            Use this rather than <c>Assembly.GetName().Name</c> because that
            is not available on the Compact Framework.
            </para>
        <para>
            Because of a FileIOPermission security demand we cannot do
            the obvious Assembly.GetName().Name. We are allowed to get
            the <see cref="P:System.Reflection.Assembly.FullName" /> of the assembly so we 
            start from there and strip out just the assembly name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
      <summary>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </summary>
      <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the file name for.</param>
      <returns>The file name of the assembly.</returns>
      <remarks>
        <para>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="relativeType">A sibling type to use to load the type.</param>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
        <para>
            If the type name is not fully qualified, it will be loaded from the assembly
            containing the specified relative type. If the type is not found in the assembly 
            then all the loaded assemblies will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
        <para>
            If the type name is not fully qualified it will be loaded from the
            assembly that is directly calling this method. If the type is not found 
            in the assembly then all the loaded assemblies will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="relativeAssembly">An assembly to load the type from.</param>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
        <para>
            If the type name is not fully qualified it will be loaded from the specified
            assembly. If the type is not found in the assembly then all the loaded assemblies 
            will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.NewGuid">
      <summary>
            Generate a new guid
            </summary>
      <returns>A new Guid</returns>
      <remarks>
        <para>
            Generate a new guid
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
      <summary>
            Create an <see cref="T:System.ArgumentOutOfRangeException" /></summary>
      <param name="parameterName">The name of the parameter that caused the exception</param>
      <param name="actualValue">The value of the argument that causes this exception</param>
      <param name="message">The message that describes the error</param>
      <returns>the ArgumentOutOfRangeException object</returns>
      <remarks>
        <para>
            Create a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class 
            with a specified error message, the parameter name, and the value 
            of the argument.
            </para>
        <para>
            The Compact Framework does not support the 3 parameter constructor for the
            <see cref="T:System.ArgumentOutOfRangeException" /> type. This method provides an
            implementation that works for all platforms.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int32@)">
      <summary>
            Parse a string into an <see cref="T:System.Int32" /> value
            </summary>
      <param name="s">the string to parse</param>
      <param name="val">out param where the parsed value is placed</param>
      <returns>
        <c>true</c> if the string was able to be parsed into an integer</returns>
      <remarks>
        <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int64@)">
      <summary>
            Parse a string into an <see cref="T:System.Int64" /> value
            </summary>
      <param name="s">the string to parse</param>
      <param name="val">out param where the parsed value is placed</param>
      <returns>
        <c>true</c> if the string was able to be parsed into an integer</returns>
      <remarks>
        <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int16@)">
      <summary>
            Parse a string into an <see cref="T:System.Int16" /> value
            </summary>
      <param name="s">the string to parse</param>
      <param name="val">out param where the parsed value is placed</param>
      <returns>
        <c>true</c> if the string was able to be parsed into an integer</returns>
      <remarks>
        <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetAppSetting(System.String)">
      <summary>
            Lookup an application setting
            </summary>
      <param name="key">the application settings key to lookup</param>
      <returns>the value for the key, or <c>null</c></returns>
      <remarks>
        <para>
            Configuration APIs are not supported under the Compact Framework
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified local file path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
        <para>
            The path specified must be a local file path, a URI is not supported.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.CreateCaseInsensitiveHashtable">
      <summary>
            Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity. 
            </summary>
      <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity</returns>
      <remarks>
        <para>
            The new Hashtable instance uses the default load factor, the CaseInsensitiveHashCodeProvider, and the CaseInsensitiveComparer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NewLine">
      <summary>
            Gets the system dependent line terminator.
            </summary>
      <value>
            The system dependent line terminator.
            </value>
      <remarks>
        <para>
            Gets the system dependent line terminator.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ApplicationBaseDirectory">
      <summary>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </summary>
      <value>The base directory path for the current <see cref="T:System.AppDomain" />.</value>
      <remarks>
        <para>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </para>
        <para>
            The value returned may be either a local file path or a URI.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ConfigurationFileLocation">
      <summary>
            Gets the path to the configuration file for the current <see cref="T:System.AppDomain" />.
            </summary>
      <value>The path to the configuration file for the current <see cref="T:System.AppDomain" />.</value>
      <remarks>
        <para>
            The .NET Compact Framework 1.0 does not have a concept of a configuration
            file. For this runtime, we use the entry assembly location as the root for
            the configuration file name.
            </para>
        <para>
            The value returned may be either a local file path or a URI.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.EntryAssemblyLocation">
      <summary>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </summary>
      <value>The path to the entry assembly.</value>
      <remarks>
        <para>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.CurrentThreadId">
      <summary>
            Gets the ID of the current thread.
            </summary>
      <value>The ID of the current thread.</value>
      <remarks>
        <para>
            On the .NET framework, the <c>AppDomain.GetCurrentThreadId</c> method
            is used to obtain the thread ID for the current thread. This is the 
            operating system ID for the thread.
            </para>
        <para>
            On the .NET Compact Framework 1.0 it is not possible to get the 
            operating system thread ID for the current thread. The native method 
            <c>GetCurrentThreadId</c> is implemented inline in a header file
            and cannot be called.
            </para>
        <para>
            On the .NET Framework 2.0 the <c>Thread.ManagedThreadId</c> is used as this
            gives a stable id unrelated to the operating system thread ID which may 
            change if the runtime is using fibers.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.HostName">
      <summary>
            Get the host name or machine name for the current machine
            </summary>
      <value>
            The hostname or machine name
            </value>
      <remarks>
        <para>
            Get the host name or machine name for the current machine
            </para>
        <para>
            The host name (<see cref="M:System.Net.Dns.GetHostName" />) or
            the machine name (<c>Environment.MachineName</c>) for
            the current machine, or if neither of these are available
            then <c>NOT AVAILABLE</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ApplicationFriendlyName">
      <summary>
            Get this application's friendly name
            </summary>
      <value>
            The friendly name of this application as a string
            </value>
      <remarks>
        <para>
            If available the name of the application is retrieved from
            the <c>AppDomain</c> using <c>AppDomain.CurrentDomain.FriendlyName</c>.
            </para>
        <para>
            Otherwise the file name of the entry assembly is used.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ProcessStartTime">
      <summary>
            Get the start time for the current process.
            </summary>
      <remarks>
        <para>
            This is the time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
        <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
        <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NullText">
      <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
      <remarks>
        <para>
            Use this value to indicate a <c>null</c> has been encountered while
            outputting a string representation of an item.
            </para>
        <para>
            The default value is <c>(null)</c>. This value can be overridden by specifying
            a value for the <c>log4net.NullText</c> appSetting in the application's
            .config file.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NotAvailableText">
      <summary>
            Text to output when an unsupported feature is requested.
            </summary>
      <remarks>
        <para>
            Use this value when an unsupported feature is requested.
            </para>
        <para>
            The default value is <c>NOT AVAILABLE</c>. This value can be overridden by specifying
            a value for the <c>log4net.NotAvailableText</c> appSetting in the application's
            .config file.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.SystemStringFormat">
      <summary>
            Utility class that represents a format string.
            </summary>
      <remarks>
        <para>
            Utility class that represents a format string.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.SystemStringFormat.declaringType">
      <summary>
            The fully qualified type of the SystemStringFormat class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.#ctor(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Initialise the <see cref="T:log4net.Util.SystemStringFormat" /></summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.ToString">
      <summary>
            Format the string and arguments
            </summary>
      <returns>the formatted string</returns>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.StringFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent 
            of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.
            A specified parameter supplies culture-specific formatting information.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> 
            equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.
            </returns>
      <remarks>
        <para>
            This method does not throw exceptions. If an exception thrown while formatting the result the
            exception and arguments are returned in the result string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.StringFormatError(System.Exception,System.String,System.Object[])">
      <summary>
            Process an error during StringFormat
            </summary>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.RenderArray(System.Array,System.Text.StringBuilder)">
      <summary>
            Dump the contents of an array into a string builder
            </summary>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.RenderObject(System.Object,System.Text.StringBuilder)">
      <summary>
            Dump an object to a string
            </summary>
    </member>
    <member name="T:log4net.Util.ThreadContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.ThreadContextProperties._dictionary">
      <summary>
            Each thread will automatically have its instance.
            </summary>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.#ctor">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.Remove(System.String)">
      <summary>
            Remove a property
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove a property
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.GetKeys">
      <summary>
            Get the keys stored in the properties.
            </summary>
      <para>
            Gets the keys stored in the properties.
            </para>
      <returns>a set of the defined keys</returns>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.Clear">
      <summary>
            Clear all properties
            </summary>
      <remarks>
        <para>
            Clear all properties
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.GetProperties(System.Boolean)">
      <summary>
            Get the <c>PropertiesDictionary</c> for this thread.
            </summary>
      <param name="create">create the dictionary if it does not exist, otherwise return null if does not exist</param>
      <returns>the properties for this thread</returns>
      <remarks>
        <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doing so.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Gets or sets the value of a property
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStack">
      <summary>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Util.ThreadContextStack.StackFrame">
      <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
      <remarks>
        <para>
            Inner class used to represent a single context frame in the stack.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.ThreadContextStack.StackFrame)">
      <summary>
            Constructor
            </summary>
      <param name="message">The message for this context.</param>
      <param name="parent">The parent context in the chain.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.StackFrame.Message">
      <summary>
            Get the message.
            </summary>
      <value>The message.</value>
      <remarks>
        <para>
            Get the message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.StackFrame.FullMessage">
      <summary>
            Gets the full text of the context down to the root level.
            </summary>
      <value>
            The full text of the context down to the root level.
            </value>
      <remarks>
        <para>
            Gets the full text of the context down to the root level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStack.AutoPopStackFrame">
      <summary>
            Struct returned from the <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> method.
            </summary>
      <remarks>
        <para>
            This struct implements the <see cref="T:System.IDisposable" /> and is designed to be used
            with the <see langword="using" /> pattern to remove the stack frame at the end of the scope.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.#ctor(System.Collections.Stack,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="frameStack">The internal stack used by the ThreadContextStack.</param>
      <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.Dispose">
      <summary>
            Returns the stack to the correct depth.
            </summary>
      <remarks>
        <para>
            Returns the stack to the correct depth.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.ThreadContextStack.m_stack">
      <summary>
            The stack store.
            </summary>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.#ctor">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack" /> class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Clear">
      <summary>
            Clears all the contextual information held in this stack.
            </summary>
      <remarks>
        <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this tread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose" /> method of the <see cref="T:System.IDisposable" />
            returned from <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> even in exceptional circumstances,
            for example by using the <c>using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Pop">
      <summary>
            Removes the top context from this stack.
            </summary>
      <returns>The message in the context that was removed from the top of this stack.</returns>
      <remarks>
        <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null" />) is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Push(System.String)">
      <summary>
            Pushes a new context message into this stack.
            </summary>
      <param name="message">The new context message.</param>
      <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up the context stack.
            </returns>
      <remarks>
        <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
      </remarks>
      <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code></example>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.GetFullMessage">
      <summary>
            Gets the current context information for this stack.
            </summary>
      <returns>The current context information.</returns>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.ToString">
      <summary>
            Gets the current context information for this stack.
            </summary>
      <returns>Gets the current context information</returns>
      <remarks>
        <para>
            Gets the current context information for this stack.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.Count">
      <summary>
            The number of messages in the stack
            </summary>
      <value>
            The current number of messages in the stack
            </value>
      <remarks>
        <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> has been called
            minus the number of times <see cref="M:log4net.Util.ThreadContextStack.Pop" /> has been called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.InternalStack">
      <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.ThreadContextStack" /></summary>
      <value>The internal storage stack</value>
      <remarks>
        <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC" />. Tytpically the internal stack should not
            be modified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStacks">
      <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.ThreadContextStacks.declaringType">
      <summary>
            The fully qualified type of the ThreadContextStacks class.
            </summary>
      <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStacks.#ctor(log4net.Util.ContextPropertiesBase)">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStacks.Item(System.String)">
      <summary>
            Gets the named thread context stack
            </summary>
      <value>
            The named stack
            </value>
      <remarks>
        <para>
            Gets the named thread context stack
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.Transform">
      <summary>
            Utility class for transforming strings.
            </summary>
      <remarks>
        <para>
            Utility class for transforming strings.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.Transform.INVALIDCHARS">
      <summary>
            Characters illegal in XML 1.0
            </summary>
    </member>
    <member name="M:log4net.Util.Transform.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.Transform" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.WriteEscapedXmlString(System.Xml.XmlWriter,System.String,System.String)">
      <summary>
            Write a string to an <see cref="T:System.Xml.XmlWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="textData">the string to write</param>
      <param name="invalidCharReplacement">The string to replace non XML compliant chars with</param>
      <remarks>
        <para>
            The test is escaped either using XML escape entities
            or using CDATA sections.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.MaskXmlInvalidCharacters(System.String,System.String)">
      <summary>
            Replace invalid XML characters in text string
            </summary>
      <param name="textData">the XML text input string</param>
      <param name="mask">the string to use in place of invalid characters</param>
      <returns>A string that does not contain invalid XML characters.</returns>
      <remarks>
        <para>
            Certain Unicode code points are not allowed in the XML InfoSet, for
            details see: <a href="http://www.w3.org/TR/REC-xml/#charsets">http://www.w3.org/TR/REC-xml/#charsets</a>.
            </para>
        <para>
            This method replaces any illegal characters in the input string
            with the mask string specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.CountSubstrings(System.String,System.String)">
      <summary>
            Count the number of times that the substring occurs in the text
            </summary>
      <param name="text">the text to search</param>
      <param name="substring">the substring to find</param>
      <returns>the number of times the substring occurs in the text</returns>
      <remarks>
        <para>
            The substring is assumed to be non repeating within itself.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext">
      <summary>
            Impersonate a Windows Account
            </summary>
      <remarks>
        <para>
            This <see cref="T:log4net.Core.SecurityContext" /> impersonates a Windows account.
            </para>
        <para>
            How the impersonation is done depends on the value of <see cref="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)" />.
            This allows the context to either impersonate a set of user credentials specified 
            using username, domain name and password or to revert to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext.ImpersonationMode">
      <summary>
            The impersonation modes for the <see cref="T:log4net.Util.WindowsSecurityContext" /></summary>
      <remarks>
        <para>
            See the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property for
            details.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext">
      <summary>
            Adds <see cref="T:System.IDisposable" /> to <see cref="T:System.Security.Principal.WindowsImpersonationContext" /></summary>
      <remarks>
        <para>
            Helper class to expose the <see cref="T:System.Security.Principal.WindowsImpersonationContext" />
            through the <see cref="T:System.IDisposable" /> interface.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.#ctor(System.Security.Principal.WindowsImpersonationContext)">
      <summary>
            Constructor
            </summary>
      <param name="impersonationContext">the impersonation context being wrapped</param>
      <remarks>
        <para>
            Constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.Dispose">
      <summary>
            Revert the impersonation
            </summary>
      <remarks>
        <para>
            Revert the impersonation
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.ActivateOptions">
      <summary>
            Initialize the SecurityContext based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> must be called again.
            </para>
        <para>
            The security context will try to Logon the specified user account and
            capture a primary token for impersonation.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, 
            <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> or <see cref="P:log4net.Util.WindowsSecurityContext.Password" /> properties were not specified.</exception>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
      <param name="state">caller provided state</param>
      <returns>
            An <see cref="T:System.IDisposable" /> instance that will revoke the impersonation of this SecurityContext
            </returns>
      <remarks>
        <para>
            Depending on the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property either
            impersonate a user using credentials supplied or revert 
            to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.LogonUser(System.String,System.String,System.String)">
      <summary>
            Create a <see cref="T:System.Security.Principal.WindowsIdentity" /> given the userName, domainName and password.
            </summary>
      <param name="userName">the user name</param>
      <param name="domainName">the domain name</param>
      <param name="password">the password</param>
      <returns>the <see cref="T:System.Security.Principal.WindowsIdentity" /> for the account specified</returns>
      <remarks>
        <para>
            Uses the Windows API call LogonUser to get a principal token for the account. This
            token is used to initialize the WindowsIdentity.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.Credentials">
      <summary>
            Gets or sets the impersonation mode for this security context
            </summary>
      <value>
            The impersonation mode for this security context
            </value>
      <remarks>
        <para>
            Impersonate either a user with user credentials or
            revert this thread to the credentials of the process.
            The value is one of the <see cref="T:log4net.Util.WindowsSecurityContext.ImpersonationMode" />
            enum.
            </para>
        <para>
            The default value is <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /></para>
        <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" />
            the user's credentials are established using the
            <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.Password" />
            values.
            </para>
        <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process" />
            no other properties need to be set. If the calling thread is 
            impersonating then it will be reverted back to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.UserName">
      <summary>
            Gets or sets the Windows username for this security context
            </summary>
      <value>
            The Windows username for this security context
            </value>
      <remarks>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.DomainName">
      <summary>
            Gets or sets the Windows domain name for this security context
            </summary>
      <value>
            The Windows domain name for this security context
            </value>
      <remarks>
        <para>
            The default value for <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> is the local machine name
            taken from the <see cref="P:System.Environment.MachineName" /> property.
            </para>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.Password">
      <summary>
            Sets the password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
      <value>
            The password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </value>
      <remarks>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="T:log4net.GlobalContext">
      <summary>
            The log4net Global Context.
            </summary>
      <remarks>
        <para>
            The <c>GlobalContext</c> provides a location for global debugging 
            information to be stored.
            </para>
        <para>
            The global context has a properties map and these properties can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputing these properties.
            </para>
        <para>
            By default the <c>log4net:HostName</c> property is set to the name of 
            the current machine.
            </para>
      </remarks>
      <example>
        <code lang="C#">
            GlobalContext.Properties["hostname"] = Environment.MachineName;
            </code>
      </example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.GlobalContext.s_properties">
      <summary>
            The global context properties instance
            </summary>
    </member>
    <member name="M:log4net.GlobalContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="P:log4net.GlobalContext.Properties">
      <summary>
            The global properties map.
            </summary>
      <value>
            The global properties map.
            </value>
      <remarks>
        <para>
            The global properties map.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.AssemblyInfo">
      <summary>
            Provides information about the environment the assembly has
            been built for.
            </summary>
    </member>
    <member name="F:log4net.AssemblyInfo.Version">
      <summary>Version of the assembly</summary>
    </member>
    <member name="F:log4net.AssemblyInfo.TargetFrameworkVersion">
      <summary>Version of the framework targeted</summary>
    </member>
    <member name="F:log4net.AssemblyInfo.TargetFramework">
      <summary>Type of framework targeted</summary>
    </member>
    <member name="F:log4net.AssemblyInfo.ClientProfile">
      <summary>Does it target a client profile?</summary>
    </member>
    <member name="P:log4net.AssemblyInfo.Info">
      <summary>
            Identifies the version and target for this assembly.
            </summary>
    </member>
    <member name="T:log4net.LogicalThreadContext">
      <summary>
            The log4net Logical Thread Context.
            </summary>
      <remarks>
        <para>
            The <c>LogicalThreadContext</c> provides a location for <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> specific debugging 
            information to be stored.
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> or <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
        <para>
            The Logical Thread Context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
        <para>
            The Logical Thread Context provides a diagnostic context for the current call context. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The Logical Thread Context is managed on a per <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> basis.
            </para>
        <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission" /> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
      </remarks>
      <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            LogicalThreadContext.Properties["user"] = userName;
            log.Info("This log message has a LogicalThreadContext Property called 'user'");
            </code></example>
      <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(LogicalThreadContext.Stacks["LDC"].Push("my context message"))
            {
            	log.Info("This log message has a LogicalThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.LogicalThreadContext.s_properties">
      <summary>
            The thread context properties instance
            </summary>
    </member>
    <member name="F:log4net.LogicalThreadContext.s_stacks">
      <summary>
            The thread context stacks instance
            </summary>
    </member>
    <member name="M:log4net.LogicalThreadContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.LogicalThreadContext.Properties">
      <summary>
            The thread properties map
            </summary>
      <value>
            The thread properties map
            </value>
      <remarks>
        <para>
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> 
            or <see cref="T:log4net.GlobalContext" /> properties with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.LogicalThreadContext.Stacks">
      <summary>
            The thread stacks
            </summary>
      <value>
            stack map
            </value>
      <remarks>
        <para>
            The logical thread stacks.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.LogManager">
      <summary>
            This class is used by client applications to request logger instances.
            </summary>
      <remarks>
        <para>
            This class has static methods that are used by a client to request
            a logger instance. The <see cref="M:GetLogger(string)" /> method is 
            used to retrieve a logger.
            </para>
        <para>
            See the <see cref="T:log4net.ILog" /> interface for more details.
            </para>
      </remarks>
      <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
      <threadsafety static="true" instance="true" />
      <seealso cref="T:log4net.ILog" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.LogManager.s_wrapperMap">
      <summary>
            The wrapper map to use to hold the <see cref="T:log4net.Core.LogImpl" /> objects.
            </summary>
    </member>
    <member name="M:log4net.LogManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.LogManager" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.LogManager.Exists(System.String)">
      <overloads>Returns the named logger if it exists.</overloads>
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the default repository) then it
            returns a reference to the logger, otherwise it returns <c>null</c>.
            </para>
      </remarks>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>The logger found, or <c>null</c> if no logger could be found.</returns>
    </member>
    <member name="M:log4net.LogManager.Exists(System.String,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the logger doesn't exist in the specified 
            repository.
            </returns>
    </member>
    <member name="M:log4net.LogManager.Exists(System.Reflection.Assembly,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the repository for the specified assembly) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger, or <c>null</c> if the logger doesn't exist in the specified
            assembly's repository.
            </returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers">
      <overloads>Get the currently defined loggers.</overloads>
      <summary>
            Returns all the currently defined loggers in the default repository.
            </summary>
      <remarks>
        <para>The root logger is <b>not</b> included in the returned array.</para>
      </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers(System.String)">
      <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers(System.Reflection.Assembly)">
      <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String)">
      <overloads>Get or create a logger.</overloads>
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Type)">
      <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
      <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String,System.Type)">
      <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
      <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)">
      <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
      <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.Shutdown">
      <summary>
            Shuts down the log4net system.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository">
      <overloads>Shutdown a logger repository.</overloads>
      <summary>
            Shuts down the default repository.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default repository.
            </para>
        <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository(System.String)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            <paramref name="repository" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
      <param name="repository">The repository to shutdown.</param>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository(System.Reflection.Assembly)">
      <summary>
            Shuts down the repository specified.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration">
      <overloads>Reset the configuration of a repository</overloads>
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration(System.String)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
      <param name="repository">The repository to reset.</param>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration(System.Reflection.Assembly)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository">
      <overloads>Get the logger repository.</overloads>
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository(System.String)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.GetRepository">
      <overloads>Get a logger repository.</overloads>
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetRepository(System.String)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
    </member>
    <member name="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.Type)">
      <overloads>Create a domain</overloads>
      <summary>
            Creates a repository with the specified repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()" /> will return 
            the same repository instance.
            </para>
      </remarks>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.Type)">
      <overloads>Create a logger repository.</overloads>
      <summary>
            Creates a repository with the specified repository type.
            </summary>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()" /> will return 
            the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <remarks>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <remarks>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetAllRepositories">
      <summary>
            Gets the list of currently defined repositories.
            </summary>
      <remarks>
        <para>
            Get an array of all the <see cref="T:log4net.Repository.ILoggerRepository" /> objects that have been created.
            </para>
      </remarks>
      <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapLogger(log4net.Core.ILogger)">
      <summary>
            Looks up the wrapper object for the logger specified.
            </summary>
      <param name="logger">The logger to get the wrapper for.</param>
      <returns>The wrapper for the logger specified.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapLoggers(log4net.Core.ILogger[])">
      <summary>
            Looks up the wrapper objects for the loggers specified.
            </summary>
      <param name="loggers">The loggers to get the wrappers for.</param>
      <returns>The wrapper objects for the loggers specified.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapperCreationHandler(log4net.Core.ILogger)">
      <summary>
            Create the <see cref="T:log4net.Core.ILoggerWrapper" /> objects used by
            this manager.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <returns>The wrapper for the logger specified.</returns>
    </member>
    <member name="T:log4net.MDC">
      <summary>
            Implementation of Mapped Diagnostic Contexts.
            </summary>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            The MDC class is similar to the <see cref="T:log4net.NDC" /> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The MDC is managed on a per thread basis.
            </para>
      </remarks>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.MDC.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.MDC" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.MDC.Get(System.String)">
      <summary>
            Gets the context value identified by the <paramref name="key" /> parameter.
            </summary>
      <param name="key">The key to lookup in the MDC.</param>
      <returns>The string value held for the key, or a <c>null</c> reference if no corresponding value is found.</returns>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            If the <paramref name="key" /> parameter does not look up to a
            previously defined context then <c>null</c> will be returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Set(System.String,System.String)">
      <summary>
            Add an entry to the MDC
            </summary>
      <param name="key">The key to store the value under.</param>
      <param name="value">The value to store.</param>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Puts a context value (the <paramref name="value" /> parameter) as identified
            with the <paramref name="key" /> parameter into the current thread's
            context map.
            </para>
        <para>
            If a value is already defined for the <paramref name="key" />
            specified then the value will be replaced. If the <paramref name="value" /> 
            is specified as <c>null</c> then the key value mapping will be removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Remove(System.String)">
      <summary>
            Removes the key value mapping for the key specified.
            </summary>
      <param name="key">The key to remove.</param>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Remove the specified entry from this thread's MDC
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Clear">
      <summary>
            Clear all entries in the MDC
            </summary>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Remove all the entries from this thread's MDC
            </para>
      </remarks>
    </member>
    <member name="T:log4net.NDC">
      <summary>
            Implementation of Nested Diagnostic Contexts.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.
            </para>
        <para>
            Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.
            </para>
        <para>
            Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.
            </para>
      </remarks>
      <example>How to push a message into the context
            <code lang="C#">
            using(NDC.Push("my context message"))
            {
            	... all log calls will have 'my context message' included ...
            
            } // at the end of the using block the message is automatically removed 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.NDC.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.NDC" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.NDC.Clear">
      <summary>
            Clears all the contextual information held on the current thread.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Clears the stack of NDC data held on the current thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.CloneStack">
      <summary>
            Creates a clone of the stack of context information.
            </summary>
      <returns>A clone of the context info for this thread.</returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            The results of this method can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)" /> 
            method to allow child threads to inherit the context of their 
            parent thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
      <summary>
            Inherits the contextual information from another thread.
            </summary>
      <param name="stack">The context stack to inherit.</param>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            This thread will use the context information from the stack
            supplied. This can be used to initialize child threads with
            the same contextual information as their parent threads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visible to the other.
            Call <see cref="M:log4net.NDC.CloneStack" /> to obtain a stack to pass to
            this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Pop">
      <summary>
            Removes the top context from the stack.
            </summary>
      <returns>
            The message in the context that was removed from the top 
            of the stack.
            </returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not <c>null</c>) is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Push(System.String)">
      <summary>
            Pushes a new context message.
            </summary>
      <param name="message">The new context message.</param>
      <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up 
            the context stack.
            </returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
      </remarks>
      <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code></example>
    </member>
    <member name="M:log4net.NDC.Remove">
      <summary>
            Removes the context information for this thread. It is
            not required to call this method.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            This method is not implemented.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
      <summary>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            </summary>
      <param name="maxDepth">The maximum depth of the stack</param>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.NDC.Depth">
      <summary>
            Gets the current context depth.
            </summary>
      <value>The current context depth.</value>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            The number of context values pushed onto the context stack.
            </para>
        <para>
            Used to record the current depth of the context. This can then 
            be restored using the <see cref="M:log4net.NDC.SetMaxDepth(System.Int32)" /> method.
            </para>
      </remarks>
      <seealso cref="M:log4net.NDC.SetMaxDepth(System.Int32)" />
    </member>
    <member name="T:log4net.ThreadContext">
      <summary>
            The log4net Thread Context.
            </summary>
      <remarks>
        <para>
            The <c>ThreadContext</c> provides a location for thread specific debugging 
            information to be stored.
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
        <para>
            The thread context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
        <para>
            The Thread Context provides a diagnostic context for the current thread. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The Thread Context is managed on a per thread basis.
            </para>
      </remarks>
      <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            ThreadContext.Properties["user"] = userName;
            log.Info("This log message has a ThreadContext Property called 'user'");
            </code></example>
      <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(ThreadContext.Stacks["NDC"].Push("my context message"))
            {
            	log.Info("This log message has a ThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.ThreadContext.s_properties">
      <summary>
            The thread context properties instance
            </summary>
    </member>
    <member name="F:log4net.ThreadContext.s_stacks">
      <summary>
            The thread context stacks instance
            </summary>
    </member>
    <member name="M:log4net.ThreadContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ThreadContext.Properties">
      <summary>
            The thread properties map
            </summary>
      <value>
            The thread properties map
            </value>
      <remarks>
        <para>
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ThreadContext.Stacks">
      <summary>
            The thread stacks
            </summary>
      <value>
            stack map
            </value>
      <remarks>
        <para>
            The thread local stacks.
            </para>
      </remarks>
    </member>
    <member name="T:LoggingManager.Logger">
      <summary>
            Log4Net Wrapper
            </summary>
    </member>
    <member name="M:LoggingManager.Logger.#ctor(System.String)">
      <summary>
            Logger
            </summary>
      <param name="FullPathName">Full XML Path and File Name </param>
    </member>
    <member name="M:LoggingManager.Logger.Exception(System.String,System.Exception)">
      <summary>
            Exception Process; Level: Error
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="ex">Exception</param>
    </member>
    <member name="M:LoggingManager.Logger.Exception(System.Exception)">
      <summary>
            Exception Process; Level: Error
            </summary>
      <param name="ex">Exception</param>
    </member>
    <member name="M:LoggingManager.Logger.Debug(System.String,System.String)">
      <summary>
            Debug Without Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Debug(System.String,System.String,System.Object[])">
      <summary>
            Debug Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="M:LoggingManager.Logger.Info(System.String,System.String)">
      <summary>
            Info Wthout Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Info(System.String,System.String,System.Object[])">
      <summary>
            Info With Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="M:LoggingManager.Logger.Warn(System.String,System.String)">
      <summary>
            Warnning Without Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Warn(System.String,System.String,System.Object[])">
      <summary>
            Warnning With Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="M:LoggingManager.Logger.Error(System.String,System.String)">
      <summary>
            Error Without Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Error(System.String,System.String,System.Object[])">
      <summary>
            Error With Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="M:LoggingManager.Logger.Fatal(System.String,System.String)">
      <summary>
            Fatal Without Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Fatal(System.String,System.String,System.Object[])">
      <summary>
            Fatal With Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="M:LoggingManager.Logger.Log(System.String,log4net.Core.Level,System.String)">
      <summary>
            Log Without Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="level">Log Level</param>
      <param name="Message">Message</param>
    </member>
    <member name="M:LoggingManager.Logger.Log(System.String,log4net.Core.Level,System.String,System.Object[])">
      <summary>
            Log With Format
            </summary>
      <param name="LoggerName">Display Logger Name</param>
      <param name="level">Log Level</param>
      <param name="Message">Message With Format</param>
      <param name="Args">Format Args</param>
    </member>
    <member name="T:Util.Extension.AlertBoxButton">
      <summary>
            Alert Box Button Style
            </summary>
    </member>
    <member name="F:Util.Extension.AlertBoxButton.Msg_OK">
      <summary>
            出現OK, Caption正常
            </summary>
    </member>
    <member name="F:Util.Extension.AlertBoxButton.Error_OK">
      <summary>
            出現OK, Caption為紅字
            </summary>
    </member>
    <member name="F:Util.Extension.AlertBoxButton.OKCancel">
      <summary>
            出現OK/Cancel
            </summary>
    </member>
    <member name="F:Util.Extension.AlertBoxButton.YesNo">
      <summary>
            出現Yes/No
            </summary>
    </member>
    <member name="T:Util.Extension.AlertBox">
      <summary>
            自製 MessageBox
            </summary>
    </member>
    <member name="F:Util.Extension.AlertBox.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Util.Extension.AlertBox.Alert(System.Windows.Forms.Form,Util.Extension.AlertBoxButton,System.String,System.String)">
      <summary>
            Show Message
            </summary>
      <param name="Owner">控制視窗位置用; 可為null</param>
      <param name="Button">Button Style</param>
      <param name="Caption">標題</param>
      <param name="Msg">訊息</param>
      <returns>User是否按下OK</returns>
    </member>
    <member name="M:Util.Extension.AlertBox.AlertWithoutReply(System.Windows.Forms.Form,Util.Extension.AlertBoxButton,System.String,System.String)">
      <summary>
            Show Message Without Reply
            </summary>
      <param name="Owner">控制視窗位置用; 可為null</param>
      <param name="Button">Button Style</param>
      <param name="Caption">標題</param>
      <param name="Msg">訊息</param>
    </member>
    <member name="M:Util.Extension.AlertBox.Alert(System.Windows.Forms.Form,Util.Extension.AlertBoxButton,System.String,Util.Extension.MsgLine[])">
      <summary>
            Show Message
            </summary>
      <param name="Owner">控制視窗位置用; 可為null</param>
      <param name="Button">Button Style</param>
      <param name="Caption">標題</param>
      <param name="MsgLines">多行訊息</param>
      <returns>User是否按下OK</returns>
    </member>
    <member name="M:Util.Extension.AlertBox.AlertWithoutReply(System.Windows.Forms.Form,Util.Extension.AlertBoxButton,System.String,Util.Extension.MsgLine[])">
      <summary>
            Show Message Without Reply
            </summary>
      <param name="Owner">控制視窗位置用; 可為null</param>
      <param name="Button">Button Style</param>
      <param name="Caption">標題</param>
      <param name="MsgLines">多行訊息</param>
    </member>
    <member name="M:Util.Extension.AlertBox.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Util.Extension.AlertBox.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:Util.Extension.MsgLine">
      <summary>
            多行訊息使用的訊息行
            </summary>
    </member>
    <member name="M:Util.Extension.MsgLine.#ctor(System.String,System.String)">
      <summary>
            訊息行
            </summary>
      <param name="Caption">訊息標題</param>
      <param name="Msg">訊息內容</param>
    </member>
    <member name="M:Util.Extension.MsgLine.#ctor(System.Object,System.Object)">
      <summary>
            訊息行
            </summary>
      <param name="Caption">訊息標題</param>
      <param name="Msg">訊息內容</param>
    </member>
    <member name="P:Util.Extension.MsgLine.Show">
      <summary>
            顯示的訊息
            </summary>
    </member>
    <member name="T:Util.Extension.Class.DisposableClass">
      <summary>
            可釋放類別
            </summary>
    </member>
    <member name="M:Util.Extension.Class.DisposableClass.Dispose">
      <summary>
            可釋放類別
            </summary>
    </member>
    <member name="M:Util.Extension.Class.DisposableClass.Dispose(System.Boolean)">
      <summary>
            Dispose
            </summary>
      <param name="IsDisposing">
      </param>
    </member>
    <member name="M:Util.Extension.Class.DisposableClass.DoDispose">
      <summary>
            Do something when disposing
            </summary>
    </member>
    <member name="T:Util.Extension.Class.Config">
      <summary>
            設定檔物件
            </summary>
    </member>
    <member name="M:Util.Extension.Class.Config.#ctor(System.String,System.String)">
      <summary>
            設定檔物件
            </summary>
      <param name="path">檔案路徑</param>
      <param name="name">檔案名稱</param>
    </member>
    <member name="M:Util.Extension.Class.Config.ContainSection(System.String)">
      <summary>
            找尋設定區塊
            </summary>
      <param name="sectionName">區塊名稱</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Class.Config.ContainSectionLike(System.String)">
      <summary>
            找尋設定區塊(用Like方式)
            </summary>
      <param name="sectionName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Util.Extension.Extension">
      <summary>
            擴充方法
            </summary>
    </member>
    <member name="M:Util.Extension.Extension.ToEnum``1(System.String)">
      <summary>
            String to TEnum, parse fail return default(TEnum)
            </summary>
      <typeparam name="TEnum">
      </typeparam>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToEnum``1(System.Char)">
      <summary>
            Char to TEnum, parse fail return default(TEnum)
            </summary>
      <typeparam name="TEnum">
      </typeparam>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToEnum``1(System.Object)">
      <summary>
            Object to TEnum, parse fail return default(TEnum)
            </summary>
      <typeparam name="TEnum">
      </typeparam>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToEnumByDescription``1(System.String)">
      <summary>
            Description(string) to TEnum, parse fail return default(TEnum)
            </summary>
      <typeparam name="TEnum">
      </typeparam>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToArrayByDescription``1(System.Boolean)">
      <summary>
            translate Enum to Array with Description
            </summary>
      <typeparam name="TEnum">
      </typeparam>
      <param name="isSort">Default: false</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Linq Distinct
            </summary>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TKey">
      </typeparam>
      <param name="source">
      </param>
      <param name="keySelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.GetDefault(System.Type)">
      <summary>
            Get Type Default Value
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDouble(System.String)">
      <summary>
            String to double, parse fail return default(double)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDouble(System.Object)">
      <summary>
            Object to double, parse fail return default(double)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToInt(System.String)">
      <summary>
            String to int, parse fail return default(int)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToInt(System.Object)">
      <summary>
            object to int, parse fail return default(int)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDecimal(System.String)">
      <summary>
            String to decimal, parse fail return default(decimal)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDecimal(System.Object)">
      <summary>
            Object to decimal, parse fail return default(decimal)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToBool(System.String)">
      <summary>
            String to bool, parse fail return default(bool)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToBool(System.Object)">
      <summary>
            object to bool, parse fail return default(bool)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDateTime(System.String)">
      <summary>
            String to DateTime, parse fail return default(DateTime)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToDateTime(System.Object)">
      <summary>
            Object to DateTime, parse fail return default(DateTime)
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.CastTo``1(System.String,``0)">
      <summary>
            String to assign type, parse fail return  default value or default(T)
            </summary>
      <typeparam name="T">assign type</typeparam>
      <param name="value">value to be cast</param>
      <param name="defaultvalue">pase fail will return this value</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.CastTo``1(System.Object,``0)">
      <summary>
            object to assign type, parse fail return  default value or default(T)
            </summary>
      <typeparam name="T">assign type</typeparam>
      <param name="value">value to be cast</param>
      <param name="defaultvalue">pase fail will return this value</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.ToArrayString(System.String[],System.Char)">
      <summary>
            把陣列內容轉成字串, 用指定的符號隔開
            陣列沒內容傳回空字串
            </summary>
      <param name="array">
      </param>
      <param name="spreadItem">分隔字串, 預設為","</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.Description(System.Enum)">
      <summary>
            Get Enum Description Attribute, not have Description return Enum.ToString()
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.Description(System.Reflection.PropertyInfo)">
      <summary>
            Get PropertyInfo Description Attribute, not have Description return PropertyInfo.Name
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.Category(System.Reflection.PropertyInfo)">
      <summary>
            Get PropertyInfo Category Attribute, not have Category return PropertyName
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Extension.Invoke(System.Action,System.Object)">
      <summary>
            無參數Delegate的Invoke
            </summary>
      <param name="action">
      </param>
      <param name="control">要Invoke的Control</param>
    </member>
    <member name="M:Util.Extension.Extension.BeginInvoke(System.Action,System.Object)">
      <summary>
            無參數Delegate的BeginInvoke
            </summary>
      <param name="action">
      </param>
      <param name="control">要BeginInvoke的Control</param>
    </member>
    <member name="M:Util.Extension.Extension.Invoke(System.Delegate,System.Object,System.Object[])">
      <summary>
            有參數Delegate的Invoke
            </summary>
      <param name="d">Delegate</param>
      <param name="control">要Invoke的Control</param>
      <param name="args">Delegate的參數</param>
    </member>
    <member name="M:Util.Extension.Extension.BeginInvoke(System.Delegate,System.Object,System.Object[])">
      <summary>
            有參數Delegate的BeginInvoke
            </summary>
      <param name="d">Delegate</param>
      <param name="control">要BeginInvoke的Control</param>
      <param name="args">Delegate的參數</param>
    </member>
    <member name="T:Util.Extension.Class.NotifyableClass">
      <summary>
            Notifyable
            </summary>
    </member>
    <member name="M:Util.Extension.Class.NotifyableClass.OnPropertyChangedNoVerify(System.String)">
      <summary>
            屬性改變(不驗證屬性是否存在)
            </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotifyableClass.OnPropertyChanged(System.String)">
      <summary>
            屬性改變
            </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="E:Util.Extension.Class.NotifyableClass.PropertyChanged">
      <summary>
            Property Change
            </summary>
    </member>
    <member name="M:Util.Extension.Class.NotifyDisposableClass.OnPropertyChangedNoVerify(System.String)">
      <summary>
            屬性改變(不驗證屬性是否存在)
            </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotifyDisposableClass.OnPropertyChanged(System.String)">
      <summary>
            屬性改變
            </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotifyDisposableClass.Dispose">
      <summary>
            可釋放類別
            </summary>
    </member>
    <member name="M:Util.Extension.Class.NotifyDisposableClass.Dispose(System.Boolean)">
      <summary>
            Dispose
            </summary>
      <param name="IsDisposing">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotifyDisposableClass.DoDispose">
      <summary>
            Do something when disposing
            </summary>
    </member>
    <member name="E:Util.Extension.Class.NotifyDisposableClass.PropertyChanged">
      <summary>
            屬性改變
            </summary>
    </member>
    <member name="M:Util.Extension.Class.IniFile.SaveToTextFile(System.String)">
      <summary>
            將 ini 存檔成純文字檔
            </summary>
      <param name="sPath">檔案完整路徑與名稱</param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Class.IniFile.Save">
      <summary>
            存檔, 並備份 bak 檔案
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Class.IniFile.SaveWithoutBak">
      <summary>
            存檔而不備份
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Class.IniFile.AddKeyVal(System.String,System.String,System.String)">
      <summary>
            add section , key, value.  if the key exists , will return false
            </summary>
      <param name="section">
      </param>
      <param name="key">
      </param>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Util.Extension.Class.IniFile.ModifyKeyVal(System.String,System.String,System.String)">
      <summary>
            modify key and value, if the key not exists , will be add it.
            </summary>
      <param name="section">
      </param>
      <param name="key">
      </param>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Util.Extension.Class.Notification">
      <summary>
            訊息中心訊息
            </summary>
    </member>
    <member name="M:Util.Extension.Class.Notification.#ctor(System.Object,System.Object)">
      <summary>
            訊息中心訊息
            </summary>
      <param name="sender">
      </param>
      <param name="message">
      </param>
    </member>
    <member name="P:Util.Extension.Class.Notification.Sender">
      <summary>
            傳送者
            </summary>
    </member>
    <member name="P:Util.Extension.Class.Notification.Empty">
      <summary>
            空訊息
            </summary>
    </member>
    <member name="T:Util.Extension.Class.NotificationCenter">
      <summary>
            訊息中心(同步)
            要非同步請用zmq pub/sub
            </summary>
    </member>
    <member name="T:Util.Extension.Class.NotificationCenter.NotificationDelegate">
      <summary>
            Delegate
            </summary>
      <param name="notification">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotificationCenter.AddObserver(Util.Extension.Class.NotificationCenter.NotificationDelegate,System.String)">
      <summary>
            訂閱
            </summary>
      <param name="notificationDelegate">
      </param>
      <param name="notificationName">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotificationCenter.RemoveObserver(Util.Extension.Class.NotificationCenter.NotificationDelegate,System.String)">
      <summary>
            取消
            </summary>
      <param name="notificationDelegate">
      </param>
      <param name="notificationName">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotificationCenter.Post(System.String,Util.Extension.Class.Notification)">
      <summary>
            發送
            </summary>
      <param name="notificationName">
      </param>
      <param name="notification">
      </param>
    </member>
    <member name="M:Util.Extension.Class.NotificationCenter.Post(System.String)">
      <summary>
            發送空訊息
            </summary>
      <param name="notificationName">
      </param>
    </member>
    <member name="P:Util.Extension.Class.NotificationCenter.Instance">
      <summary>
            訊息中心
            </summary>
    </member>
  </members>
</doc>